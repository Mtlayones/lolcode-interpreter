[{"/home/cj/Desktop/LOL CODE Project/LOLCODE_Project/src/index.js":"1","/home/cj/Desktop/LOL CODE Project/LOLCODE_Project/src/App.js":"2","/home/cj/Desktop/LOL CODE Project/LOLCODE_Project/src/reportWebVitals.js":"3","/home/cj/Desktop/LOL CODE Project/LOLCODE_Project/src/gui components/firstFrame.js":"4","/home/cj/Desktop/LOL CODE Project/LOLCODE_Project/src/gui components/secondFrame.js":"5","/home/cj/Desktop/LOL CODE Project/LOLCODE_Project/src/gui components/parser.js":"6","/home/cj/Desktop/LOL CODE Project/LOLCODE_Project/src/gui components/lexemes.js":"7"},{"size":500,"mtime":1608540063155,"results":"8","hashOfConfig":"9"},{"size":1548,"mtime":1608728463124,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1608540063155,"results":"11","hashOfConfig":"9"},{"size":1310,"mtime":1608728373371,"results":"12","hashOfConfig":"9"},{"size":462,"mtime":1608730520382,"results":"13","hashOfConfig":"9"},{"size":48236,"mtime":1608710910176,"results":"14","hashOfConfig":"9"},{"size":3531,"mtime":1608706381301,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"jfoc3v",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","errorCount":0,"warningCount":160,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"18"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"18"},"/home/cj/Desktop/LOL CODE Project/LOLCODE_Project/src/index.js",[],["34","35"],"/home/cj/Desktop/LOL CODE Project/LOLCODE_Project/src/App.js",[],"/home/cj/Desktop/LOL CODE Project/LOLCODE_Project/src/reportWebVitals.js",[],"/home/cj/Desktop/LOL CODE Project/LOLCODE_Project/src/gui components/firstFrame.js",["36"],"import React, { useState } from 'react'\nimport { Upload } from 'antd'\nimport 'antd/dist/antd.css';\nimport '../App.css'\nfunction FirstFrame (props) {\n  const { Dragger } = Upload\n  const [text, setText] = useState(props.lolText)\n  const [files, setfiles] = useState([])\n  const [fileProperty, setFileProperty] = useState({\n  name: 'file',\n  multiple: false,\n  accept : \".lol\",\n  beforeUpload(file){\n    readFile(file)\n    return false\n  },\n  onChange(info){\n    handleChange(info)\n  },\n  onRemove(file){\n    setText('')\n    props.setLolText('')\n  }\n})\n// This Part handle changes in the file (i.e if a file is added)\nconst handleChange = (info) => {\n  let fileList = [...info.fileList];\n  fileList = fileList.slice(-1);\n  setfiles(fileList)\n  \n}\n// This part catches the file that is uploaded/dragged to the Upload field\nconst readFile = async(file) => {\n    const text = await file.text()\n    setText(text)\n    props.setLolText(text)\n    props.setContentChange(true) \n    console.log(props.contentChange)\n  }\n\n  return (\n    <div className=\"firstFrame\"> \n      <div className=\"dragBox\">\n        <Dragger {...fileProperty} fileList = {files}>\n          <p>Drag Your LOL Code File Here</p>\n        </Dragger>\n      </div>\n\n     <p className=\"dragBoxContent\">{text}</p>\n    </div>\n  )\n}\n\nexport default FirstFrame","/home/cj/Desktop/LOL CODE Project/LOLCODE_Project/src/gui components/secondFrame.js",["37","38"],"/home/cj/Desktop/LOL CODE Project/LOLCODE_Project/src/gui components/parser.js",["39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198"],"const lexemes = require('./lexemes.js')\nconst fs = require('fs'); \nconst keywords = lexemes.keywords\nconst literal = lexemes.literals\nconst identifier = lexemes.identifier\nconst types = lexemes.types\n\n// inline comment abstraction //optimized\nconst inline_comment_abs = (code, tableOfLexemes,lineNumber)=>{\n    let placeholder = code[0].shift();\n    tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]})\n    // if there is comment after BTW\n    if(code[0].length != 0){\n        placeholder = code[0].join(\" \")\n        tableOfLexemes.push({value:placeholder,description:'Comment'}) \n        code[0] = [];\n    }\n    return [code, tableOfLexemes, lineNumber];\n}\n\n// multiline comment abstraction //optimized\nconst multiline_comment_abs = (code, tableOfLexemes, lineNumber) =>{\n    let placeholder = code[0].shift();\n    tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]})\n    // getting all the comment before the line of TLDR\n    while(!code[0].includes('TLDR')){\n        placeholder = code[0].join(\" \").trim();\n        if(placeholder != \"\"){\n            tableOfLexemes.push({value:placeholder,description:'Comment'});\n        }\n        code.shift();\n        tableOfLexemes.push({value:'\\n',description:'Line Break'});\n        // if there is no TLDR present in the code\n        if(code.length == 0) return `Syntax Error in line ${lineNumber}: Expected end of Multi-Line Comment.`;\n        code[0]=code[0].trim().split(\" \");\n        lineNumber++;\n    }\n    const indexTLDR = code[0].indexOf(\"TLDR\");\n    // if there is comment before TLDR\n    if(indexTLDR != 0){\n        placeholder = code[0].slice(0,indexTLDR).join(\" \").trim();\n        tableOfLexemes.push({value:placeholder,description:'Comment'});\n    }\n    tableOfLexemes.push({value:'TLDR',description:keywords['TLDR'][1]});\n    code[0] = code[0].slice(indexTLDR+1,code[0].length).join(\" \").trim().split();\n    return [code, tableOfLexemes, lineNumber];\n}\n\n// literal abstraction //optimized\nconst literal_abs = (code,tableOfLexemes,lineNumber) => {\n    let placeholder = code[0].shift(),change = true;\n    if(literal[\"NUMBAR\"][0].test(placeholder)){\n        tableOfLexemes.push({value:placeholder, description: literal[\"NUMBAR\"][1]});\n    }else if(literal[\"NUMBR\"][0].test(placeholder)){\n        tableOfLexemes.push({value:placeholder, description: literal[\"NUMBR\"][1]});\n    }else if(literal[\"YARN\"][0].test(placeholder)){\n        tableOfLexemes.push({value:placeholder, description: literal[\"YARN\"][1]});\n    }else if(literal[\"TROOF\"][0].test(placeholder)){\n        tableOfLexemes.push({value:placeholder, description: literal[\"TROOF\"][1]});\n    }else{\n        code[0].unshift(placeholder);\n        change = false;\n    }\n    return [code,tableOfLexemes, lineNumber,change];\n}\n\n// identifier abstraction //optimized\nconst identifier_abs = (code,tableOfLexemes,lineNumber) => {\n    let placeholder;\n    placeholder = code[0].shift();\n    if(keywords[placeholder] || [\"WIN\",\"FAIL\"].includes(placeholder) || !identifier[0].test(placeholder)){\n        return `Syntax Error in line ${lineNumber}: Expected Identifier: ${placeholder}.`;\n    }else{\n        tableOfLexemes.push({value:placeholder, description: identifier[1]});\n    }\n    return [code,tableOfLexemes, lineNumber];\n}\n\n// operands abstraction\nconst operands_abs = (code,tableOfLexemes,lineNumber,type) => {\n    let error,changed;\n    // literal\n    [code,tableOfLexemes, lineNumber, changed] = literal_abs(code,tableOfLexemes,lineNumber);\n    // expression\n    if(!changed){\n        error = expression_abs(code,tableOfLexemes,lineNumber,type);\n        // check if error\n        if(!Array.isArray(error)) return error;\n        [code,tableOfLexemes, lineNumber, changed] = error;\n    }\n    // identifier\n    if(!changed){\n        error = identifier_abs(code,tableOfLexemes,lineNumber);\n        // check if error\n        if(!Array.isArray(error)) return error;\n        [code,tableOfLexemes, lineNumber] = error;\n    }\n    return [code,tableOfLexemes, lineNumber];\n}\n\n// output abstraction //optimized\nconst output_abs = (code,tableOfLexemes,lineNumber) => {\n    let placeholder = code[0].shift() , nonewline = \"\", error;\n    tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\n    while(true){\n        if(tableOfLexemes[tableOfLexemes.length-1].value == \"VISIBLE\" && (code[0].join(\" \").trim().split(\" \")[0] == \"BTW\" || code[0].length == 0)){\n            return `Syntax Error in line ${lineNumber}: Missing Operands after ${tableOfLexemes[tableOfLexemes.length-1].value}.`;\n        }else if(code[0].join(\" \").trim().split(\" \")[0] == \"BTW\" || code[0].length == 0){\n            break;\n        }else if(code[0].join(\" \").trim().split(\" \")[0] == \"!\"){\n            // no new line encountered\n            code[0] = code[0].join(\" \").trim().split(\" \");\n            code[0].shift()\n            tableOfLexemes.push({value:\"!\",description:\"No newline output\"});\n            continue;\n        }else if(tableOfLexemes[tableOfLexemes.length-1].value == \"!\" && code.length != 0){\n            // if there is operation after ! beside inline comment\n            return `Syntax Error in line ${lineNumber}: Expected end of Expression: ${code[0].join(\" \").trim()}.`;\n        }else if(code[0][0] == \"\"){\n            // if there is exceeding whitespace in between the operation\n            return `Syntax Error in line ${lineNumber}: Exceeding whitespace.`;\n        }\n        // no new line encountered beside an operand\n        if(code[0][0][code[0][0].length-1] == \"!\"){\n            nonewline = \"!\";\n            code[0][0] = code[0][0].slice(0,code[0][0].length-1);     \n        }\n        //operands\n        error = operands_abs(code,tableOfLexemes,lineNumber, true);\n        // check if error\n        if(!Array.isArray(error)) return error;\n        [code,tableOfLexemes, lineNumber] = error;\n        // push no new line\n        if(nonewline == \"!\"){\n            tableOfLexemes.push({value:\"!\",description:\"No newline output\"});\n        }\n    }\n    return [code,tableOfLexemes, lineNumber];\n}\n\n// input abstraction //optimized\nconst input_abs = (code,tableOfLexemes,lineNumber) => {\n    let placeholder = code[0].shift();\n    tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\n    if(code[0].length == 0){\n        return `Syntax Error in line ${lineNumber}: Missing Operands after ${tableOfLexemes[tableOfLexemes.length-1].value}.`;\n    }\n    if(code[0][0] == \"\"){\n        // if there is exceeding whitespace in between the operation\n        return `Syntax Error in line ${lineNumber}: Exceeding whitespace.`;\n    }\n    // identifier\n    const error = identifier_abs(code,tableOfLexemes,lineNumber);\n    // check if error\n    if(!Array.isArray(error)) return error;\n    [code,tableOfLexemes, lineNumber] = error;\n    return [code,tableOfLexemes, lineNumber];\n}\n\n// variable initialization //optimized\nconst initialization_var_abs = (code,tableOfLexemes,lineNumber) => {\n    let placeholder = code[0].shift(),error;\n    tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\n    if(code[0].length == 0){\n        return `Syntax Error in line ${lineNumber}: Missing Operands after ${tableOfLexemes[tableOfLexemes.length-1].value}.`;\n    }\n    if(code[0][0] == \"\"){\n        // if there is exceeding whitespace in between the operation\n        return `Syntax Error in line ${lineNumber}: Exceeding whitespace.`;\n    }\n    if(code[0][0] == \"A\" ){\n        //type init\n        error = type_init_abs(code,tableOfLexemes,lineNumber);\n        // check if error\n        if(!Array.isArray(error)) return error;\n        [code,tableOfLexemes, lineNumber] = error;\n    }else{\n        //operands\n        error = operands_abs(code,tableOfLexemes,lineNumber, true);\n        // check if error\n        if(!Array.isArray(error)) return error;\n        [code,tableOfLexemes, lineNumber] = error;\n    }\n    return [code,tableOfLexemes, lineNumber];\n}\n\n// variable declaration //optimized\nconst declaration_var_abs = (code,tableOfLexemes,lineNumber) => {\n    let placeholder = code[0].shift();\n    tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\n    if(code[0].length == 0){\n        return `Syntax Error in line ${lineNumber}: Missing Operands after ${tableOfLexemes[tableOfLexemes.length-1].value}.`;\n    }\n    if(code[0][0] == \"\"){\n        // if there is exceeding whitespace in between the operation\n        return `Syntax Error in line ${lineNumber}: Exceeding whitespace.`;\n    }\n    // identifier\n    let error = identifier_abs(code,tableOfLexemes,lineNumber);\n    // check if error   \n    if(!Array.isArray(error)) return error;\n    [code,tableOfLexemes, lineNumber] = error;\n    tableOfLexemes[tableOfLexemes.length-1].description = \"Variable Identifier\";\n    // if special IT identifier\n    if(tableOfLexemes[tableOfLexemes.length-1].value == \"IT\"){\n        placeholder = tableOfLexemes.pop();\n        return `Syntax Error in line ${lineNumber}: ${placeholder.value} is a Special Identifier.`;\n    }\n    if(code[0][0] == \"\"){\n        // if there is exceeding whitespace in between the operation\n        return `Syntax Error in line ${lineNumber}: Exceeding whitespace.`;\n    }\n    if(code[0][0] == \"ITZ\"){\n        // initialization\n        error = initialization_var_abs(code,tableOfLexemes,lineNumber);\n        // check if error\n        if(!Array.isArray(error)) return error;\n        [code,tableOfLexemes, lineNumber] = error;\n    }\n    return [code,tableOfLexemes, lineNumber];\n}\n\n// variable assignment //optimized\nconst assignment_var_abs = (code,tableOfLexemes,lineNumber)=>{\n    let placeholder;\n    // identifier\n    let error = identifier_abs(code,tableOfLexemes,lineNumber);\n    // check if error\n    if(!Array.isArray(error)) return error;\n    [code,tableOfLexemes, lineNumber] = error;\n    if(code[0][0] == \"\"){\n        // if there is exceeding whitespace in between the operation\n        return `Syntax Error in line ${lineNumber}: Exceeding whitespace.`;\n    }else if(code[0][0] == \"R\"){\n        placeholder = code[0].shift();\n        tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});  \n    }else{\n        // if inproper use of R\n        return `Syntax Error in line ${lineNumber}: Invalid Operation: ${code[0][0]}.`;\n    }\n    if(code[0].length == 0){\n        return `Syntax Error in line ${lineNumber}: Missing Operands after ${tableOfLexemes[tableOfLexemes.length-1].value}.`;\n    }\n    if(code[0][0] == \"\"){\n        // if there is exceeding whitespace in between the operation\n        return `Syntax Error in line ${lineNumber}: Exceeding whitespace.`;\n    }\n    if(code[0][0] == \"MAEK\"){\n        //operands\n        error = typecast_expr_abs(code,tableOfLexemes,lineNumber, true);\n        // check if error\n        if(!Array.isArray(error)) return error;\n        [code,tableOfLexemes, lineNumber] = error;\n    }else{\n        //operands\n        error = operands_abs(code,tableOfLexemes,lineNumber, true);\n        // check if error\n        if(!Array.isArray(error)) return error;\n        [code,tableOfLexemes, lineNumber] = error;\n    }\n    return [code,tableOfLexemes, lineNumber];\n}\n\n// arithmetic recursion //optimized\nconst arithmetic_recurse_abs = (code,tableOfLexemes,lineNumber) => {\n    let placeholder = code[0].shift();\n    tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\n    let i,error;\n    for (i = 0; i < 3; i++){\n        if(code[0].length == 0){\n            return `Syntax Error in line ${lineNumber}: Missing Operands after ${tableOfLexemes[tableOfLexemes.length-1].value}.`;\n        }\n        if(code[0][0] == \"\"){\n            // if there is exceeding whitespace in between the operation\n            return `Syntax Error in line ${lineNumber}: Exceeding whitespace.`;\n        }\n        if(i != 1){\n            //operands\n            error = operands_abs(code,tableOfLexemes,lineNumber, true);\n            // check if error\n            if(!Array.isArray(error)) return error;\n            [code,tableOfLexemes, lineNumber] = error;\n        }else if(code[0][0] == \"AN\"){\n            placeholder = code[0].shift();\n            tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\n        }else{\n            // if inproper use of AN\n            return `Syntax Error in line ${lineNumber}: Invalid Operation: ${code[0][0]}.`;\n        }\n    }\n    return [code,tableOfLexemes, lineNumber];\n}\n\n// boolean operations op abstraction  //optimized\nconst boolean_operands_abs = (code, tableOfLexemes, lineNumber, type) => {\n    let error, changed = false;\n    if(code[0][1] && keywords[[code[0][0],code[0][1]].join(\" \")] && keywords[[code[0][0],code[0][1]].join(\" \")][0] == \"Boolean\"){\n        // boolean operations\n        code[0].unshift([code[0].shift(),code[0].shift()].join(\" \"));\n        error = boolean_recurse_abs(code,tableOfLexemes,lineNumber);\n        changed = true;\n    }else if(code[0][0] == \"NOT\"){\n        // not operations\n        error = boolean_recurse_abs(code,tableOfLexemes,lineNumber);\n        changed = true;\n    }else if(type && code[0][1] && keywords[[code[0][0],code[0][1]].join(\" \")] && keywords[[code[0][0],code[0][1]].join(\" \")][0] == \"Boolean Many\"){\n        // boolean many operations\n        code[0].unshift([code[0].shift(),code[0].shift()].join(\" \"));\n        error = boolean_many_recurse_abs(code,tableOfLexemes,lineNumber);\n        changed = true;\n    }else if(keywords[code[0][0]] && keywords[code[0][0]][0] == 'Comparison'){\n        // comparison different\n        error = comparison_abs(code,tableOfLexemes,lineNumber);\n        changed = true;\n    }else if(code[0][1]==\"SAEM\" && (keywords[[code[0][0],code[0][1]].join(\" \")][0] == \"Comparison\")){\n        // comparison same\n        code[0].unshift([code[0].shift(),code[0].shift()].join(\" \"));\n        error = comparison_abs(code,tableOfLexemes,lineNumber);\n        changed = true;\n    }\n    if(changed){\n        // check if error\n        if(!Array.isArray(error)) return error;\n        [code,tableOfLexemes, lineNumber] = error;\n    }\n    return [code,tableOfLexemes, lineNumber,changed];\n}\n\n// boolean recursion abstraction //optimized\nconst boolean_recurse_abs = (code,tableOfLexemes,lineNumber) => {\n    let placeholder = code[0].shift(),i,error;\n    tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\n    if(tableOfLexemes[tableOfLexemes.length - 1].value == \"NOT\"){\n        if(code[0].length == 0){\n            return `Syntax Error in line ${lineNumber}: Missing Operands after ${tableOfLexemes[tableOfLexemes.length-1].value}.`;\n        }\n        if(code[0][0] == \"\"){\n            // if there is exceeding whitespace in between the operation\n            return `Syntax Error in line ${lineNumber}: Exceeding whitespace.`;\n        }\n        //operands\n        error = operands_abs(code,tableOfLexemes,lineNumber, true);\n        // check if error\n        if(!Array.isArray(error)) return error;\n        [code,tableOfLexemes, lineNumber] = error;\n    }else{\n        for (i = 0; i < 3; i++){\n            if(code[0].length == 0){\n                return `Syntax Error in line ${lineNumber}: Missing Operands after ${tableOfLexemes[tableOfLexemes.length-1].value}.`;\n            }\n            if(code[0][0] == \"\"){\n                // if there is exceeding whitespace in between the operation\n                return `Syntax Error in line ${lineNumber}: Exceeding whitespace.`;\n            }\n            if(i != 1){\n                //operands\n                error = operands_abs(code,tableOfLexemes,lineNumber, true);\n                // check if error\n                if(!Array.isArray(error)) return error;\n                [code,tableOfLexemes, lineNumber] = error;\n            }else if(code[0][0] == \"AN\"){\n                placeholder = code[0].shift();\n                tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\n            }else{\n                // if inproper use of AN\n                return `Syntax Error in line ${lineNumber}: Invalid Operation: ${code[0][0]}.`;\n            }\n        }\n    }\n    return [code,tableOfLexemes, lineNumber];\n}\n\n// boolean many recursion abstraction //optimized\nconst boolean_many_recurse_abs = (code,tableOfLexemes,lineNumber) => {\n    let placeholder = code[0].shift(),error,cnt=0;\n    tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\n    while(tableOfLexemes[tableOfLexemes.length-1].value != \"MKAY\"){\n        if(code[0].length == 0 && [\"ANY OF\",\"AN\",\"ALL OF\"].includes(tableOfLexemes[tableOfLexemes.length-1].value)){\n            return `Syntax Error in line ${lineNumber}: Missing Operands after ${tableOfLexemes[tableOfLexemes.length-1].value}.`;\n        }\n        if(code[0][0] == \"\"){\n            // if there is exceeding whitespace in between the operation\n            return `Syntax Error in line ${lineNumber}: Exceeding whitespace.`;\n        }\n        if([\"ANY OF\",\"AN\",\"ALL OF\"].includes(tableOfLexemes[tableOfLexemes.length-1].value)){\n            //operands\n            error = operands_abs(code,tableOfLexemes,lineNumber, false);\n            // check if error\n            if(!Array.isArray(error)) return error;\n            [code,tableOfLexemes, lineNumber] = error;\n            cnt ++;\n        }else if(code[0][0] == \"AN\"){\n            placeholder = code[0].shift();\n            tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\n        }else if(cnt>=2 && code[0][0] == \"MKAY\"){\n            placeholder = code[0].shift();\n            tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\n        }else{\n            return `Syntax Error in line ${lineNumber}: Invalid Operation: ${code[0][0]}.`;\n        }\n    }\n    return [code,tableOfLexemes, lineNumber];\n}\n\n// comparison abstraction //optimized\nconst comparison_abs = (code,tableOfLexemes,lineNumber) => {\n    let placeholder = code[0].shift(),i, error;\n    tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\n    for (i = 0; i < 3; i++){\n        if(code[0].length == 0){\n            return `Syntax Error in line ${lineNumber}: Missing Operands after ${tableOfLexemes[tableOfLexemes.length-1].value}.`;\n        }\n        if(code[0][0] == \"\"){\n            // if there is exceeding whitespace in between the operation\n            return `Syntax Error in line ${lineNumber}: Exceeding whitespace.`;\n        }\n        if(i != 1){\n            //operands\n            error = operands_abs(code,tableOfLexemes,lineNumber, true);\n            // check if error\n            if(!Array.isArray(error)) return error;\n            [code,tableOfLexemes, lineNumber] = error;\n        }else if(code[0][0] == \"AN\"){\n            placeholder = code[0].shift();\n            tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\n        }else{\n            // if inproper use of AN\n            return `Syntax Error in line ${lineNumber}: Invalid Operation: ${code[0][0]}.`;\n        }\n    }\n    return [code,tableOfLexemes, lineNumber];\n}\n\n// expression abstraction //optimized\nconst expression_abs = (code, tableOfLexemes, lineNumber, type) => {\n    let error,changed = true;\n    if(code[0][1] && keywords[[code[0][0],code[0][1]].join(\" \")] && (keywords[[code[0][0],code[0][1]].join(\" \")][0] == \"Arithmetic\")){\n        // arithmetic\n        code[0].unshift([code[0].shift(),code[0].shift()].join(\" \"));\n        error = arithmetic_recurse_abs(code,tableOfLexemes,lineNumber);\n        // check if error\n        if(!Array.isArray(error)) return error;\n        [code,tableOfLexemes, lineNumber] = error;\n    }else if(keywords[code[0][0]] && keywords[code[0][0]][0] == 'Concat'){\n        // concat\n        error = concat_abs(code,tableOfLexemes,lineNumber);\n        // check if error\n        if(!Array.isArray(error)) return error;\n        [code,tableOfLexemes, lineNumber] = error;\n    }else{\n        // boolean operations\n        error = boolean_operands_abs(code,tableOfLexemes,lineNumber,type);\n        // check if error\n        if(!Array.isArray(error)) return error;\n        [code,tableOfLexemes, lineNumber,changed] = error;\n    }\n    return [code,tableOfLexemes, lineNumber,changed]\n}\n\n// concatenation abstraction //optimized\nconst concat_abs = (code,tableOfLexemes,lineNumber) => {\n    let placeholder = code[0].shift(),error,cnt = 0;\n    tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\n    while(tableOfLexemes[tableOfLexemes.length-1].value != \"MKAY\"){\n        if(code[0].length == 0 && [\"AN\",\"SMOOSH\"].includes(tableOfLexemes[tableOfLexemes.length-1].value)){\n            // lacking operand after AN\n            return `Syntax Error in line ${lineNumber}: Missing Operands after ${tableOfLexemes[tableOfLexemes.length-1].value}.`;\n        }\n        if(cnt < 2 && code[0].join(\" \").trim().split(\" \")[0] == \"BTW\"){\n            return `Syntax Error in line ${lineNumber}: Missing Operands after ${tableOfLexemes[tableOfLexemes.length-1].value}.`;\n        }else if(cnt >= 2 && tableOfLexemes[tableOfLexemes.length-1].value != \"AN\" && code[0].join(\" \").trim().split(\" \")[0] == \"BTW\" ){\n            break;\n        }\n        if(code[0][0] == \"\"){\n            // if there is exceeding whitespace in between the operation\n            return `Syntax Error in line ${lineNumber}: Exceeding whitespace.`;\n        }\n        if([\"AN\",\"SMOOSH\"].includes(tableOfLexemes[tableOfLexemes.length-1].value)){\n            //operands\n            error = operands_abs(code,tableOfLexemes,lineNumber, true);\n            // check if error\n            if(!Array.isArray(error)) return error;\n            [code,tableOfLexemes, lineNumber] = error;\n            cnt++;\n        }else if(code[0][0] == \"AN\"){\n            placeholder = code[0].shift();\n            tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\n        }else{\n            if(code[0][0] == \"MKAY\" && cnt>=2){\n                placeholder = code[0].shift();\n                tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\n            }else if(cnt>=2){\n                break;\n            }else{\n                // if only one operand present\n                return `Syntax Error in line ${lineNumber}: Missing Operands after ${tableOfLexemes[tableOfLexemes.length-1].value}.`;\n            }\n        }\n    }\n    return [code,tableOfLexemes, lineNumber];\n} \n\n// if else abstraction //optimized\nconst if_else_abs = (code,tableOfLexemes,lineNumber) => {\n    let placeholder = code[0].shift(), if_active = false,else_active = false,end=false,error;\n    placeholder = placeholder.slice(0,placeholder.length-1);\n    tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\n    tableOfLexemes.push({value:\"?\",description:'Control Flow Delimiter'});\n    while(!end){\n        if(code.length == 0){\n            return `Syntax Error in line ${lineNumber-1}: Expected End of Flow Control.`;\n        }\n        if(code[0].length == 0){\n            // encounter new line\n            code.shift();\n            lineNumber++;\n            tableOfLexemes.push({value:'\\n',description:'Line Break'});\n            if(code.length != 0){\n                code[0]=code[0].trim().split(\" \");\n                error = yarn_token_abs(code,lineNumber);\n                if(!Array.isArray(error)) return error;\n                [code, lineNumber] = error;\n            }\n            continue;\n        }else if (code[0][1] && [code[0][0],code[0][1]].join(\" \") == \"YA RLY\" && !if_active){\n            placeholder = [code[0].shift(),code[0].shift()].join(\" \");\n            tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\n            if_active = true;\n        }else if(code[0][0] == \"MEBBE\" && if_active && !else_active){\n            placeholder = code[0].shift();\n            tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\n            if(code[0].length == 0){\n                return `Syntax Error in line ${lineNumber}: Missing Operation after ${placeholder}.`;\n            }\n            if(code[0][0] == \"\"){\n                // if there is exceeding whitespace in between the operation\n                return `Syntax Error in line ${lineNumber}: Exceeding whitespace.`;\n            }\n            //operands\n            error = operands_abs(code,tableOfLexemes,lineNumber, true);\n            // check if error\n            if(!Array.isArray(error)) return error;\n            [code,tableOfLexemes, lineNumber] = error;   \n        }else if(code[0][1] && [code[0][0],code[0][1]].join(\" \") == \"NO WAI\" && if_active && !else_active){\n            placeholder = [code[0].shift(),code[0].shift()].join(\" \");\n            tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\n            else_active = true;\n        }else if(code[0][0] == \"OIC\" && else_active){\n            placeholder = code[0].shift();\n            tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\n            end = true;\n        }else if(if_active){\n            error = statement_abs(code,tableOfLexemes,lineNumber);\n            if(!Array.isArray(error)) return error;\n            [code,tableOfLexemes, lineNumber] = error;\n        }\n        if(code[0].join(\" \").trim().split(\" \")[0] == \"BTW\"){\n            // inline comment\n            [code,tableOfLexemes, lineNumber] = inline_comment_abs(code,tableOfLexemes,lineNumber);\n        }else if(tableOfLexemes[tableOfLexemes.length - 1].value == \"\\n\" && code[0][0] == 'OBTW'){\n            // multiline comment\n            error = multiline_comment_abs(code,tableOfLexemes,lineNumber);\n            if(!Array.isArray(error)) return error;\n            [code,tableOfLexemes, lineNumber] = error;\n        }else if(code[0].length != 0 && !if_active){\n            // if there is no if\n            return `Syntax Error in line ${lineNumber}: Expected start of Flow Control: ${code[0].join(\" \").trim()}.`;\n        }else if(code[0].length != 0){\n            // if there is operation after the identifier\n            return `Syntax Error in line ${lineNumber}: Expected end of Expression: ${code[0].join(\" \").trim()}.`;\n        }\n    }\n    return [code,tableOfLexemes, lineNumber];\n}\n\n// Switch Case Abstraction //optimized\nconst switch_case_abs = (code,tableOfLexemes,lineNumber) => {\n    let placeholder = code[0].shift(),start_active = false,default_active = false,end =false,error;\n    placeholder = placeholder.slice(0,placeholder.length-1);\n    tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\n    tableOfLexemes.push({value:\"?\",description:'Control Flow Delimiter'});\n    while(!end){\n        if(code.length == 0){\n            return `Syntax Error in line ${lineNumber-1}: Expected End of Flow Control.`;\n        }\n        if(code[0].length == 0){\n            // encounter new line\n            code.shift();\n            lineNumber++;\n            tableOfLexemes.push({value:'\\n',description:'Line Break'});\n            if(code.length != 0){\n                code[0]=code[0].trim().split(\" \");\n                error = yarn_token_abs(code,lineNumber);\n                if(!Array.isArray(error)) return error;\n                [code, lineNumber] = error;\n            }\n            continue;\n        }else if(code[0][0] == \"OMG\"){\n            placeholder = code[0].shift();\n            tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\n            if(code[0].length == 0){\n                return `Syntax Error in line ${lineNumber}: Missing Operation after ${placeholder}.`;\n            }\n            if(code[0][0] == \"\"){\n                // if there is exceeding whitespace in between the operation\n                return `Syntax Error in line ${lineNumber}: Exceeding whitespace.`;\n            }\n            //operands\n            error = operands_abs(code,tableOfLexemes,lineNumber, true);\n            // check if error\n            if(!Array.isArray(error)) return error;\n            [code,tableOfLexemes, lineNumber] = error;\n            start_active = true;   \n        }else if(code[0][0] == \"OMGWTF\" && start_active && !default_active){\n            placeholder = code[0].shift();\n            tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\n            default_active = true;\n        }else if(code[0][0] == \"OIC\" && default_active){\n            placeholder = code[0].shift();\n            tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\n            end = true;\n        }else if(code[0][0] == \"GTFO\" && start_active){\n            placeholder = code[0].shift();\n            tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\n        }else if(start_active || default_active){\n            error = statement_abs(code,tableOfLexemes,lineNumber);\n            if(!Array.isArray(error)) return error;\n            [code,tableOfLexemes, lineNumber] = error;\n        }\n        if(code[0].join(\" \").trim().split(\" \")[0] == \"BTW\"){\n            // inline comment\n            [code,tableOfLexemes, lineNumber] = inline_comment_abs(code,tableOfLexemes,lineNumber);\n        }else if(tableOfLexemes[tableOfLexemes.length - 1].value == \"\\n\" && code[0][0] == 'OBTW'){\n            error = multiline_comment_abs(code,tableOfLexemes,lineNumber);\n            if(!Array.isArray(error)) return error;\n            [code,tableOfLexemes, lineNumber] = error;\n        }else if(code[0].length != 0 && !start_active){\n            return `Syntax Error in line ${lineNumber}: Expected start of Flow Control: ${code[0].join(\" \").trim()}.`;\n        }else if(code[0].length != 0){\n            // if there is operation after the identifier\n            return `Syntax Error in line ${lineNumber}: Expected end of Expression: ${code[0].join(\" \").trim()}.`;\n        }\n    }\n    return [code,tableOfLexemes, lineNumber];\n}\n\n// loop abstraction\nconst loop_abs = (code, tableOfLexemes, lineNumber) => {\n    let placeholder = code[0].shift(),error,end=false;\n    tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\n    if(code[0].length == 0){\n        return `Syntax Error in line ${lineNumber}: Missing Operands after ${placeholder}.`;\n    }\n    if(code[0][0] == \"\"){\n        // if there is exceeding whitespace in between the operation\n        return `Syntax Error in line ${lineNumber}: Exceeding whitespace.`;\n    }\n    // for the name of the loop with the YR before\n    if(code[0][0] == \"YR\"){\n        placeholder = code[0].shift();\n        tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\n        // identifier\n        error = identifier_abs(code,tableOfLexemes,lineNumber);\n        // check if error\n        if(!Array.isArray(error)) return error;\n        [code,tableOfLexemes, lineNumber] = error;\n        tableOfLexemes[tableOfLexemes.length-1].description = \"Loop Identifier\";\n        if(code[0].length == 0){\n            return `Syntax Error in line ${lineNumber}: Missing Operands after ${placeholder}.`;\n        }\n        if(code[0][0] == \"\"){\n            // if there is exceeding whitespace in between the operation\n            return `Syntax Error in line ${lineNumber}: Exceeding whitespace.`;\n        }\n        // increment or decrement with the UPPIN and the NERFIN\n        if(code[0][0] == \"UPPIN\" | code[0][0] == \"NERFIN\"){\n            placeholder = code[0].shift();\n            tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\n            if(code[0].length == 0){\n                return `Syntax Error in line ${lineNumber}: Missing Operands after ${placeholder}.`;\n            }\n            if(code[0][0] == \"\"){\n                // if there is exceeding whitespace in between the operation\n                return `Syntax Error in line ${lineNumber}: Exceeding whitespace.`;\n            }\n            // variable to be incremented with YR before\n            if(code[0][0] == \"YR\"){\n                placeholder = code[0].shift();\n                tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\n                // identifier\n                error = identifier_abs(code,tableOfLexemes,lineNumber);\n                // check if error\n                if(!Array.isArray(error)) return error;\n                [code,tableOfLexemes, lineNumber] = error;\n                // the conditionals in the loop\n                if(code[0][0] == \"TIL\" | code[0][0] == \"WILE\"){\n                    placeholder = code[0].shift();\n                    tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\n                    if(code[0].length == 0){\n                        return `Syntax Error in line ${lineNumber}: Missing Operands after ${placeholder}.`;\n                    }\n                    if(code[0][0] == \"\"){\n                        // if there is exceeding whitespace in between the operation\n                        return `Syntax Error in line ${lineNumber}: Exceeding whitespace.`;\n                    }\n                    // the condition\n                    //operands\n                    error = operands_abs(code,tableOfLexemes,lineNumber, true);\n                    // check if error\n                    if(!Array.isArray(error)) return error;\n                    [code,tableOfLexemes, lineNumber] = error;\n                    // body of the loop\n                    while(!end){\n                        if(code.length == 0){\n                            return `Syntax Error in line ${lineNumber-1}: Expected End of the Loop.`;\n                        }\n                        if(code[0].length == 0){\n                            // encounter new line\n                            code.shift();\n                            lineNumber++;\n                            tableOfLexemes.push({value:'\\n',description:'Line Break'});\n                            if(code.length != 0){\n                                code[0]=code[0].trim().split(\" \");\n                                error = yarn_token_abs(code,lineNumber);\n                                if(!Array.isArray(error)) return error;\n                                [code, lineNumber] = error;\n                            }\n                            continue;\n                        }else if(code[0][1] && [code[0][0],code[0][1]].join(\" \") == \"IM OUTTA\"){\n                            // loop code delimiter\n                            placeholder = [code[0].shift(),code[0].shift()].join(' ');\n                            tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\n                            if(code[0].length == 0){\n                                return `Syntax Error in line ${lineNumber}: Missing Operands after ${placeholder}.`;\n                            }\n                            if(code[0][0] == \"\"){\n                                // if there is exceeding whitespace in between the operation\n                                return `Syntax Error in line ${lineNumber}: Exceeding whitespace.`;\n                            }\n                            // name of the loop after the YR\n                            if(code[0][0] == \"YR\"){\n                                placeholder = code[0].shift();\n                                tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\n                                if(code[0].length == 0){\n                                    return `Syntax Error in line ${lineNumber}: Missing Operands after ${placeholder}.`;\n                                }\n                                if(code[0][0] == \"\"){\n                                    // if there is exceeding whitespace in between the operation\n                                    return `Syntax Error in line ${lineNumber}: Exceeding whitespace.`;\n                                }\n                                // identifier\n                                error = identifier_abs(code,tableOfLexemes,lineNumber);\n                                // check if error\n                                if(!Array.isArray(error)) return error;\n                                [code,tableOfLexemes, lineNumber] = error;\n                            }else{\n                                return `Syntax Error in line ${lineNumber}: Invalid Operation: ${code[0][0]}.`;\n                            }\n                            end = true\n                        }else{\n                            // body of the loop\n                            error = statement_abs(code,tableOfLexemes,lineNumber);\n                            if(!Array.isArray(error)) return error;\n                            [code,tableOfLexemes, lineNumber] = error;\n                        }\n                        if(code[0].join(\" \").trim().split(\" \")[0] == \"BTW\"){\n                            // inline comment\n                            [code,tableOfLexemes, lineNumber] = inline_comment_abs(code,tableOfLexemes,lineNumber);\n                        }else if(code[0].length != 0){\n                            // if there is operation after the identifier\n                            return `Syntax Error in line ${lineNumber}: Expected end of Expression: ${code[0].join(\" \").trim()}.`;\n                        }\n                    }\n                }else{\n                    return `Syntax Error in line ${lineNumber}: Invalid Operation: ${code[0][0]}.`;\n                }\n            }else{\n                return `Syntax Error in line ${lineNumber}: Invalid Operation: ${code[0][0]}.`;\n            }\n        }else{\n            return `Syntax Error in line ${lineNumber}: Invalid Operation: ${code[0][0]}.`;\n        }\n    }else{\n        return `Syntax Error in line ${lineNumber}: Invalid Operation: ${code[0][0]}.`;\n    }\n    return [code,tableOfLexemes, lineNumber];\n}\n\n// statement abstraction //optimized\nconst statement_abs = (code,tableOfLexemes,lineNumber) => {\n    let error,changed = true;\n    [code,tableOfLexemes, lineNumber, changed] = literal_abs(code,tableOfLexemes,lineNumber);\n    if(!changed){\n        error = expression_abs(code,tableOfLexemes,lineNumber, true);\n        // check if error\n        if(!Array.isArray(error)) return error;\n        [code,tableOfLexemes, lineNumber, changed] = error;\n    }\n    if(!changed){\n        changed = true;\n        if(code[0][0] == \"BTW\"){\n            error = inline_comment_abs(code,tableOfLexemes,lineNumber);\n        }else if(code[0][0] == \"OBTW\"){\n            error = multiline_comment_abs(code,tableOfLexemes,lineNumber);\n        }else if(code[0][0] == \"VISIBLE\"){\n            error = output_abs(code,tableOfLexemes,lineNumber);\n        }else if(code[0][0] == \"GIMMEH\"){\n            error = input_abs(code,tableOfLexemes,lineNumber);\n        }else if(code[0][1] && code[0][2] && keywords[[code[0][0],code[0][1],code[0][2]].join(\" \")] && (keywords[[code[0][0],code[0][1],code[0][2]].join(\" \")][0] == \"Declare Var\")){\n            code[0].unshift([code[0].shift(),code[0].shift(),code[0].shift()].join(\" \"));\n            error = declaration_var_abs(code,tableOfLexemes,lineNumber);\n        }else if(code[0].includes(\"R\")){\n            error = assignment_var_abs(code,tableOfLexemes,lineNumber);\n        }else if(code[0][1] && keywords[[code[0][0],code[0][1].slice(0,code[0][1].length-1)].join(\" \")] && (keywords[[code[0][0],code[0][1].slice(0,code[0][1].length-1)].join(\" \")][0] == \"If-Else\")){\n            code[0].unshift([code[0].shift(),code[0].shift()].join(\" \"));\n            error = if_else_abs(code,tableOfLexemes,lineNumber);\n        }else if(code[0][1] && keywords[[code[0][0],code[0][1]].join(\" \")] && (keywords[[code[0][0],code[0][1]].join(\" \")][0] == \"Loop\")){\n            code[0].unshift([code[0].shift(),code[0].shift()].join(\" \"));\n            error = loop_abs(code,tableOfLexemes,lineNumber);\n        }else if(code[0][0] == \"WTF?\"){\n            error = switch_case_abs(code,tableOfLexemes,lineNumber);\n        }else if(code[0][0] == \"MAEK\"){\n            error = typecast_expr_abs(code,tableOfLexemes,lineNumber);\n        }else if(code[0].join(' ').includes(\"IS NOW\")){\n            error = typecast_var_abs(code,tableOfLexemes,lineNumber);\n        }else if([\"TLDR\",\"OIC\"].includes(code[0][0])){\n            return `Syntax Error in line ${lineNumber}: Expected Starting Flow-Control Structure: ${code[0].join(\" \").trim()}.`;\n        }else{\n            changed = false;\n        }\n        if(changed){\n            // check if error\n            if(!Array.isArray(error)) return error;\n            [code,tableOfLexemes, lineNumber] = error;\n            if(code.length == 0){\n                return [code,tableOfLexemes, lineNumber];\n            }\n        }\n    }\n    if(!changed){\n        // identifier\n        error = identifier_abs(code,tableOfLexemes,lineNumber);\n        // check if error\n        if(!Array.isArray(error)) return error;\n        [code,tableOfLexemes, lineNumber] = error;            \n    }\n    if(code[0].length != 0){\n        if(code[0].join(\" \").trim().split(\" \")[0] == \"BTW\"){\n            code[0] = code[0].join(\" \").trim().split(\" \");\n            // inline comment\n            [code,tableOfLexemes, lineNumber] = inline_comment_abs(code,tableOfLexemes,lineNumber);\n        }else if(code[0].length != 0){\n            // if there is operation after the identifier\n            return `Syntax Error in line ${lineNumber}: Expected end of Expression: ${code[0].join(\" \").trim()}.`;\n        }\n    }\n    return [code,tableOfLexemes, lineNumber]; \n}\n\n// type casting of expression //optimized\nconst typecast_expr_abs = (code, tableOfLexemes, lineNumber) =>{\n    let placeholder = code[0].shift(),error;\n    tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\n    if(code[0].length == 0){\n        return `Syntax Error in line ${lineNumber}: Missing Operands after ${placeholder}.`;\n    }\n    if(code[0][0] == \"\"){\n        // if there is exceeding whitespace in between the operation\n        return `Syntax Error in line ${lineNumber}: Exceeding whitespace.`;\n    }\n    //operands\n    error = operands_abs(code,tableOfLexemes,lineNumber, true);\n    // check if error\n    if(!Array.isArray(error)) return error;\n    [code,tableOfLexemes, lineNumber] = error;\n    // typecasting to data type\n    if(code[0][0] == \"A\" ){\n        //type init\n        error = type_init_abs(code,tableOfLexemes,lineNumber);\n        // check if error\n        if(!Array.isArray(error)) return error;\n        [code,tableOfLexemes, lineNumber] = error;\n    }else{\n        return `Syntax Error in line ${lineNumber}: Missing Operands after ${tableOfLexemes[tableOfLexemes.length - 1].value}.`;\n    }\n    return [code,tableOfLexemes, lineNumber];\n}\n\n// type casting of var\nconst typecast_var_abs = (code,tableOfLexemes,lineNumber) => {\n    let placeholder;\n    // identifier\n    let error = identifier_abs(code,tableOfLexemes,lineNumber);\n    // check if error\n    if(!Array.isArray(error)) return error;\n    [code,tableOfLexemes, lineNumber] = error;\n    if(code[0][0] == \"\"){\n        // if there is exceeding whitespace in between the operation\n        return `Syntax Error in line ${lineNumber}: Exceeding whitespace.`;\n    }else if(code[0][1] && [code[0][0],code[0][1]].join(\" \") == \"IS NOW\"){\n        placeholder = [code[0].shift(),code[0].shift()].join(' ');\n        tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});  \n    }else{\n        // if inproper use of IS NOW\n        return `Syntax Error in line ${lineNumber}: Invalid Operation: ${code[0][0]}.`;\n    }\n    // typecasting to data type\n    if(code[0][0] == \"A\" ){\n        //type init\n        error = type_init_abs(code,tableOfLexemes,lineNumber);\n        // check if error\n        if(!Array.isArray(error)) return error;\n        [code,tableOfLexemes, lineNumber] = error;\n    }else{\n        return `Syntax Error in line ${lineNumber}: Missing Operands after ${tableOfLexemes[tableOfLexemes.length - 1].value}.`;\n    }\n    return [code,tableOfLexemes, lineNumber];\n}\n\n// type initialization abstraction //optimized\nconst type_init_abs = (code, tableOfLexemes,lineNumber) => {\n    let placeholder = code[0].shift();\n    tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\n    if(code[0].length == 0){\n        return `Syntax Error in line ${lineNumber}: Missing Operands after ${placeholder}.`;\n    }\n    if(code[0][0] == \"\"){\n        // if there is exceeding whitespace in between the operation\n        return `Syntax Error in line ${lineNumber}: Exceeding whitespace.`;\n    }\n    if(types[code[0][0]]){\n        // data types\n        placeholder = code[0].shift();\n        tableOfLexemes.push({value:placeholder,description:types[placeholder][1]});\n    }else{\n        return `Syntax Error in line ${lineNumber}: Expected Data Type`;\n    }\n    return [code,tableOfLexemes, lineNumber];\n}\n\n// yarn tokenizer and joiner abs\nconst yarn_token_abs = (code,lineNumber) => {\n    let index1,index2;\n    while(true){\n        index1 = code[0].findIndex((word)=>literal[\"YARN1\"][0].test(word));\n        if(index1 == -1) break;\n        index2 = code[0].findIndex((word,index)=>((literal[\"YARN2\"][0].test(word) || /(^[\\\"\\'][^\\\"\\']*[\\\"\\']\\!$)/.test(word)) && index != index1));\n        if(index2>-1){\n            code[0][index1] = code[0].slice(index1,index2+1).join(\" \");\n            code[0] = code[0].slice(0,index1+1).concat(code[0].slice(index2+1,code[0].length));\n        }else{\n            // if lacking closing \"\n            return `Syntax Error in line ${lineNumber}: Unexpected Sequence: ${code[0].slice(index1,code[0].length).join(\" \").trim()}.`;\n        }\n    }\n    return [code,lineNumber];\n}\n\n// start program \nconst program_abs = (code,tableOfLexemes,lineNumber) =>{\n    let start = false, end = false,placeholder,error;\n    code = code.split(\"\\n\");\n    while(code.length !=0 ){\n        if(!Array.isArray(code[0])){\n            // new line of code encountered\n            code[0] = code[0].trim().split(\" \");\n            // when there is no content in the line\n            if(code[0][0] == ''){\n                code[0].shift();\n                lineNumber++;\n                continue;\n            }\n            // yarn tokenizer\n            error = yarn_token_abs(code,lineNumber);\n            if(!Array.isArray(error)) return error;\n            [code, lineNumber] = error;\n            continue;\n        }else if(code[0].length == 0){\n            // if new line encountered\n            code.shift();\n            lineNumber++;\n            tableOfLexemes.push({value:'\\n',description:'Line Break'});\n            continue;\n        }\n        if(code[0].join(\" \").trim().split(\" \")[0] == \"BTW\"){\n            // inline comment\n            [code,tableOfLexemes, lineNumber] = inline_comment_abs(code,tableOfLexemes,lineNumber);\n            continue;\n        }else if((!start || (end && tableOfLexemes[tableOfLexemes.length-1].value == \"\\n\")) && code[0][0] == 'OBTW'){\n            // multiline comment\n            error = multiline_comment_abs(code,tableOfLexemes,lineNumber);\n            if(!Array.isArray(error)) return error;\n            [code,tableOfLexemes, lineNumber] = error;\n            continue;\n        }\n        if(!start && code[0][0] == \"HAI\"){\n            placeholder = code[0].shift();\n            tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\n            start = true;\n        }else if(start && code[0][0] == \"KTHXBYE\"){\n            placeholder = code[0].shift();\n            tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\n            end = true;\n        }else if(start && !end){\n            // main body of the program\n            error = statement_abs(code,tableOfLexemes,lineNumber);\n            if(!Array.isArray(error)) return error;\n            [code,tableOfLexemes, lineNumber] = error;\n        }else if(start && code[0].length != 0){\n            return `Syntax Error in line ${lineNumber}: Expected end of Expression: ${code[0].join(\" \").trim()}.`;\n        }else{\n            return `Syntax Error in line ${lineNumber}: Expected start of the program.`;\n        }\n    }\n    if(!end){\n        return `Syntax Error in line ${lineNumber}: Expected end of the program.`;\n    }\n    return [code,tableOfLexemes, lineNumber]; \n}\n\nexport default program_abs","/home/cj/Desktop/LOL CODE Project/LOLCODE_Project/src/gui components/lexemes.js",["199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215"],"exports.keywords = \n    {\n        \"HAI\":['Start','Code Delimiter Keyword'],\n        \"KTHXBYE\":['End','Code Delimiter Keyword'],\n        \"BTW\":['Comment','Line Comment Keyword'],\n        \"OBTW\":['Multi-Line Comment Start','Comment Delimiter Keyword'],\n        \"TLDR\":['Multi-Line Comment End','Comment Delimiter Keyword'],\n        \"I HAS A\":['Declare Var','Variable Declaration Keyword'],\n        \"ITZ\":['Initialize Var','Variable Initialization Keyword'],\n        \"R\":['Assigment Var','Variable Assignment Keyword'],\n        \"SUM OF\":['Arithmetic','Addition Operation Keyword'],\n        \"DIFF OF\":['Arithmetic','Subtraction Operation Keyword'],\n        \"PRODUKT OF\":['Arithmetic','Multiplication Operation Keyword'],\n        \"QUOSHUNT OF\":['Arithmetic','Division Operation Keyword'],\n        \"MOD OF\":['Arithmetic','Modulo Operation Keyword'],\n        \"BIGGR OF\":['Arithmetic','Max Operation Keyword'],\n        \"SMALLR OF\":['Arithmetic','Min Operation Keyword'],\n        \"BOTH OF\":['Boolean','AND Operation Keyword'],\n        \"EITHER OF\":['Boolean','OR Operation Keyword'],\n        \"WON OF\":['Boolean','XOR Operation Keyword'],\n        \"NOT\":['Boolean','NOT Operation Keyword'],\n        \"ANY OF\":['Boolean Many','OR Delimiter Operation Keyword'],\n        \"ALL OF\":['Boolean Many','AND Delimiter Operation Keyword'],\n        \"BOTH SAEM\":['Comparison','Equal Operation Keyword'],\n        \"DIFFRINT\":['Comparison','Not Equal Operation Keyword'],\n        \"SMOOSH\":['Concat','Concatenation Operation Keyword'],\n        \"MAEK\":['Declare Typecast','Type Casting Declaration Keyword'],\n        \"IS NOW\":['Initialize Typecast','Type Casting Initialization Keyword'],\n        \"A\":['Type Keyword','Type Keyword'],\n        \"VISIBLE\":['Output','Output Keyword'],\n        \"GIMMEH\":['Input','Input Keyword'],\n        \"O RLY\":['If-Else','If-Else Delimiter Keyword'],\n        \"YA RLY\":['If','If Keyword'],\n        \"MEBBE\":['Else-If','Else-If Keyword'],\n        \"NO WAI\":['Else','Else Keyword'],\n        \"OIC\":['Flow-Control End','Flow-Control Delimiter Keyword'],\n        \"WTF\":['Switch','Switch Case Delimiter Keyword'],\n        \"OMG\":['Switch Option','Case Keyword'],\n        \"OMGWTF\":['Switch Default','Case-Default Keyword'],\n        \"GTFO\":['Break','Break Keyword'],\n        \"IM IN\":['Loop','Loop Delimiter Keyword'],\n        \"YR\":['Loop Delimiter','Loop Parameter Delimiter Keyword'],\n        \"UPPIN\":['Loop Inc','Increment Keyword'],\n        \"NERFIN\":['Loop Dec','Decrement Keyword'],\n        \"TIL\":['Loop Cond','Loop Keyword'],\n        \"WILE\":['Loop Cond','Loop Keyword'],\n        \"IM OUTTA\":['Loop End','Loop Delimiter Keyword'],\n        \"AN\":['Conjunction','Operand Delimiter Keyword'],\n        \"NUMBR\":['Type','NUMBR Type Keyword'],\n        \"NUMBAR\":['Type','NUMBAR Type Keyword'],\n        \"YARN\":['Type','YARN Type Keyword'],\n        \"TROOF\":['Type','TROOF Type Keyword'],\n        \"MKAY\":['Boolean Many','Infinite Delimiter Keyword'],\n    }\n\n\nexports.literals = {\n    \"NUMBR\":[/(^\\-?[0-9]+$)/,'NUMBR Literal'],\n    \"NUMBAR\":[/(^\\-?[0-9]+\\.[0-9]+$)/,'NUMBAR Literal'],\n    \"YARN1\":[/(^[\\\"\\'][^\\\"\\']*$)/,'YARN Literal'],\n    \"YARN2\":[/(^[^\\\"\\']*[\\\"\\']$)/,'YARN Literal'],\n    \"YARN\":[/(^[\\\"\\'][^\\\"\\']*[\\\"\\']$)/,'YARN Literal'],\n    \"TROOF\":[/^((WIN)|(FAIL))$/,'TROOF Literal'],\n}\n\nexports.identifier = [/^([A-Za-z]+[0-9\\_]*)$/,'Identifier']\n\nexports.types = {\n    \"NUMBR\":['Type','NUMBR Type'],\n    \"NUMBAR\":['Type','NUMBAR Type'],\n    \"YARN\":['Type','YARN Type'],\n    \"TROOF\":['Type','TROOF Type'],\n    \"NOOB\" : ['Type','NOOB Type'],\n}\n\n",{"ruleId":"216","replacedBy":"217"},{"ruleId":"218","replacedBy":"219"},{"ruleId":"220","severity":1,"message":"221","line":9,"column":24,"nodeType":"222","messageId":"223","endLine":9,"endColumn":39},{"ruleId":"224","severity":1,"message":"225","line":9,"column":7,"nodeType":"226","endLine":9,"endColumn":9,"suggestions":"227"},{"ruleId":"224","severity":1,"message":"228","line":15,"column":7,"nodeType":"226","endLine":15,"endColumn":22,"suggestions":"229"},{"ruleId":"220","severity":1,"message":"230","line":2,"column":7,"nodeType":"222","messageId":"223","endLine":2,"endColumn":9},{"ruleId":"231","severity":1,"message":"232","line":13,"column":23,"nodeType":"233","messageId":"234","endLine":13,"endColumn":25},{"ruleId":"231","severity":1,"message":"232","line":28,"column":24,"nodeType":"233","messageId":"234","endLine":28,"endColumn":26},{"ruleId":"231","severity":1,"message":"235","line":34,"column":24,"nodeType":"233","messageId":"234","endLine":34,"endColumn":26},{"ruleId":"231","severity":1,"message":"232","line":40,"column":18,"nodeType":"233","messageId":"234","endLine":40,"endColumn":20},{"ruleId":"231","severity":1,"message":"235","line":106,"column":58,"nodeType":"233","messageId":"234","endLine":106,"endColumn":60},{"ruleId":"231","severity":1,"message":"235","line":106,"column":114,"nodeType":"233","messageId":"234","endLine":106,"endColumn":116},{"ruleId":"231","severity":1,"message":"235","line":106,"column":141,"nodeType":"233","messageId":"234","endLine":106,"endColumn":143},{"ruleId":"231","severity":1,"message":"235","line":108,"column":57,"nodeType":"233","messageId":"234","endLine":108,"endColumn":59},{"ruleId":"231","severity":1,"message":"235","line":108,"column":84,"nodeType":"233","messageId":"234","endLine":108,"endColumn":86},{"ruleId":"231","severity":1,"message":"235","line":110,"column":57,"nodeType":"233","messageId":"234","endLine":110,"endColumn":59},{"ruleId":"231","severity":1,"message":"235","line":116,"column":64,"nodeType":"233","messageId":"234","endLine":116,"endColumn":66},{"ruleId":"231","severity":1,"message":"232","line":116,"column":86,"nodeType":"233","messageId":"234","endLine":116,"endColumn":88},{"ruleId":"231","severity":1,"message":"235","line":119,"column":29,"nodeType":"233","messageId":"234","endLine":119,"endColumn":31},{"ruleId":"231","severity":1,"message":"235","line":124,"column":44,"nodeType":"233","messageId":"234","endLine":124,"endColumn":46},{"ruleId":"231","severity":1,"message":"235","line":134,"column":22,"nodeType":"233","messageId":"234","endLine":134,"endColumn":24},{"ruleId":"231","severity":1,"message":"235","line":145,"column":23,"nodeType":"233","messageId":"234","endLine":145,"endColumn":25},{"ruleId":"231","severity":1,"message":"235","line":148,"column":19,"nodeType":"233","messageId":"234","endLine":148,"endColumn":21},{"ruleId":"231","severity":1,"message":"235","line":164,"column":23,"nodeType":"233","messageId":"234","endLine":164,"endColumn":25},{"ruleId":"231","severity":1,"message":"235","line":167,"column":19,"nodeType":"233","messageId":"234","endLine":167,"endColumn":21},{"ruleId":"231","severity":1,"message":"235","line":171,"column":19,"nodeType":"233","messageId":"234","endLine":171,"endColumn":21},{"ruleId":"231","severity":1,"message":"235","line":191,"column":23,"nodeType":"233","messageId":"234","endLine":191,"endColumn":25},{"ruleId":"231","severity":1,"message":"235","line":194,"column":19,"nodeType":"233","messageId":"234","endLine":194,"endColumn":21},{"ruleId":"231","severity":1,"message":"235","line":205,"column":54,"nodeType":"233","messageId":"234","endLine":205,"endColumn":56},{"ruleId":"231","severity":1,"message":"235","line":209,"column":19,"nodeType":"233","messageId":"234","endLine":209,"endColumn":21},{"ruleId":"231","severity":1,"message":"235","line":213,"column":19,"nodeType":"233","messageId":"234","endLine":213,"endColumn":21},{"ruleId":"231","severity":1,"message":"235","line":231,"column":19,"nodeType":"233","messageId":"234","endLine":231,"endColumn":21},{"ruleId":"231","severity":1,"message":"235","line":234,"column":25,"nodeType":"233","messageId":"234","endLine":234,"endColumn":27},{"ruleId":"231","severity":1,"message":"235","line":241,"column":23,"nodeType":"233","messageId":"234","endLine":241,"endColumn":25},{"ruleId":"231","severity":1,"message":"235","line":244,"column":19,"nodeType":"233","messageId":"234","endLine":244,"endColumn":21},{"ruleId":"231","severity":1,"message":"235","line":248,"column":19,"nodeType":"233","messageId":"234","endLine":248,"endColumn":21},{"ruleId":"231","severity":1,"message":"235","line":270,"column":27,"nodeType":"233","messageId":"234","endLine":270,"endColumn":29},{"ruleId":"231","severity":1,"message":"235","line":273,"column":23,"nodeType":"233","messageId":"234","endLine":273,"endColumn":25},{"ruleId":"231","severity":1,"message":"232","line":277,"column":14,"nodeType":"233","messageId":"234","endLine":277,"endColumn":16},{"ruleId":"231","severity":1,"message":"235","line":283,"column":29,"nodeType":"233","messageId":"234","endLine":283,"endColumn":31},{"ruleId":"231","severity":1,"message":"235","line":297,"column":116,"nodeType":"233","messageId":"234","endLine":297,"endColumn":118},{"ruleId":"231","severity":1,"message":"235","line":302,"column":25,"nodeType":"233","messageId":"234","endLine":302,"endColumn":27},{"ruleId":"231","severity":1,"message":"235","line":306,"column":130,"nodeType":"233","messageId":"234","endLine":306,"endColumn":132},{"ruleId":"231","severity":1,"message":"235","line":311,"column":62,"nodeType":"233","messageId":"234","endLine":311,"endColumn":64},{"ruleId":"231","severity":1,"message":"235","line":315,"column":24,"nodeType":"233","messageId":"234","endLine":315,"endColumn":26},{"ruleId":"231","severity":1,"message":"235","line":315,"column":84,"nodeType":"233","messageId":"234","endLine":315,"endColumn":86},{"ruleId":"231","severity":1,"message":"235","line":333,"column":56,"nodeType":"233","messageId":"234","endLine":333,"endColumn":58},{"ruleId":"231","severity":1,"message":"235","line":334,"column":27,"nodeType":"233","messageId":"234","endLine":334,"endColumn":29},{"ruleId":"231","severity":1,"message":"235","line":337,"column":23,"nodeType":"233","messageId":"234","endLine":337,"endColumn":25},{"ruleId":"231","severity":1,"message":"235","line":348,"column":31,"nodeType":"233","messageId":"234","endLine":348,"endColumn":33},{"ruleId":"231","severity":1,"message":"235","line":351,"column":27,"nodeType":"233","messageId":"234","endLine":351,"endColumn":29},{"ruleId":"231","severity":1,"message":"232","line":355,"column":18,"nodeType":"233","messageId":"234","endLine":355,"endColumn":20},{"ruleId":"231","severity":1,"message":"235","line":361,"column":33,"nodeType":"233","messageId":"234","endLine":361,"endColumn":35},{"ruleId":"231","severity":1,"message":"232","line":377,"column":57,"nodeType":"233","messageId":"234","endLine":377,"endColumn":59},{"ruleId":"231","severity":1,"message":"235","line":378,"column":27,"nodeType":"233","messageId":"234","endLine":378,"endColumn":29},{"ruleId":"231","severity":1,"message":"235","line":381,"column":23,"nodeType":"233","messageId":"234","endLine":381,"endColumn":25},{"ruleId":"231","severity":1,"message":"235","line":392,"column":29,"nodeType":"233","messageId":"234","endLine":392,"endColumn":31},{"ruleId":"231","severity":1,"message":"235","line":395,"column":39,"nodeType":"233","messageId":"234","endLine":395,"endColumn":41},{"ruleId":"231","severity":1,"message":"235","line":410,"column":27,"nodeType":"233","messageId":"234","endLine":410,"endColumn":29},{"ruleId":"231","severity":1,"message":"235","line":413,"column":23,"nodeType":"233","messageId":"234","endLine":413,"endColumn":25},{"ruleId":"231","severity":1,"message":"232","line":417,"column":14,"nodeType":"233","messageId":"234","endLine":417,"endColumn":16},{"ruleId":"231","severity":1,"message":"235","line":423,"column":29,"nodeType":"233","messageId":"234","endLine":423,"endColumn":31},{"ruleId":"231","severity":1,"message":"235","line":437,"column":117,"nodeType":"233","messageId":"234","endLine":437,"endColumn":119},{"ruleId":"231","severity":1,"message":"235","line":444,"column":62,"nodeType":"233","messageId":"234","endLine":444,"endColumn":64},{"ruleId":"231","severity":1,"message":"232","line":464,"column":57,"nodeType":"233","messageId":"234","endLine":464,"endColumn":59},{"ruleId":"231","severity":1,"message":"235","line":465,"column":27,"nodeType":"233","messageId":"234","endLine":465,"endColumn":29},{"ruleId":"231","severity":1,"message":"235","line":469,"column":62,"nodeType":"233","messageId":"234","endLine":469,"endColumn":64},{"ruleId":"231","severity":1,"message":"232","line":471,"column":76,"nodeType":"233","messageId":"234","endLine":471,"endColumn":78},{"ruleId":"231","severity":1,"message":"235","line":471,"column":126,"nodeType":"233","messageId":"234","endLine":471,"endColumn":128},{"ruleId":"231","severity":1,"message":"235","line":474,"column":23,"nodeType":"233","messageId":"234","endLine":474,"endColumn":25},{"ruleId":"231","severity":1,"message":"235","line":485,"column":29,"nodeType":"233","messageId":"234","endLine":485,"endColumn":31},{"ruleId":"231","severity":1,"message":"235","line":489,"column":27,"nodeType":"233","messageId":"234","endLine":489,"endColumn":29},{"ruleId":"231","severity":1,"message":"235","line":510,"column":24,"nodeType":"233","messageId":"234","endLine":510,"endColumn":26},{"ruleId":"231","severity":1,"message":"235","line":513,"column":27,"nodeType":"233","messageId":"234","endLine":513,"endColumn":29},{"ruleId":"231","severity":1,"message":"232","line":518,"column":28,"nodeType":"233","messageId":"234","endLine":518,"endColumn":30},{"ruleId":"231","severity":1,"message":"235","line":525,"column":67,"nodeType":"233","messageId":"234","endLine":525,"endColumn":69},{"ruleId":"231","severity":1,"message":"235","line":529,"column":29,"nodeType":"233","messageId":"234","endLine":529,"endColumn":31},{"ruleId":"231","severity":1,"message":"235","line":532,"column":31,"nodeType":"233","messageId":"234","endLine":532,"endColumn":33},{"ruleId":"231","severity":1,"message":"235","line":535,"column":27,"nodeType":"233","messageId":"234","endLine":535,"endColumn":29},{"ruleId":"231","severity":1,"message":"235","line":544,"column":66,"nodeType":"233","messageId":"234","endLine":544,"endColumn":68},{"ruleId":"231","severity":1,"message":"235","line":548,"column":29,"nodeType":"233","messageId":"234","endLine":548,"endColumn":31},{"ruleId":"231","severity":1,"message":"235","line":557,"column":51,"nodeType":"233","messageId":"234","endLine":557,"endColumn":53},{"ruleId":"231","severity":1,"message":"235","line":560,"column":66,"nodeType":"233","messageId":"234","endLine":560,"endColumn":68},{"ruleId":"231","severity":1,"message":"235","line":560,"column":88,"nodeType":"233","messageId":"234","endLine":560,"endColumn":90},{"ruleId":"231","severity":1,"message":"232","line":565,"column":33,"nodeType":"233","messageId":"234","endLine":565,"endColumn":35},{"ruleId":"231","severity":1,"message":"232","line":568,"column":33,"nodeType":"233","messageId":"234","endLine":568,"endColumn":35},{"ruleId":"231","severity":1,"message":"235","line":583,"column":24,"nodeType":"233","messageId":"234","endLine":583,"endColumn":26},{"ruleId":"231","severity":1,"message":"235","line":586,"column":27,"nodeType":"233","messageId":"234","endLine":586,"endColumn":29},{"ruleId":"231","severity":1,"message":"232","line":591,"column":28,"nodeType":"233","messageId":"234","endLine":591,"endColumn":30},{"ruleId":"231","severity":1,"message":"235","line":598,"column":29,"nodeType":"233","messageId":"234","endLine":598,"endColumn":31},{"ruleId":"231","severity":1,"message":"235","line":601,"column":31,"nodeType":"233","messageId":"234","endLine":601,"endColumn":33},{"ruleId":"231","severity":1,"message":"235","line":604,"column":27,"nodeType":"233","messageId":"234","endLine":604,"endColumn":29},{"ruleId":"231","severity":1,"message":"235","line":614,"column":29,"nodeType":"233","messageId":"234","endLine":614,"endColumn":31},{"ruleId":"231","severity":1,"message":"235","line":618,"column":29,"nodeType":"233","messageId":"234","endLine":618,"endColumn":31},{"ruleId":"231","severity":1,"message":"235","line":622,"column":29,"nodeType":"233","messageId":"234","endLine":622,"endColumn":31},{"ruleId":"231","severity":1,"message":"235","line":630,"column":51,"nodeType":"233","messageId":"234","endLine":630,"endColumn":53},{"ruleId":"231","severity":1,"message":"235","line":633,"column":66,"nodeType":"233","messageId":"234","endLine":633,"endColumn":68},{"ruleId":"231","severity":1,"message":"235","line":633,"column":88,"nodeType":"233","messageId":"234","endLine":633,"endColumn":90},{"ruleId":"231","severity":1,"message":"232","line":637,"column":33,"nodeType":"233","messageId":"234","endLine":637,"endColumn":35},{"ruleId":"231","severity":1,"message":"232","line":639,"column":33,"nodeType":"233","messageId":"234","endLine":639,"endColumn":35},{"ruleId":"231","severity":1,"message":"235","line":651,"column":23,"nodeType":"233","messageId":"234","endLine":651,"endColumn":25},{"ruleId":"231","severity":1,"message":"235","line":654,"column":19,"nodeType":"233","messageId":"234","endLine":654,"endColumn":21},{"ruleId":"231","severity":1,"message":"235","line":659,"column":19,"nodeType":"233","messageId":"234","endLine":659,"endColumn":21},{"ruleId":"231","severity":1,"message":"235","line":668,"column":27,"nodeType":"233","messageId":"234","endLine":668,"endColumn":29},{"ruleId":"231","severity":1,"message":"235","line":671,"column":23,"nodeType":"233","messageId":"234","endLine":671,"endColumn":25},{"ruleId":"231","severity":1,"message":"235","line":676,"column":23,"nodeType":"233","messageId":"234","endLine":676,"endColumn":25},{"ruleId":"231","severity":1,"message":"235","line":676,"column":47,"nodeType":"233","messageId":"234","endLine":676,"endColumn":49},{"ruleId":"231","severity":1,"message":"235","line":679,"column":31,"nodeType":"233","messageId":"234","endLine":679,"endColumn":33},{"ruleId":"231","severity":1,"message":"235","line":682,"column":27,"nodeType":"233","messageId":"234","endLine":682,"endColumn":29},{"ruleId":"231","severity":1,"message":"235","line":687,"column":27,"nodeType":"233","messageId":"234","endLine":687,"endColumn":29},{"ruleId":"231","severity":1,"message":"235","line":696,"column":31,"nodeType":"233","messageId":"234","endLine":696,"endColumn":33},{"ruleId":"231","severity":1,"message":"235","line":696,"column":53,"nodeType":"233","messageId":"234","endLine":696,"endColumn":55},{"ruleId":"231","severity":1,"message":"235","line":699,"column":39,"nodeType":"233","messageId":"234","endLine":699,"endColumn":41},{"ruleId":"231","severity":1,"message":"235","line":702,"column":35,"nodeType":"233","messageId":"234","endLine":702,"endColumn":37},{"ruleId":"231","severity":1,"message":"235","line":714,"column":40,"nodeType":"233","messageId":"234","endLine":714,"endColumn":42},{"ruleId":"231","severity":1,"message":"235","line":717,"column":43,"nodeType":"233","messageId":"234","endLine":717,"endColumn":45},{"ruleId":"231","severity":1,"message":"232","line":722,"column":44,"nodeType":"233","messageId":"234","endLine":722,"endColumn":46},{"ruleId":"231","severity":1,"message":"235","line":729,"column":82,"nodeType":"233","messageId":"234","endLine":729,"endColumn":84},{"ruleId":"231","severity":1,"message":"235","line":733,"column":47,"nodeType":"233","messageId":"234","endLine":733,"endColumn":49},{"ruleId":"231","severity":1,"message":"235","line":736,"column":43,"nodeType":"233","messageId":"234","endLine":736,"endColumn":45},{"ruleId":"231","severity":1,"message":"235","line":741,"column":43,"nodeType":"233","messageId":"234","endLine":741,"endColumn":45},{"ruleId":"231","severity":1,"message":"235","line":744,"column":51,"nodeType":"233","messageId":"234","endLine":744,"endColumn":53},{"ruleId":"231","severity":1,"message":"235","line":747,"column":47,"nodeType":"233","messageId":"234","endLine":747,"endColumn":49},{"ruleId":"231","severity":1,"message":"235","line":766,"column":67,"nodeType":"233","messageId":"234","endLine":766,"endColumn":69},{"ruleId":"231","severity":1,"message":"232","line":769,"column":49,"nodeType":"233","messageId":"234","endLine":769,"endColumn":51},{"ruleId":"231","severity":1,"message":"235","line":801,"column":23,"nodeType":"233","messageId":"234","endLine":801,"endColumn":25},{"ruleId":"231","severity":1,"message":"235","line":803,"column":29,"nodeType":"233","messageId":"234","endLine":803,"endColumn":31},{"ruleId":"231","severity":1,"message":"235","line":805,"column":29,"nodeType":"233","messageId":"234","endLine":805,"endColumn":31},{"ruleId":"231","severity":1,"message":"235","line":807,"column":29,"nodeType":"233","messageId":"234","endLine":807,"endColumn":31},{"ruleId":"231","severity":1,"message":"235","line":809,"column":163,"nodeType":"233","messageId":"234","endLine":809,"endColumn":165},{"ruleId":"231","severity":1,"message":"235","line":814,"column":185,"nodeType":"233","messageId":"234","endLine":814,"endColumn":187},{"ruleId":"231","severity":1,"message":"235","line":817,"column":127,"nodeType":"233","messageId":"234","endLine":817,"endColumn":129},{"ruleId":"231","severity":1,"message":"235","line":820,"column":29,"nodeType":"233","messageId":"234","endLine":820,"endColumn":31},{"ruleId":"231","severity":1,"message":"235","line":822,"column":29,"nodeType":"233","messageId":"234","endLine":822,"endColumn":31},{"ruleId":"231","severity":1,"message":"235","line":835,"column":28,"nodeType":"233","messageId":"234","endLine":835,"endColumn":30},{"ruleId":"231","severity":1,"message":"232","line":847,"column":23,"nodeType":"233","messageId":"234","endLine":847,"endColumn":25},{"ruleId":"231","severity":1,"message":"235","line":848,"column":51,"nodeType":"233","messageId":"234","endLine":848,"endColumn":53},{"ruleId":"231","severity":1,"message":"232","line":852,"column":33,"nodeType":"233","messageId":"234","endLine":852,"endColumn":35},{"ruleId":"231","severity":1,"message":"235","line":864,"column":23,"nodeType":"233","messageId":"234","endLine":864,"endColumn":25},{"ruleId":"231","severity":1,"message":"235","line":867,"column":19,"nodeType":"233","messageId":"234","endLine":867,"endColumn":21},{"ruleId":"231","severity":1,"message":"235","line":877,"column":19,"nodeType":"233","messageId":"234","endLine":877,"endColumn":21},{"ruleId":"231","severity":1,"message":"235","line":897,"column":19,"nodeType":"233","messageId":"234","endLine":897,"endColumn":21},{"ruleId":"231","severity":1,"message":"235","line":900,"column":62,"nodeType":"233","messageId":"234","endLine":900,"endColumn":64},{"ruleId":"231","severity":1,"message":"235","line":908,"column":19,"nodeType":"233","messageId":"234","endLine":908,"endColumn":21},{"ruleId":"231","severity":1,"message":"235","line":924,"column":23,"nodeType":"233","messageId":"234","endLine":924,"endColumn":25},{"ruleId":"231","severity":1,"message":"235","line":927,"column":19,"nodeType":"233","messageId":"234","endLine":927,"endColumn":21},{"ruleId":"231","severity":1,"message":"235","line":946,"column":19,"nodeType":"233","messageId":"234","endLine":946,"endColumn":21},{"ruleId":"236","severity":1,"message":"237","line":947,"column":36,"nodeType":"238","messageId":"239","endLine":947,"endColumn":146},{"ruleId":"240","severity":1,"message":"241","line":947,"column":90,"nodeType":"242","messageId":"243","endLine":947,"endColumn":91,"suggestions":"244"},{"ruleId":"240","severity":1,"message":"245","line":947,"column":92,"nodeType":"242","messageId":"243","endLine":947,"endColumn":93,"suggestions":"246"},{"ruleId":"240","severity":1,"message":"241","line":947,"column":97,"nodeType":"242","messageId":"243","endLine":947,"endColumn":98,"suggestions":"247"},{"ruleId":"240","severity":1,"message":"245","line":947,"column":99,"nodeType":"242","messageId":"243","endLine":947,"endColumn":100,"suggestions":"248"},{"ruleId":"240","severity":1,"message":"241","line":947,"column":104,"nodeType":"242","messageId":"243","endLine":947,"endColumn":105,"suggestions":"249"},{"ruleId":"240","severity":1,"message":"245","line":947,"column":106,"nodeType":"242","messageId":"243","endLine":947,"endColumn":107,"suggestions":"250"},{"ruleId":"240","severity":1,"message":"251","line":947,"column":109,"nodeType":"242","messageId":"243","endLine":947,"endColumn":110,"suggestions":"252"},{"ruleId":"231","severity":1,"message":"232","line":947,"column":136,"nodeType":"233","messageId":"234","endLine":947,"endColumn":138},{"ruleId":"231","severity":1,"message":"232","line":963,"column":23,"nodeType":"233","messageId":"234","endLine":963,"endColumn":25},{"ruleId":"231","severity":1,"message":"235","line":968,"column":27,"nodeType":"233","messageId":"234","endLine":968,"endColumn":29},{"ruleId":"231","severity":1,"message":"235","line":978,"column":33,"nodeType":"233","messageId":"234","endLine":978,"endColumn":35},{"ruleId":"231","severity":1,"message":"235","line":985,"column":51,"nodeType":"233","messageId":"234","endLine":985,"endColumn":53},{"ruleId":"231","severity":1,"message":"235","line":989,"column":83,"nodeType":"233","messageId":"234","endLine":989,"endColumn":85},{"ruleId":"231","severity":1,"message":"235","line":989,"column":107,"nodeType":"233","messageId":"234","endLine":989,"endColumn":109},{"ruleId":"231","severity":1,"message":"235","line":996,"column":33,"nodeType":"233","messageId":"234","endLine":996,"endColumn":35},{"ruleId":"231","severity":1,"message":"235","line":1000,"column":38,"nodeType":"233","messageId":"234","endLine":1000,"endColumn":40},{"ruleId":"231","severity":1,"message":"232","line":1009,"column":42,"nodeType":"233","messageId":"234","endLine":1009,"endColumn":44},{"ruleId":"240","severity":1,"message":"253","line":58,"column":17,"nodeType":"242","messageId":"243","endLine":58,"endColumn":18,"suggestions":"254"},{"ruleId":"240","severity":1,"message":"253","line":59,"column":18,"nodeType":"242","messageId":"243","endLine":59,"endColumn":19,"suggestions":"255"},{"ruleId":"240","severity":1,"message":"241","line":60,"column":18,"nodeType":"242","messageId":"243","endLine":60,"endColumn":19,"suggestions":"256"},{"ruleId":"240","severity":1,"message":"245","line":60,"column":20,"nodeType":"242","messageId":"243","endLine":60,"endColumn":21,"suggestions":"257"},{"ruleId":"240","severity":1,"message":"241","line":60,"column":25,"nodeType":"242","messageId":"243","endLine":60,"endColumn":26,"suggestions":"258"},{"ruleId":"240","severity":1,"message":"245","line":60,"column":27,"nodeType":"242","messageId":"243","endLine":60,"endColumn":28,"suggestions":"259"},{"ruleId":"240","severity":1,"message":"241","line":61,"column":19,"nodeType":"242","messageId":"243","endLine":61,"endColumn":20,"suggestions":"260"},{"ruleId":"240","severity":1,"message":"245","line":61,"column":21,"nodeType":"242","messageId":"243","endLine":61,"endColumn":22,"suggestions":"261"},{"ruleId":"240","severity":1,"message":"241","line":61,"column":26,"nodeType":"242","messageId":"243","endLine":61,"endColumn":27,"suggestions":"262"},{"ruleId":"240","severity":1,"message":"245","line":61,"column":28,"nodeType":"242","messageId":"243","endLine":61,"endColumn":29,"suggestions":"263"},{"ruleId":"240","severity":1,"message":"241","line":62,"column":17,"nodeType":"242","messageId":"243","endLine":62,"endColumn":18,"suggestions":"264"},{"ruleId":"240","severity":1,"message":"245","line":62,"column":19,"nodeType":"242","messageId":"243","endLine":62,"endColumn":20,"suggestions":"265"},{"ruleId":"240","severity":1,"message":"241","line":62,"column":24,"nodeType":"242","messageId":"243","endLine":62,"endColumn":25,"suggestions":"266"},{"ruleId":"240","severity":1,"message":"245","line":62,"column":26,"nodeType":"242","messageId":"243","endLine":62,"endColumn":27,"suggestions":"267"},{"ruleId":"240","severity":1,"message":"241","line":62,"column":31,"nodeType":"242","messageId":"243","endLine":62,"endColumn":32,"suggestions":"268"},{"ruleId":"240","severity":1,"message":"245","line":62,"column":33,"nodeType":"242","messageId":"243","endLine":62,"endColumn":34,"suggestions":"269"},{"ruleId":"240","severity":1,"message":"270","line":66,"column":39,"nodeType":"242","messageId":"243","endLine":66,"endColumn":40,"suggestions":"271"},"no-native-reassign",["272"],"no-negated-in-lhs",["273"],"no-unused-vars","'setFileProperty' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'parsed'. Either include it or remove the dependency array.","ArrayExpression",["274"],"React Hook useEffect has missing dependencies: 'parsed' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["275"],"'fs' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'index1'.","ArrowFunctionExpression","unsafeRefs","no-useless-escape","Unnecessary escape character: \\\".","Literal","unnecessaryEscape",["276","277"],"Unnecessary escape character: \\'.",["278","279"],["280","281"],["282","283"],["284","285"],["286","287"],"Unnecessary escape character: \\!.",["288","289"],"Unnecessary escape character: \\-.",["290","291"],["292","293"],["294","295"],["296","297"],["298","299"],["300","301"],["302","303"],["304","305"],["306","307"],["308","309"],["310","311"],["312","313"],["314","315"],["316","317"],["318","319"],["320","321"],"Unnecessary escape character: \\_.",["322","323"],"no-global-assign","no-unsafe-negation",{"desc":"324","fix":"325"},{"desc":"326","fix":"327"},{"messageId":"328","fix":"329","desc":"330"},{"messageId":"331","fix":"332","desc":"333"},{"messageId":"328","fix":"334","desc":"330"},{"messageId":"331","fix":"335","desc":"333"},{"messageId":"328","fix":"336","desc":"330"},{"messageId":"331","fix":"337","desc":"333"},{"messageId":"328","fix":"338","desc":"330"},{"messageId":"331","fix":"339","desc":"333"},{"messageId":"328","fix":"340","desc":"330"},{"messageId":"331","fix":"341","desc":"333"},{"messageId":"328","fix":"342","desc":"330"},{"messageId":"331","fix":"343","desc":"333"},{"messageId":"328","fix":"344","desc":"330"},{"messageId":"331","fix":"345","desc":"333"},{"messageId":"328","fix":"346","desc":"330"},{"messageId":"331","fix":"347","desc":"333"},{"messageId":"328","fix":"348","desc":"330"},{"messageId":"331","fix":"349","desc":"333"},{"messageId":"328","fix":"350","desc":"330"},{"messageId":"331","fix":"351","desc":"333"},{"messageId":"328","fix":"352","desc":"330"},{"messageId":"331","fix":"353","desc":"333"},{"messageId":"328","fix":"354","desc":"330"},{"messageId":"331","fix":"355","desc":"333"},{"messageId":"328","fix":"356","desc":"330"},{"messageId":"331","fix":"357","desc":"333"},{"messageId":"328","fix":"358","desc":"330"},{"messageId":"331","fix":"359","desc":"333"},{"messageId":"328","fix":"360","desc":"330"},{"messageId":"331","fix":"361","desc":"333"},{"messageId":"328","fix":"362","desc":"330"},{"messageId":"331","fix":"363","desc":"333"},{"messageId":"328","fix":"364","desc":"330"},{"messageId":"331","fix":"365","desc":"333"},{"messageId":"328","fix":"366","desc":"330"},{"messageId":"331","fix":"367","desc":"333"},{"messageId":"328","fix":"368","desc":"330"},{"messageId":"331","fix":"369","desc":"333"},{"messageId":"328","fix":"370","desc":"330"},{"messageId":"331","fix":"371","desc":"333"},{"messageId":"328","fix":"372","desc":"330"},{"messageId":"331","fix":"373","desc":"333"},{"messageId":"328","fix":"374","desc":"330"},{"messageId":"331","fix":"375","desc":"333"},{"messageId":"328","fix":"376","desc":"330"},{"messageId":"331","fix":"377","desc":"333"},{"messageId":"328","fix":"378","desc":"330"},{"messageId":"331","fix":"379","desc":"333"},"Update the dependencies array to be: [parsed]",{"range":"380","text":"381"},"Update the dependencies array to be: [parsed, props, props.lolText]",{"range":"382","text":"383"},"removeEscape",{"range":"384","text":"385"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"386","text":"387"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"388","text":"385"},{"range":"389","text":"387"},{"range":"390","text":"385"},{"range":"391","text":"387"},{"range":"392","text":"385"},{"range":"393","text":"387"},{"range":"394","text":"385"},{"range":"395","text":"387"},{"range":"396","text":"385"},{"range":"397","text":"387"},{"range":"398","text":"385"},{"range":"399","text":"387"},{"range":"400","text":"385"},{"range":"401","text":"387"},{"range":"402","text":"385"},{"range":"403","text":"387"},{"range":"404","text":"385"},{"range":"405","text":"387"},{"range":"406","text":"385"},{"range":"407","text":"387"},{"range":"408","text":"385"},{"range":"409","text":"387"},{"range":"410","text":"385"},{"range":"411","text":"387"},{"range":"412","text":"385"},{"range":"413","text":"387"},{"range":"414","text":"385"},{"range":"415","text":"387"},{"range":"416","text":"385"},{"range":"417","text":"387"},{"range":"418","text":"385"},{"range":"419","text":"387"},{"range":"420","text":"385"},{"range":"421","text":"387"},{"range":"422","text":"385"},{"range":"423","text":"387"},{"range":"424","text":"385"},{"range":"425","text":"387"},{"range":"426","text":"385"},{"range":"427","text":"387"},{"range":"428","text":"385"},{"range":"429","text":"387"},{"range":"430","text":"385"},{"range":"431","text":"387"},{"range":"432","text":"385"},{"range":"433","text":"387"},[222,224],"[parsed]",[376,391],"[parsed, props, props.lolText]",[45112,45113],"",[45112,45112],"\\",[45114,45115],[45114,45114],[45119,45120],[45119,45119],[45121,45122],[45121,45121],[45126,45127],[45126,45126],[45128,45129],[45128,45128],[45131,45132],[45131,45131],[2975,2976],[2975,2975],[3023,3024],[3023,3023],[3080,3081],[3080,3080],[3082,3083],[3082,3082],[3087,3088],[3087,3087],[3089,3090],[3089,3089],[3132,3133],[3132,3132],[3134,3135],[3134,3134],[3139,3140],[3139,3139],[3141,3142],[3141,3141],[3181,3182],[3181,3181],[3183,3184],[3183,3183],[3188,3189],[3188,3188],[3190,3191],[3190,3190],[3195,3196],[3195,3195],[3197,3198],[3197,3197],[3312,3313],[3312,3312]]
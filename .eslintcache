[{"C:\\Users\\cjpri\\Desktop\\124 project my branch\\LOLCODE_Project\\src\\index.js":"1","C:\\Users\\cjpri\\Desktop\\124 project my branch\\LOLCODE_Project\\src\\reportWebVitals.js":"2","C:\\Users\\cjpri\\Desktop\\124 project my branch\\LOLCODE_Project\\src\\App.js":"3","C:\\Users\\cjpri\\Desktop\\124 project my branch\\LOLCODE_Project\\src\\gui components\\parser.js":"4","C:\\Users\\cjpri\\Desktop\\124 project my branch\\LOLCODE_Project\\src\\gui components\\firstFrame.js":"5","C:\\Users\\cjpri\\Desktop\\124 project my branch\\LOLCODE_Project\\src\\gui components\\semantics.js":"6","C:\\Users\\cjpri\\Desktop\\124 project my branch\\LOLCODE_Project\\src\\gui components\\fourthFrame.js":"7","C:\\Users\\cjpri\\Desktop\\124 project my branch\\LOLCODE_Project\\src\\gui components\\secondFrame.js":"8","C:\\Users\\cjpri\\Desktop\\124 project my branch\\LOLCODE_Project\\src\\gui components\\fifthFrame.js":"9","C:\\Users\\cjpri\\Desktop\\124 project my branch\\LOLCODE_Project\\src\\gui components\\lexemes.js":"10","C:\\Users\\cjpri\\Desktop\\124 project my branch\\LOLCODE_Project\\src\\gui components\\thirdFrame.js":"11"},{"size":517,"mtime":1609144666598,"results":"12","hashOfConfig":"13"},{"size":375,"mtime":1609094689838,"results":"14","hashOfConfig":"13"},{"size":1985,"mtime":1609346189173,"results":"15","hashOfConfig":"13"},{"size":71601,"mtime":1609325834338,"results":"16","hashOfConfig":"13"},{"size":2097,"mtime":1609343138006,"results":"17","hashOfConfig":"13"},{"size":41586,"mtime":1609341844140,"results":"18","hashOfConfig":"13"},{"size":492,"mtime":1609343576421,"results":"19","hashOfConfig":"13"},{"size":2708,"mtime":1609347221032,"results":"20","hashOfConfig":"13"},{"size":2168,"mtime":1609347658305,"results":"21","hashOfConfig":"13"},{"size":3880,"mtime":1609225464114,"results":"22","hashOfConfig":"13"},{"size":1896,"mtime":1609347358547,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1slhyr6",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":254,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\cjpri\\Desktop\\124 project my branch\\LOLCODE_Project\\src\\index.js",[],["49","50"],"C:\\Users\\cjpri\\Desktop\\124 project my branch\\LOLCODE_Project\\src\\reportWebVitals.js",[],"C:\\Users\\cjpri\\Desktop\\124 project my branch\\LOLCODE_Project\\src\\App.js",[],"C:\\Users\\cjpri\\Desktop\\124 project my branch\\LOLCODE_Project\\src\\gui components\\parser.js",["51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267","268","269","270","271","272","273","274","275","276","277","278","279","280","281","282","283","284","285","286","287","288","289","290","291","292","293","294","295","296","297","298","299","300","301","302","303","304"],"const lexemes = require('./lexemes.js')\r\nconst fs = require('fs'); \r\nconst keywords = lexemes.keywords\r\nconst literal = lexemes.literals\r\nconst identifier = lexemes.identifier\r\nconst types = lexemes.types\r\n\r\n// inline comment abstraction //optimized\r\nconst inline_comment_abs = (code, tableOfLexemes,lineNumber)=>{\r\n    code[0] = code[0].join(\" \").trim().split(\" \");\r\n    let placeholder = code[0].shift();\r\n    tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]})\r\n    // if there is comment after BTW\r\n    if(code[0].length != 0){\r\n        placeholder = code[0].join(\" \")\r\n        tableOfLexemes.push({value:placeholder,description:'Comment'}) \r\n        code[0] = [];\r\n    }\r\n    return [code, tableOfLexemes, lineNumber];\r\n}\r\n\r\n// multiline comment abstraction //optimized\r\nconst multiline_comment_abs = (code, tableOfLexemes, lineNumber) =>{\r\n    let placeholder = code[0].shift(),error;\r\n    tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]})\r\n    // getting all the comment before the line of TLDR\r\n    while(!code[0].includes('TLDR')){\r\n        placeholder = code[0].join(\" \").trim();\r\n        if(placeholder != \"\"){\r\n            tableOfLexemes.push({value:placeholder,description:'Comment'});\r\n        }\r\n        code.shift();\r\n        tableOfLexemes.push({value:'\\n',description:'Line Break'});\r\n        // if there is no TLDR present in the code\r\n        if(code.length == 0) return `Syntax Error in line ${lineNumber}: Expected end of Multi-Line Comment.`;\r\n        code[0]=code[0].trim().split(\" \");\r\n        error = tokenizer_abs(code,lineNumber);\r\n        if(!Array.isArray(error)) return error;\r\n        [code, lineNumber] = error;\r\n        lineNumber++;\r\n    }\r\n    const indexTLDR = code[0].indexOf(\"TLDR\");\r\n    // if there is comment before TLDR\r\n    if(indexTLDR != 0){\r\n        placeholder = code[0].slice(0,indexTLDR).join(\" \").trim();\r\n        tableOfLexemes.push({value:placeholder,description:'Comment'});\r\n    }\r\n    tableOfLexemes.push({value:'TLDR',description:keywords['TLDR'][1]});\r\n    code[0] = code[0].slice(indexTLDR+1,code[0].length).join(\" \").trim().split();\r\n    if(code[0][0] == '' && code[0].length ==1){\r\n        code[0].shift();\r\n    }\r\n    // if command line break encountered\r\n    if(code[0].join(\" \").trim().split(\" \")[0] == \",\"){\r\n        code[0] = code[0].join(\" \").trim().split(\" \");\r\n        code[0].shift()\r\n        tableOfLexemes.push({value:\",\",description:\"Command Line Break\"});\r\n    }\r\n    return [code, tableOfLexemes, lineNumber];\r\n}\r\n\r\n// literal abstraction //optimized\r\nconst literal_abs = (code,tableOfLexemes,lineNumber) => {\r\n    let placeholder = code[0].shift(),change = true;\r\n    if(literal[\"NUMBAR\"][0].test(placeholder)){\r\n        tableOfLexemes.push({value:placeholder, description: literal[\"NUMBAR\"][1]});\r\n    }else if(literal[\"NUMBR\"][0].test(placeholder)){\r\n        tableOfLexemes.push({value:placeholder, description: literal[\"NUMBR\"][1]});\r\n    }else if(literal[\"YARN\"][0].test(placeholder)){\r\n        tableOfLexemes.push({value:placeholder, description: literal[\"YARN\"][1]});\r\n    }else if(literal[\"TROOF\"][0].test(placeholder)){\r\n        tableOfLexemes.push({value:placeholder, description: literal[\"TROOF\"][1]});\r\n    }else{\r\n        code[0].unshift(placeholder);\r\n        change = false;\r\n    }\r\n    return [code,tableOfLexemes, lineNumber,change];\r\n}\r\n\r\n// identifier abstraction //optimized\r\nconst identifier_abs = (code,tableOfLexemes,lineNumber) => {\r\n    let placeholder;\r\n    placeholder = code[0].shift();\r\n    if(placeholder[0] == '\\'' &&  placeholder[placeholder.length-1] == '\\'' || placeholder[0] == '\\'' ){\r\n        return `Syntax Error in line ${lineNumber}: Unexpected Sequence: ${placeholder}.`;\r\n    }else if(placeholder[0] == ',' || placeholder[placeholder.length-1] == ','){\r\n        return `Syntax Error in line ${lineNumber}: Invalid Operation: ${placeholder}.`;\r\n    }else if(keywords[placeholder] || [\"WIN\",\"FAIL\"].includes(placeholder) || !identifier[0].test(placeholder)){\r\n        return `Syntax Error in line ${lineNumber}: Expected Identifier: ${placeholder}.`;\r\n    }else{\r\n        tableOfLexemes.push({value:placeholder, description: identifier[1]});\r\n    }\r\n    return [code,tableOfLexemes, lineNumber];\r\n}\r\n\r\n// operands abstraction\r\nconst operands_abs = (code,tableOfLexemes,lineNumber,type) => {\r\n    let error,changed;\r\n    // literal\r\n    [code,tableOfLexemes, lineNumber, changed] = literal_abs(code,tableOfLexemes,lineNumber);\r\n    // expression\r\n    if(!changed){\r\n        error = expression_abs(code,tableOfLexemes,lineNumber,type);\r\n        // check if error\r\n        if(!Array.isArray(error)) return error;\r\n        [code,tableOfLexemes, lineNumber, changed] = error;\r\n    }\r\n    // identifier\r\n    if(!changed){\r\n        error = identifier_abs(code,tableOfLexemes,lineNumber);\r\n        // check if error\r\n        if(!Array.isArray(error)) return error;\r\n        [code,tableOfLexemes, lineNumber] = error;\r\n    }\r\n    // if command line break encountered\r\n    if(code[0].join(\" \").trim().split(\" \")[0] == \",\"){\r\n        code[0] = code[0].join(\" \").trim().split(\" \");\r\n        code[0].shift()\r\n        tableOfLexemes.push({value:\",\",description:\"Command Line Break\"});\r\n    }\r\n    return [code,tableOfLexemes, lineNumber];\r\n}\r\n\r\n// output abstraction //optimized\r\nconst output_abs = (code,tableOfLexemes,lineNumber) => {\r\n    let placeholder = code[0].shift() , command = [], error;\r\n    tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\r\n    while(true){\r\n        if(tableOfLexemes[tableOfLexemes.length-1].value == \"VISIBLE\" && (code[0].join(\" \").trim().split(\" \")[0] == \"BTW\" || code[0].length == 0)){\r\n            return `Syntax Error in line ${lineNumber}: Missing Operands after ${tableOfLexemes[tableOfLexemes.length-1].value}.`;\r\n        }else if(code[0].join(\" \").trim().split(\" \")[0] == \"BTW\" || code[0].length == 0){\r\n            break;\r\n        }else if(code[0].join(\" \").trim().split(\" \")[0] == \"!\"){\r\n            // no new line encountered\r\n            code[0] = code[0].join(\" \").trim().split(\" \");\r\n            code[0].shift()\r\n            tableOfLexemes.push({value:\"!\",description:\"No newline output\"});\r\n            continue;\r\n        }else if(code[0].join(\" \").trim().split(\" \")[0] == \",\" && tableOfLexemes[tableOfLexemes.length-1].value != \"VISIBLE\"){\r\n            // command line break encountered\r\n            code[0] = code[0].join(\" \").trim().split(\" \");\r\n            code[0].shift()\r\n            tableOfLexemes.push({value:\",\",description:\"Command Line Break\"});\r\n            return [code,tableOfLexemes, lineNumber];\r\n        }else if(tableOfLexemes[tableOfLexemes.length-1].value == \"!\" && code.length != 0){\r\n            // if there is operation after ! beside inline comment\r\n            return `Syntax Error in line ${lineNumber}: Expected end of Expression: ${code[0].join(\" \").trim()}.`;\r\n        }else if(code[0][0] == \"\"){\r\n            // if there is exceeding whitespace in between the operation\r\n            return `Syntax Error in line ${lineNumber}: Exceeding whitespace.`;\r\n        }\r\n        //operands\r\n        error = operands_abs(code,tableOfLexemes,lineNumber, true);\r\n        // check if error\r\n        if(!Array.isArray(error)) return error;\r\n        [code,tableOfLexemes, lineNumber] = error;\r\n        if(tableOfLexemes[tableOfLexemes.length-1].value == \",\"){\r\n            break;\r\n        }\r\n    }\r\n    return [code,tableOfLexemes, lineNumber];\r\n}\r\n\r\n// input abstraction //optimized\r\nconst input_abs = (code,tableOfLexemes,lineNumber) => {\r\n    let placeholder = code[0].shift(),command = \"\";\r\n    tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\r\n    if(code[0].length == 0){\r\n        return `Syntax Error in line ${lineNumber}: Missing Operands after ${tableOfLexemes[tableOfLexemes.length-1].value}.`;\r\n    }\r\n    if(code[0][0] == \"\"){\r\n        // if there is exceeding whitespace in between the operation\r\n        return `Syntax Error in line ${lineNumber}: Exceeding whitespace.`;\r\n    }\r\n    // identifier\r\n    const error = identifier_abs(code,tableOfLexemes,lineNumber);\r\n    // check if error\r\n    if(!Array.isArray(error)) return error;\r\n    [code,tableOfLexemes, lineNumber] = error;\r\n    // if command line break encountered\r\n    if(code[0].join(\" \").trim().split(\" \")[0] == \",\"){\r\n        code[0] = code[0].join(\" \").trim().split(\" \");\r\n        code[0].shift()\r\n        tableOfLexemes.push({value:\",\",description:\"Command Line Break\"});\r\n    }\r\n    return [code,tableOfLexemes, lineNumber];\r\n}\r\n\r\n// variable initialization //optimized\r\nconst initialization_var_abs = (code,tableOfLexemes,lineNumber) => {\r\n    let placeholder = code[0].shift(),error;\r\n    tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\r\n    if(code[0].length == 0){\r\n        return `Syntax Error in line ${lineNumber}: Missing Operands after ${tableOfLexemes[tableOfLexemes.length-1].value}.`;\r\n    }\r\n    if(code[0][0] == \"\"){\r\n        // if there is exceeding whitespace in between the operation\r\n        return `Syntax Error in line ${lineNumber}: Exceeding whitespace.`;\r\n    }\r\n    if(code[0][0] == \"A\" ){\r\n        //type init\r\n        error = type_init_abs(code,tableOfLexemes,lineNumber);\r\n        // check if error\r\n        if(!Array.isArray(error)) return error;\r\n        [code,tableOfLexemes, lineNumber] = error;\r\n        // if command line break encountered\r\n        if(code[0].join(\" \").trim().split(\" \")[0] == \",\"){\r\n            code[0] = code[0].join(\" \").trim().split(\" \");\r\n            code[0].shift()\r\n            tableOfLexemes.push({value:\",\",description:\"Command Line Break\"});\r\n        }\r\n    }else{\r\n        //operands\r\n        error = operands_abs(code,tableOfLexemes,lineNumber, true);\r\n        // check if error\r\n        if(!Array.isArray(error)) return error;\r\n        [code,tableOfLexemes, lineNumber] = error;\r\n    }\r\n    return [code,tableOfLexemes, lineNumber];\r\n}\r\n\r\n// variable declaration //optimized\r\nconst declaration_var_abs = (code,tableOfLexemes,lineNumber) => {\r\n    let placeholder = code[0].shift();\r\n    tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\r\n    if(code[0].length == 0){\r\n        return `Syntax Error in line ${lineNumber}: Missing Operands after ${tableOfLexemes[tableOfLexemes.length-1].value}.`;\r\n    }\r\n    if(code[0][0] == \"\"){\r\n        // if there is exceeding whitespace in between the operation\r\n        return `Syntax Error in line ${lineNumber}: Exceeding whitespace.`;\r\n    }\r\n    // identifier\r\n    let error = identifier_abs(code,tableOfLexemes,lineNumber);\r\n    // check if error   \r\n    if(!Array.isArray(error)) return error;\r\n    [code,tableOfLexemes, lineNumber] = error;\r\n    tableOfLexemes[tableOfLexemes.length-1].description = \"Variable Identifier\";\r\n    // if special IT identifier\r\n    if(tableOfLexemes[tableOfLexemes.length-1].value == \"IT\"){\r\n        placeholder = tableOfLexemes.pop();\r\n        return `Syntax Error in line ${lineNumber}: ${placeholder.value} is a Special Identifier.`;\r\n    }\r\n    if(code[0][0] == \"\"){\r\n        // if there is exceeding whitespace in between the operation\r\n        return `Syntax Error in line ${lineNumber}: Exceeding whitespace.`;\r\n    }\r\n    // if command line break encountered\r\n    if(code[0].join(\" \").trim().split(\" \")[0] == \",\"){\r\n        code[0] = code[0].join(\" \").trim().split(\" \");\r\n        code[0].shift()\r\n        tableOfLexemes.push({value:\",\",description:\"Command Line Break\"});\r\n        return [code,tableOfLexemes, lineNumber];\r\n    }\r\n    if(code[0][0] == \"ITZ\"){\r\n        // initialization\r\n        error = initialization_var_abs(code,tableOfLexemes,lineNumber);\r\n        // check if error\r\n        if(!Array.isArray(error)) return error;\r\n        [code,tableOfLexemes, lineNumber] = error;\r\n    }\r\n    return [code,tableOfLexemes, lineNumber];\r\n}\r\n\r\n// variable assignment //optimized\r\nconst assignment_var_abs = (code,tableOfLexemes,lineNumber)=>{\r\n    let placeholder;\r\n    // identifier\r\n    let error = identifier_abs(code,tableOfLexemes,lineNumber);\r\n    // check if error\r\n    if(!Array.isArray(error)) return error;\r\n    [code,tableOfLexemes, lineNumber] = error;\r\n    if(code[0][0] == \"\"){\r\n        // if there is exceeding whitespace in between the operation\r\n        return `Syntax Error in line ${lineNumber}: Exceeding whitespace.`;\r\n    }else if(code[0][0] == \"R\"){\r\n        placeholder = code[0].shift();\r\n        tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});  \r\n    }else{\r\n        // if inproper use of R\r\n        return `Syntax Error in line ${lineNumber}: Invalid Operation: ${code[0][0]}.`;\r\n    }\r\n    if(code[0].length == 0){\r\n        return `Syntax Error in line ${lineNumber}: Missing Operands after ${tableOfLexemes[tableOfLexemes.length-1].value}.`;\r\n    }\r\n    if(code[0][0] == \"\"){\r\n        // if there is exceeding whitespace in between the operation\r\n        return `Syntax Error in line ${lineNumber}: Exceeding whitespace.`;\r\n    }\r\n    if(code[0][0] == \"MAEK\"){\r\n        //operands\r\n        error = typecast_expr_abs(code,tableOfLexemes,lineNumber, true);\r\n        // check if error\r\n        if(!Array.isArray(error)) return error;\r\n        [code,tableOfLexemes, lineNumber] = error;\r\n    }else{\r\n        //operands\r\n        error = operands_abs(code,tableOfLexemes,lineNumber, true);\r\n        // check if error\r\n        if(!Array.isArray(error)) return error;\r\n        [code,tableOfLexemes, lineNumber] = error;\r\n    }\r\n    return [code,tableOfLexemes, lineNumber];\r\n}\r\n\r\n// arithmetic recursion //optimized\r\nconst arithmetic_recurse_abs = (code,tableOfLexemes,lineNumber) => {\r\n    let placeholder = code[0].shift();\r\n    tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\r\n    let i,error;\r\n    for (i = 0; i < 3; i++){\r\n        if(code[0].length == 0){\r\n            return `Syntax Error in line ${lineNumber}: Missing Operands after ${tableOfLexemes[tableOfLexemes.length-1].value}.`;\r\n        }\r\n        if(code[0][0] == \"\"){\r\n            // if there is exceeding whitespace in between the operation\r\n            return `Syntax Error in line ${lineNumber}: Exceeding whitespace.`;\r\n        }\r\n        if(i != 1){\r\n            //operands\r\n            error = operands_abs(code,tableOfLexemes,lineNumber, true);\r\n            // check if error\r\n            if(!Array.isArray(error)) return error;\r\n            [code,tableOfLexemes, lineNumber] = error;\r\n        }else if(code[0][0] == \"AN\" && tableOfLexemes[tableOfLexemes.length-1].value != \",\"){\r\n            placeholder = code[0].shift();\r\n            tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\r\n        }else{\r\n            // if inproper use of AN\r\n            return `Syntax Error in line ${lineNumber}: Invalid Operation: ${code[0][0]}.`;\r\n        }\r\n    }\r\n    return [code,tableOfLexemes, lineNumber];\r\n}\r\n\r\n// boolean operations op abstraction  //optimized\r\nconst boolean_operands_abs = (code, tableOfLexemes, lineNumber, type) => {\r\n    let error, changed = false;\r\n    if(code[0][1] && keywords[[code[0][0],code[0][1]].join(\" \")] && keywords[[code[0][0],code[0][1]].join(\" \")][0] == \"Boolean\"){\r\n        // boolean operations\r\n        code[0].unshift([code[0].shift(),code[0].shift()].join(\" \"));\r\n        error = boolean_recurse_abs(code,tableOfLexemes,lineNumber);\r\n        changed = true;\r\n    }else if(code[0][0] == \"NOT\"){\r\n        // not operations\r\n        error = boolean_recurse_abs(code,tableOfLexemes,lineNumber);\r\n        changed = true;\r\n    }else if(type && code[0][1] && keywords[[code[0][0],code[0][1]].join(\" \")] && keywords[[code[0][0],code[0][1]].join(\" \")][0] == \"Boolean Many\"){\r\n        // boolean many operations\r\n        code[0].unshift([code[0].shift(),code[0].shift()].join(\" \"));\r\n        error = boolean_many_recurse_abs(code,tableOfLexemes,lineNumber);\r\n        changed = true;\r\n    }else if(keywords[code[0][0]] && keywords[code[0][0]][0] == 'Comparison'){\r\n        // comparison different\r\n        error = comparison_abs(code,tableOfLexemes,lineNumber);\r\n        changed = true;\r\n    }else if(code[0][1]==\"SAEM\" && (keywords[[code[0][0],code[0][1]].join(\" \")][0] == \"Comparison\")){\r\n        // comparison same\r\n        code[0].unshift([code[0].shift(),code[0].shift()].join(\" \"));\r\n        error = comparison_abs(code,tableOfLexemes,lineNumber);\r\n        changed = true;\r\n    }\r\n    if(changed){\r\n        // check if error\r\n        if(!Array.isArray(error)) return error;\r\n        [code,tableOfLexemes, lineNumber] = error;\r\n    }\r\n    return [code,tableOfLexemes, lineNumber,changed];\r\n}\r\n\r\n// boolean recursion abstraction //optimized\r\nconst boolean_recurse_abs = (code,tableOfLexemes,lineNumber) => {\r\n    let placeholder = code[0].shift(),i,error;\r\n    tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\r\n    if(tableOfLexemes[tableOfLexemes.length - 1].value == \"NOT\"){\r\n        if(code[0].length == 0){\r\n            return `Syntax Error in line ${lineNumber}: Missing Operands after ${tableOfLexemes[tableOfLexemes.length-1].value}.`;\r\n        }\r\n        if(code[0][0] == \"\"){\r\n            // if there is exceeding whitespace in between the operation\r\n            return `Syntax Error in line ${lineNumber}: Exceeding whitespace.`;\r\n        }\r\n        //operands\r\n        error = operands_abs(code,tableOfLexemes,lineNumber, true);\r\n        // check if error\r\n        if(!Array.isArray(error)) return error;\r\n        [code,tableOfLexemes, lineNumber] = error;\r\n    }else{\r\n        for (i = 0; i < 3; i++){\r\n            if(code[0].length == 0){\r\n                return `Syntax Error in line ${lineNumber}: Missing Operands after ${tableOfLexemes[tableOfLexemes.length-1].value}.`;\r\n            }\r\n            if(code[0][0] == \"\"){\r\n                // if there is exceeding whitespace in between the operation\r\n                return `Syntax Error in line ${lineNumber}: Exceeding whitespace.`;\r\n            }\r\n            if(i != 1){\r\n                //operands\r\n                error = operands_abs(code,tableOfLexemes,lineNumber, true);\r\n                // check if error\r\n                if(!Array.isArray(error)) return error;\r\n                [code,tableOfLexemes, lineNumber] = error;\r\n            }else if(code[0][0] == \"AN\" && tableOfLexemes[tableOfLexemes.length-1].value != \",\"){\r\n                placeholder = code[0].shift();\r\n                tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\r\n            }else{\r\n                // if inproper use of AN\r\n                return `Syntax Error in line ${lineNumber}: Invalid Operation: ${code[0][0]}.`;\r\n            }\r\n        }\r\n    }\r\n    return [code,tableOfLexemes, lineNumber];\r\n}\r\n\r\n// boolean many recursion abstraction //optimized\r\nconst boolean_many_recurse_abs = (code,tableOfLexemes,lineNumber) => {\r\n    let placeholder = code[0].shift(),error,cnt=0;\r\n    tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\r\n    while(true){\r\n        if(code[0].length == 0 && [\"ANY OF\",\"AN\",\"ALL OF\"].includes(tableOfLexemes[tableOfLexemes.length-1].value)){\r\n            return `Syntax Error in line ${lineNumber}: Missing Operands after ${tableOfLexemes[tableOfLexemes.length-1].value}.`;\r\n        }\r\n        if(code[0][0] == \"\"){\r\n            // if there is exceeding whitespace in between the operation\r\n            return `Syntax Error in line ${lineNumber}: Exceeding whitespace.`;\r\n        }\r\n        if([\"ANY OF\",\"AN\",\"ALL OF\"].includes(tableOfLexemes[tableOfLexemes.length-1].value)){\r\n            //operands\r\n            error = operands_abs(code,tableOfLexemes,lineNumber, true);\r\n            // check if error\r\n            if(!Array.isArray(error)) return error;\r\n            [code,tableOfLexemes, lineNumber] = error;\r\n            cnt ++;\r\n        }else if(code[0][0] == \"AN\" && tableOfLexemes[tableOfLexemes.length-1].value != \",\"){\r\n            placeholder = code[0].shift();\r\n            tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\r\n        }else if(cnt>=2 && code[0][0] == \"MKAY\"){\r\n            placeholder = code[0].shift();\r\n            tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\r\n            // if command line break encountered\r\n            if(code[0].join(\" \").trim().split(\" \")[0] == \",\"){\r\n                code[0] = code[0].join(\" \").trim().split(\" \");\r\n                code[0].shift()\r\n                tableOfLexemes.push({value:\",\",description:\"Command Line Break\"});\r\n            }\r\n            break;\r\n        }else if(cnt>=2){\r\n            break;\r\n        }else{\r\n            return `Syntax Error in line ${lineNumber}: Invalid Operation: ${code[0][0]}.`;\r\n        }\r\n    }\r\n    return [code,tableOfLexemes, lineNumber];\r\n}\r\n\r\n// comparison abstraction //optimized\r\nconst comparison_abs = (code,tableOfLexemes,lineNumber) => {\r\n    let placeholder = code[0].shift(),i, error;\r\n    tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\r\n    for (i = 0; i < 3; i++){\r\n        if(code[0].length == 0){\r\n            return `Syntax Error in line ${lineNumber}: Missing Operands after ${tableOfLexemes[tableOfLexemes.length-1].value}.`;\r\n        }\r\n        if(code[0][0] == \"\"){\r\n            // if there is exceeding whitespace in between the operation\r\n            return `Syntax Error in line ${lineNumber}: Exceeding whitespace.`;\r\n        }\r\n        if(i != 1){\r\n            //operands\r\n            error = operands_abs(code,tableOfLexemes,lineNumber, true);\r\n            // check if error\r\n            if(!Array.isArray(error)) return error;\r\n            [code,tableOfLexemes, lineNumber] = error;\r\n        }else if(code[0][0] == \"AN\" && tableOfLexemes[tableOfLexemes.length-1].value != \",\"){\r\n            placeholder = code[0].shift();\r\n            tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\r\n        }else{\r\n            // if inproper use of AN\r\n            return `Syntax Error in line ${lineNumber}: Invalid Operation: ${code[0][0]}.`;\r\n        }\r\n    }\r\n    return [code,tableOfLexemes, lineNumber];\r\n}\r\n\r\n// expression abstraction //optimized\r\nconst expression_abs = (code, tableOfLexemes, lineNumber, type) => {\r\n    let error,changed = true;\r\n    if(code[0][1] && keywords[[code[0][0],code[0][1]].join(\" \")] && (keywords[[code[0][0],code[0][1]].join(\" \")][0] == \"Arithmetic\")){\r\n        // arithmetic\r\n        code[0].unshift([code[0].shift(),code[0].shift()].join(\" \"));\r\n        error = arithmetic_recurse_abs(code,tableOfLexemes,lineNumber);\r\n        // check if error\r\n        if(!Array.isArray(error)) return error;\r\n        [code,tableOfLexemes, lineNumber] = error;\r\n    }else if(type && keywords[code[0][0]] && keywords[code[0][0]][0] == 'Concat'){\r\n        // concat\r\n        error = concat_abs(code,tableOfLexemes,lineNumber);\r\n        // check if error\r\n        if(!Array.isArray(error)) return error;\r\n        [code,tableOfLexemes, lineNumber] = error;\r\n    }else if(code[0][1] && keywords[[code[0][0],code[0][1]].join(\" \")] && (keywords[[code[0][0],code[0][1]].join(\" \")][0] == \"Function Call\")){\r\n        // function call\r\n        code[0].unshift([code[0].shift(),code[0].shift()].join(\" \"));\r\n        error = function_call_abs(code,tableOfLexemes,lineNumber);\r\n        // check if error\r\n        if(!Array.isArray(error)) return error;\r\n        [code,tableOfLexemes, lineNumber] = error;\r\n    }else{\r\n        // boolean operations\r\n        error = boolean_operands_abs(code,tableOfLexemes,lineNumber,type);\r\n        // check if error\r\n        if(!Array.isArray(error)) return error;\r\n        [code,tableOfLexemes, lineNumber,changed] = error;\r\n    }\r\n    return [code,tableOfLexemes, lineNumber,changed]\r\n}\r\n\r\n// concatenation abstraction //optimized\r\nconst concat_abs = (code,tableOfLexemes,lineNumber) => {\r\n    let placeholder = code[0].shift(),error,cnt = 0;\r\n    tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\r\n    while(true){\r\n        if(code[0].length == 0 && [\"AN\",\"SMOOSH\"].includes(tableOfLexemes[tableOfLexemes.length-1].value)){\r\n            // lacking operand after AN\r\n            return `Syntax Error in line ${lineNumber}: Missing Operands after ${tableOfLexemes[tableOfLexemes.length-1].value}.`;\r\n        }\r\n        if(cnt < 2 && code[0].join(\" \").trim().split(\" \")[0] == \"BTW\"){\r\n            return `Syntax Error in line ${lineNumber}: Missing Operands after ${tableOfLexemes[tableOfLexemes.length-1].value}.`;\r\n        }else if(cnt >= 2 && tableOfLexemes[tableOfLexemes.length-1].value != \"AN\" && code[0].join(\" \").trim().split(\" \")[0] == \"BTW\" ){\r\n            break;\r\n        }\r\n        if(code[0][0] == \"\"){\r\n            // if there is exceeding whitespace in between the operation\r\n            return `Syntax Error in line ${lineNumber}: Exceeding whitespace.`;\r\n        }\r\n        if([\"AN\",\"SMOOSH\"].includes(tableOfLexemes[tableOfLexemes.length-1].value)){\r\n            //operands\r\n            error = operands_abs(code,tableOfLexemes,lineNumber, true);\r\n            // check if error\r\n            if(!Array.isArray(error)) return error;\r\n            [code,tableOfLexemes, lineNumber] = error;\r\n            cnt++;\r\n        }else if(code[0][0] == \"AN\" && tableOfLexemes[tableOfLexemes.length-1].value != \",\"){\r\n            placeholder = code[0].shift();\r\n            tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\r\n        }else{\r\n            if(code[0][0] == \"MKAY\" && cnt>=2){\r\n                placeholder = code[0].shift();\r\n                tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\r\n                // if command line break encountered\r\n                if(code[0].join(\" \").trim().split(\" \")[0] == \",\"){\r\n                    code[0] = code[0].join(\" \").trim().split(\" \");\r\n                    code[0].shift()\r\n                    tableOfLexemes.push({value:\",\",description:\"Command Line Break\"});\r\n                }\r\n                break;\r\n            }else if(cnt>=2){\r\n                break;\r\n            }else{\r\n                // if only one operand present\r\n                return `Syntax Error in line ${lineNumber}: Missing Operands after ${tableOfLexemes[tableOfLexemes.length-1].value}.`;\r\n            }\r\n        }\r\n    }\r\n    return [code,tableOfLexemes, lineNumber];\r\n} \r\n\r\n// if else abstraction //optimized\r\nconst if_else_abs = (code,tableOfLexemes,lineNumber,type) => {\r\n    let placeholder = code[0].shift(), if_active = false,else_active = false,end=false,error;\r\n    placeholder = placeholder.slice(0,placeholder.length-1);\r\n    tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\r\n    tableOfLexemes.push({value:\"?\",description:'Control Flow Delimiter'});\r\n    // if command line break encountered\r\n    if(code[0].join(\" \").trim().split(\" \")[0] == \",\"){\r\n        code[0] = code[0].join(\" \").trim().split(\" \");\r\n        code[0].shift()\r\n        tableOfLexemes.push({value:\",\",description:\"Command Line Break\"});\r\n    }\r\n    while(!end){\r\n        if(code.length == 0){\r\n            return `Syntax Error in line ${lineNumber-1}: Expected End of Flow Control.`;\r\n        }\r\n        if(code[0].length == 0){\r\n            // encounter new line\r\n            code.shift();\r\n            lineNumber++;\r\n            tableOfLexemes.push({value:'\\n',description:'Line Break'});\r\n            if(code.length != 0){\r\n                code[0]=code[0].trim().split(\" \");\r\n                if(code[0][0] == ''){\r\n                    code[0].shift();\r\n                    continue;\r\n                }\r\n                error = tokenizer_abs(code,lineNumber);\r\n                if(!Array.isArray(error)) return error;\r\n                [code, lineNumber] = error;\r\n            }\r\n            continue;\r\n        }else if (code[0][1] && [code[0][0],code[0][1]].join(\" \") == \"YA RLY\" && !if_active && [\"\\n\",\",\"].includes(tableOfLexemes[tableOfLexemes.length-1].value)){\r\n            placeholder = [code[0].shift(),code[0].shift()].join(\" \");\r\n            tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\r\n            if_active = true;\r\n            // if command line break encountered\r\n            if(code[0].join(\" \").trim().split(\" \")[0] == \",\"){\r\n                code[0] = code[0].join(\" \").trim().split(\" \");\r\n                code[0].shift()\r\n                tableOfLexemes.push({value:\",\",description:\"Command Line Break\"});\r\n            }\r\n        }else if(code[0][0] == \"MEBBE\" && if_active && !else_active && [\"\\n\",\",\"].includes(tableOfLexemes[tableOfLexemes.length-1].value)){\r\n            placeholder = code[0].shift();\r\n            tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\r\n            if(code[0].length == 0){\r\n                return `Syntax Error in line ${lineNumber}: Missing Operation after ${placeholder}.`;\r\n            }\r\n            if(code[0][0] == \"\"){\r\n                // if there is exceeding whitespace in between the operation\r\n                return `Syntax Error in line ${lineNumber}: Exceeding whitespace.`;\r\n            }\r\n            //operands\r\n            error = operands_abs(code,tableOfLexemes,lineNumber, true);\r\n            // check if error\r\n            if(!Array.isArray(error)) return error;\r\n            [code,tableOfLexemes, lineNumber] = error;   \r\n        }else if(code[0][1] && [code[0][0],code[0][1]].join(\" \") == \"NO WAI\" && if_active && !else_active && [\"\\n\",\",\"].includes(tableOfLexemes[tableOfLexemes.length-1].value)){\r\n            placeholder = [code[0].shift(),code[0].shift()].join(\" \");\r\n            tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\r\n            else_active = true;\r\n            // if command line break encountered\r\n            if(code[0].join(\" \").trim().split(\" \")[0] == \",\"){\r\n                code[0] = code[0].join(\" \").trim().split(\" \");\r\n                code[0].shift()\r\n                tableOfLexemes.push({value:\",\",description:\"Command Line Break\"});\r\n            }\r\n        }else if(code[0][0] == \"OIC\" && if_active && [\"\\n\",\",\"].includes(tableOfLexemes[tableOfLexemes.length-1].value)){\r\n            placeholder = code[0].shift();\r\n            tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\r\n            end = true;\r\n            // if command line break encountered\r\n            if(code[0].join(\" \").trim().split(\" \")[0] == \",\"){\r\n                code[0] = code[0].join(\" \").trim().split(\" \");\r\n                code[0].shift()\r\n                tableOfLexemes.push({value:\",\",description:\"Command Line Break\"});\r\n            }\r\n        }else if(if_active && [\"\\n\",\",\"].includes(tableOfLexemes[tableOfLexemes.length-1].value)){\r\n            error = statement_abs(code,tableOfLexemes,lineNumber,type);\r\n            if(!Array.isArray(error)) return error;\r\n            [code,tableOfLexemes, lineNumber] = error;\r\n        }\r\n        if(code[0].join(\" \").trim().split(\" \")[0] == \"BTW\"){\r\n            // inline comment\r\n            [code,tableOfLexemes, lineNumber] = inline_comment_abs(code,tableOfLexemes,lineNumber);\r\n        }else if(tableOfLexemes[tableOfLexemes.length - 1].value == \"\\n\" && code[0][0] == 'OBTW'){\r\n            // multiline comment\r\n            error = multiline_comment_abs(code,tableOfLexemes,lineNumber);\r\n            if(!Array.isArray(error)) return error;\r\n            [code,tableOfLexemes, lineNumber] = error;\r\n        }else if(code[0].length != 0 && !if_active){\r\n            // if there is no if\r\n            return `Syntax Error in line ${lineNumber}: Expected start of Flow Control: ${code[0].join(\" \").trim()}.`;\r\n        }else if(code[0].length != 0 && tableOfLexemes[tableOfLexemes.length-1].value != \",\"){\r\n            // if there is operation after the identifier\r\n            return `Syntax Error in line ${lineNumber}: Expected end of Expression: ${code[0].join(\" \").trim()}.`;\r\n        }\r\n    }\r\n    return [code,tableOfLexemes, lineNumber];\r\n}\r\n\r\n// Switch Case Abstraction //optimized\r\nconst switch_case_abs = (code,tableOfLexemes,lineNumber,type) => {\r\n    let placeholder = code[0].shift(),start_active = false,default_active = false,end =false,error,listOfOptions = [],indexConstant=0;\r\n    placeholder = placeholder.slice(0,placeholder.length-1);\r\n    tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\r\n    tableOfLexemes.push({value:\"?\",description:'Control Flow Delimiter'});\r\n    // if command line break encountered\r\n    if(code[0].join(\" \").trim().split(\" \")[0] == \",\"){\r\n        code[0] = code[0].join(\" \").trim().split(\" \");\r\n        code[0].shift()\r\n        tableOfLexemes.push({value:\",\",description:\"Command Line Break\"});\r\n    }\r\n    while(!end){\r\n        if(code.length == 0){\r\n            return `Syntax Error in line ${lineNumber-1}: Expected End of Flow Control.`;\r\n        }\r\n        if(code[0].length == 0){\r\n            // encounter new line\r\n            code.shift();\r\n            lineNumber++;\r\n            tableOfLexemes.push({value:'\\n',description:'Line Break'});\r\n            if(code.length != 0){\r\n                code[0]=code[0].trim().split(\" \");\r\n                if(code[0][0] == ''){\r\n                    code[0].shift();\r\n                    continue;\r\n                }\r\n                error = tokenizer_abs(code,lineNumber);\r\n                if(!Array.isArray(error)) return error;\r\n                [code, lineNumber] = error;\r\n            }\r\n            continue;\r\n        }else if(code[0][0] == \"OMG\" && !default_active && [\"\\n\",\",\"].includes(tableOfLexemes[tableOfLexemes.length-1].value)){\r\n            placeholder = code[0].shift();\r\n            tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\r\n            if(code[0].length == 0){\r\n                return `Syntax Error in line ${lineNumber}: Missing Operation after ${placeholder}.`;\r\n            }\r\n            if(code[0][0] == \"\"){\r\n                // if there is exceeding whitespace in between the operation\r\n                return `Syntax Error in line ${lineNumber}: Exceeding whitespace.`;\r\n            }\r\n            indexConstant = tableOfLexemes.length;\r\n            //operands\r\n            error = operands_abs(code,tableOfLexemes,lineNumber, true);\r\n            // check if error\r\n            if(!Array.isArray(error)) return error;\r\n            [code,tableOfLexemes, lineNumber] = error;\r\n            if(!tableOfLexemes[indexConstant].description.split(\" \").includes(\"Literal\")){\r\n                return `Syntax Error in line ${lineNumber}: Expected Constant Value at ${tableOfLexemes[indexConstant].value}.`;\r\n            }else if(listOfOptions.includes(tableOfLexemes[indexConstant].value)){\r\n                return `Syntax Error in line ${lineNumber}: OMG Literal Must be Unique at ${tableOfLexemes[indexConstant].value}.`;\r\n            }\r\n            listOfOptions.push(tableOfLexemes[indexConstant].value);\r\n            start_active = true;   \r\n        }else if(code[0][0] == \"OMGWTF\" && start_active && !default_active && [\"\\n\",\",\"].includes(tableOfLexemes[tableOfLexemes.length-1].value)){\r\n            placeholder = code[0].shift();\r\n            tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\r\n            default_active = true;\r\n            // if command line break encountered\r\n            if(code[0].join(\" \").trim().split(\" \")[0] == \",\"){\r\n                code[0] = code[0].join(\" \").trim().split(\" \");\r\n                code[0].shift()\r\n                tableOfLexemes.push({value:\",\",description:\"Command Line Break\"});\r\n            }\r\n        }else if(code[0][0] == \"OIC\" && start_active && [\"\\n\",\",\"].includes(tableOfLexemes[tableOfLexemes.length-1].value)){\r\n            placeholder = code[0].shift();\r\n            tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\r\n            end = true;\r\n            // if command line break encountered\r\n            if(code[0].join(\" \").trim().split(\" \")[0] == \",\"){\r\n                code[0] = code[0].join(\" \").trim().split(\" \");\r\n                code[0].shift()\r\n                tableOfLexemes.push({value:\",\",description:\"Command Line Break\"});\r\n            }\r\n        }else if(start_active || default_active && [\"\\n\",\",\"].includes(tableOfLexemes[tableOfLexemes.length-1].value)){\r\n            error = statement_abs(code,tableOfLexemes,lineNumber,type==\"Function\"? type:\"Block Operations\");\r\n            if(!Array.isArray(error)) return error;\r\n            [code,tableOfLexemes, lineNumber] = error;\r\n        }\r\n        if(code[0].join(\" \").trim().split(\" \")[0] == \"BTW\"){\r\n            // inline comment\r\n            [code,tableOfLexemes, lineNumber] = inline_comment_abs(code,tableOfLexemes,lineNumber);\r\n        }else if([\"\\n\",\",\"].includes(tableOfLexemes[tableOfLexemes.length-1].value) && code[0][0] == 'OBTW'){\r\n            error = multiline_comment_abs(code,tableOfLexemes,lineNumber);\r\n            if(!Array.isArray(error)) return error;\r\n            [code,tableOfLexemes, lineNumber] = error;\r\n        }else if(code[0].length != 0 && !start_active){\r\n            return `Syntax Error in line ${lineNumber}: Expected start of Flow Control: ${code[0].join(\" \").trim()}.`;\r\n        }else if(code[0].length != 0 && tableOfLexemes[tableOfLexemes.length-1].value != \",\"){\r\n            // if there is operation after the identifier\r\n            return `Syntax Error in line ${lineNumber}: Expected end of Expression: ${code[0].join(\" \").trim()}.`;\r\n        }\r\n    }\r\n    return [code,tableOfLexemes, lineNumber];\r\n}\r\n\r\n// loop abstraction\r\nconst loop_abs = (code, tableOfLexemes, lineNumber,type) => {\r\n    let placeholder = code[0].shift(),error,end=false,loopName='';\r\n    tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\r\n    if(code[0].length == 0){\r\n        return `Syntax Error in line ${lineNumber}: Missing Operands after ${tableOfLexemes[tableOfLexemes.length-1].value}.`;\r\n    }\r\n    if(code[0][0] == \"\"){\r\n        // if there is exceeding whitespace in between the operation\r\n        return `Syntax Error in line ${lineNumber}: Exceeding whitespace.`;\r\n    }\r\n    // for the name of the loop with the YR before\r\n    if(code[0][0] == \"YR\"){\r\n        placeholder = code[0].shift();\r\n        tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\r\n        // identifier\r\n        error = identifier_abs(code,tableOfLexemes,lineNumber);\r\n        // check if error\r\n        if(!Array.isArray(error)) return error;\r\n        [code,tableOfLexemes, lineNumber] = error;\r\n        loopName = tableOfLexemes[tableOfLexemes.length-1].value;\r\n        tableOfLexemes[tableOfLexemes.length-1].description = \"Loop Identifier\";\r\n        if(code[0].length == 0){\r\n            return `Syntax Error in line ${lineNumber}: Missing Operands after ${tableOfLexemes[tableOfLexemes.length-1].value}.`;\r\n        }\r\n        if(code[0][0] == \"\"){\r\n            // if there is exceeding whitespace in between the operation\r\n            return `Syntax Error in line ${lineNumber}: Exceeding whitespace.`;\r\n        }\r\n        // increment or decrement with the UPPIN and the NERFIN\r\n        if(code[0][0] == \"UPPIN\" | code[0][0] == \"NERFIN\"){\r\n            placeholder = code[0].shift();\r\n            tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\r\n            if(code[0].length == 0){\r\n                return `Syntax Error in line ${lineNumber}: Missing Operands ${tableOfLexemes[tableOfLexemes.length-1].value}es[tableOfLexemes.length-1].value}.`;\r\n            }\r\n            if(code[0][0] == \"\"){\r\n                // if there is exceeding whitespace in between the operation\r\n                return `Syntax Error in line ${lineNumber}: Exceeding whitespace.`;\r\n            }\r\n            // variable to be incremented with YR before\r\n            if(code[0][0] == \"YR\"){\r\n                placeholder = code[0].shift();\r\n                tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\r\n                // identifier\r\n                error = identifier_abs(code,tableOfLexemes,lineNumber);\r\n                // check if error\r\n                if(!Array.isArray(error)) return error;\r\n                [code,tableOfLexemes, lineNumber] = error;\r\n                tableOfLexemes[tableOfLexemes.length-1].description = \"Parameter Identifier\";\r\n                // the conditionals in the loop\r\n                if(code[0][0] == \"TIL\" | code[0][0] == \"WILE\"){\r\n                    placeholder = code[0].shift();\r\n                    tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\r\n                    if(code[0].length == 0){\r\n                        return `Syntax Error in line ${lineNumber}: Missing Operands after ${tableOfLexemes[tableOfLexemes.length-1].value}.`;\r\n                    }\r\n                    if(code[0][0] == \"\"){\r\n                        // if there is exceeding whitespace in between the operation\r\n                        return `Syntax Error in line ${lineNumber}: Exceeding whitespace.`;\r\n                    }\r\n                    // the condition\r\n                    //operands\r\n                    error = operands_abs(code,tableOfLexemes,lineNumber, true);\r\n                    // check if error\r\n                    if(!Array.isArray(error)) return error;\r\n                    [code,tableOfLexemes, lineNumber] = error;\r\n                    // body of the loop\r\n                    while(!end){\r\n                        if(code.length == 0){\r\n                            return `Syntax Error in line ${lineNumber-1}: Expected End of the Loop.`;\r\n                        }\r\n                        if(code[0].length == 0){\r\n                            // encounter new line\r\n                            code.shift();\r\n                            lineNumber++;\r\n                            tableOfLexemes.push({value:'\\n',description:'Line Break'});\r\n                            if(code.length != 0){\r\n                                code[0]=code[0].trim().split(\" \");\r\n                                if(code[0][0] == ''){\r\n                                    code[0].shift();\r\n                                    continue;\r\n                                }\r\n                                error = tokenizer_abs(code,lineNumber);\r\n                                if(!Array.isArray(error)) return error;\r\n                                [code, lineNumber] = error;\r\n                            }\r\n                            continue;\r\n                        }else if(code[0][1] && [code[0][0],code[0][1]].join(\" \") == \"IM OUTTA\" && [\"\\n\",\",\"].includes(tableOfLexemes[tableOfLexemes.length-1].value)){\r\n                            // loop code delimiter\r\n                            placeholder = [code[0].shift(),code[0].shift()].join(' ');\r\n                            tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\r\n                            if(code[0].length == 0){\r\n                                return `Syntax Error in line ${lineNumber}: Missing Operands after ${tableOfLexemes[tableOfLexemes.length-1].value}.`;\r\n                            }\r\n                            if(code[0][0] == \"\"){\r\n                                // if there is exceeding whitespace in between the operation\r\n                                return `Syntax Error in line ${lineNumber}: Exceeding whitespace.`;\r\n                            }\r\n                            // name of the loop after the YR\r\n                            if(code[0][0] == \"YR\"){\r\n                                placeholder = code[0].shift();\r\n                                tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\r\n                                if(code[0].length == 0){\r\n                                    return `Syntax Error in line ${lineNumber}: Missing Operands after ${tableOfLexemes[tableOfLexemes.length-1].value}.`;\r\n                                }\r\n                                if(code[0][0] == \"\"){\r\n                                    // if there is exceeding whitespace in between the operation\r\n                                    return `Syntax Error in line ${lineNumber}: Exceeding whitespace.`;\r\n                                }\r\n                                // identifier\r\n                                error = identifier_abs(code,tableOfLexemes,lineNumber);\r\n                                // check if error\r\n                                if(!Array.isArray(error)) return error;\r\n                                [code,tableOfLexemes, lineNumber] = error;\r\n                                if (loopName != tableOfLexemes[tableOfLexemes.length-1].value){\r\n                                    return `Syntax Error in line ${lineNumber}: Mismatched Loop Label.`;\r\n                                }\r\n                            }else{\r\n                                return `Syntax Error in line ${lineNumber}: Invalid Operation: ${code[0][0]}.`;\r\n                            }\r\n                            // if command line break encountered\r\n                            if(code[0].join(\" \").trim().split(\" \")[0] == \",\"){\r\n                                code[0] = code[0].join(\" \").trim().split(\" \");\r\n                                code[0].shift()\r\n                                tableOfLexemes.push({value:\",\",description:\"Command Line Break\"});\r\n                            }\r\n                            end = true\r\n                        }else if([\"\\n\",\",\"].includes(tableOfLexemes[tableOfLexemes.length-1].value)){\r\n                            // body of the loop\r\n                            error = statement_abs(code,tableOfLexemes,lineNumber,type==\"Function\"? type:\"Block Operations\");\r\n                            if(!Array.isArray(error)) return error;\r\n                            [code,tableOfLexemes, lineNumber] = error;\r\n                        }\r\n                        if(code[0].join(\" \").trim().split(\" \")[0] == \"BTW\"){\r\n                            // inline comment\r\n                            [code,tableOfLexemes, lineNumber] = inline_comment_abs(code,tableOfLexemes,lineNumber);\r\n                        }else if(code[0].length != 0 && tableOfLexemes[tableOfLexemes.length-1].value != \",\"){\r\n                            // if there is operation after the identifier\r\n                            return `Syntax Error in line ${lineNumber}: Expected end of Expression: ${code[0].join(\" \").trim()}.`;\r\n                        }\r\n                    }\r\n                }else{\r\n                    return `Syntax Error in line ${lineNumber}: Invalid Operation: ${code[0][0]}.`;\r\n                }\r\n            }else{\r\n                return `Syntax Error in line ${lineNumber}: Invalid Operation: ${code[0][0]}.`;\r\n            }\r\n        }else{\r\n            return `Syntax Error in line ${lineNumber}: Invalid Operation: ${code[0][0]}.`;\r\n        }\r\n    }else{\r\n        return `Syntax Error in line ${lineNumber}: Invalid Operation: ${code[0][0]}.`;\r\n    }\r\n    return [code,tableOfLexemes, lineNumber];\r\n}\r\n\r\n// function  abstraction\r\nconst function_abs = (code, tableOfLexemes, lineNumber, type) => {\r\n    let placeholder = code[0].shift(),error,end=false;\r\n    tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\r\n    if(code[0].length == 0){\r\n        return `Syntax Error in line ${lineNumber}: Missing Operands after ${tableOfLexemes[tableOfLexemes.length-1].value}.`;\r\n    }\r\n    if(code[0][0] == \"\"){\r\n        // if there is exceeding whitespace in between the operation\r\n        return `Syntax Error in line ${lineNumber}: Exceeding whitespace.`;\r\n    }\r\n    // identifier\r\n    error = identifier_abs(code,tableOfLexemes,lineNumber);\r\n    // check if error\r\n    if(!Array.isArray(error)) return error;\r\n    [code,tableOfLexemes, lineNumber] = error;\r\n    tableOfLexemes[tableOfLexemes.length-1].description = \"Function Identifier\";\r\n    while(true){\r\n        if(code[0][0] == \"\" && ![\"BTW\",\",\"].includes(code[0].join(\" \").trim().split(\" \")[0])){\r\n            // if there is exceeding whitespace in between the operation\r\n            return `Syntax Error in line ${lineNumber}: Exceeding whitespace.`;\r\n        }else if(['Operand Delimiter Keyword','Function Identifier'].includes(tableOfLexemes[tableOfLexemes.length-1].description)){\r\n            if(code[0][0] == \"YR\"){\r\n                placeholder = code[0].shift();\r\n                tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\r\n                if(code[0].length == 0){\r\n                    return `Syntax Error in line ${lineNumber}: Missing Operands after ${tableOfLexemes[tableOfLexemes.length-1].value}.`;\r\n                }\r\n                if(code[0][0] == \"\"){\r\n                    // if there is exceeding whitespace in between the operation\r\n                    return `Syntax Error in line ${lineNumber}: Exceeding whitespace.`;\r\n                }\r\n                // identifier\r\n                error = identifier_abs(code,tableOfLexemes,lineNumber);\r\n                // check if error\r\n                if(!Array.isArray(error)) return error;\r\n                [code,tableOfLexemes, lineNumber] = error;\r\n                tableOfLexemes[tableOfLexemes.length-1].description = \"Parameter Identifier\";\r\n            }else{\r\n                if(tableOfLexemes[tableOfLexemes.length-1].value == \"AN\"){\r\n                    return `Syntax Error in line ${lineNumber}: Missing Operands ${tableOfLexemes[tableOfLexemes.length-1].value}.`;\r\n                }else{\r\n                    break;\r\n                }\r\n            }\r\n        }else if(code[0][0] == \"AN\"){\r\n            placeholder = code[0].shift();\r\n            tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\r\n        }else{\r\n            break;\r\n        }\r\n    }\r\n    // if command line break encountered\r\n    if(code[0].join(\" \").trim().split(\" \")[0] == \",\"){\r\n        code[0] = code[0].join(\" \").trim().split(\" \");\r\n        code[0].shift()\r\n        tableOfLexemes.push({value:\",\",description:\"Command Line Break\"});\r\n    }\r\n    // body of the function\r\n    while(!end){\r\n        if(code.length == 0){\r\n            return `Syntax Error in line ${lineNumber-1}: Expected End of the Function.`;\r\n        }\r\n        if(code[0].length == 0){\r\n            // encounter new line\r\n            code.shift();\r\n            lineNumber++;\r\n            tableOfLexemes.push({value:'\\n',description:'Line Break'});\r\n            if(code.length != 0){\r\n                code[0]=code[0].trim().split(\" \");\r\n                if(code[0][0] == ''){\r\n                    code[0].shift();\r\n                    continue;\r\n                }\r\n                error = tokenizer_abs(code,lineNumber);\r\n                if(!Array.isArray(error)) return error;\r\n                [code, lineNumber] = error;\r\n            }\r\n            continue;\r\n        }else if(code[0][3] && [code[0][0],code[0][1],code[0][2],code[0][3]].join(\" \") == \"IF U SAY SO\" && [\"\\n\",\",\"].includes(tableOfLexemes[tableOfLexemes.length-1].value)){\r\n            // loop code delimiter\r\n            placeholder = [code[0].shift(),code[0].shift(),code[0].shift(),code[0].shift()].join(' ');\r\n            tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\r\n            // if command line break encountered\r\n            if(code[0].join(\" \").trim().split(\" \")[0] == \",\"){\r\n                code[0] = code[0].join(\" \").trim().split(\" \");\r\n                code[0].shift()\r\n                tableOfLexemes.push({value:\",\",description:\"Command Line Break\"});\r\n            }\r\n            end = true\r\n        }else if([\"\\n\",\",\"].includes(tableOfLexemes[tableOfLexemes.length-1].value)){\r\n            // body of the loop\r\n            error = statement_abs(code,tableOfLexemes,lineNumber, 'Function');\r\n            if(!Array.isArray(error)) return error;\r\n            [code,tableOfLexemes, lineNumber] = error;\r\n        }\r\n        if(code[0].join(\" \").trim().split(\" \")[0] == \"BTW\"){\r\n            // inline comment\r\n            [code,tableOfLexemes, lineNumber] = inline_comment_abs(code,tableOfLexemes,lineNumber);\r\n        }else if(code[0].length != 0 && tableOfLexemes[tableOfLexemes.length-1].value != \",\"){\r\n            // if there is operation after the identifier\r\n            return `Syntax Error in line ${lineNumber}: Expected end of Expression: ${code[0].join(\" \").trim()}.`;\r\n        }\r\n    }\r\n    return [code,tableOfLexemes, lineNumber];\r\n}\r\n\r\nconst function_call_abs = (code,tableOfLexemes,lineNumber) => {\r\n    let placeholder = code[0].shift(),error;\r\n    tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\r\n    if(code[0].length == 0){\r\n        return `Syntax Error in line ${lineNumber}: Missing Operands after ${tableOfLexemes[tableOfLexemes.length-1].value}.`;\r\n    }\r\n    if(code[0][0] == \"\"){\r\n        // if there is exceeding whitespace in between the operation\r\n        return `Syntax Error in line ${lineNumber}: Exceeding whitespace.`;\r\n    }\r\n    // identifier\r\n    error = identifier_abs(code,tableOfLexemes,lineNumber);\r\n    // check if error\r\n    if(!Array.isArray(error)) return error;\r\n    [code,tableOfLexemes, lineNumber] = error;\r\n    tableOfLexemes[tableOfLexemes.length-1].description = \"Function Identifier\";\r\n    while(true){\r\n        if(code[0][0] == \"\" && ![\"BTW\",\",\"].includes(code[0].join(\" \").trim().split(\" \")[0])){\r\n            // if there is exceeding whitespace in between the operation\r\n            return `Syntax Error in line ${lineNumber}: Exceeding whitespace.`;\r\n        }else if(['Operand Delimiter Keyword','Function Identifier'].includes(tableOfLexemes[tableOfLexemes.length-1].description)){\r\n            if(code[0][0] == \"YR\"){\r\n                placeholder = code[0].shift();\r\n                tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\r\n                if(code[0].length == 0){\r\n                    return `Syntax Error in line ${lineNumber}: Missing Operands after ${tableOfLexemes[tableOfLexemes.length-1].value}.`;\r\n                }\r\n                if(code[0][0] == \"\"){\r\n                    // if there is exceeding whitespace in between the operation\r\n                    return `Syntax Error in line ${lineNumber}: Exceeding whitespace.`;\r\n                }\r\n                // operands\r\n                error = operands_abs(code,tableOfLexemes,lineNumber);\r\n                // check if error\r\n                if(!Array.isArray(error)) return error;\r\n                [code,tableOfLexemes, lineNumber] = error;\r\n            }else{\r\n                if(tableOfLexemes[tableOfLexemes.length-1].value == \"AN\"){\r\n                    return `Syntax Error in line ${lineNumber}: Missing Operands ${tableOfLexemes[tableOfLexemes.length-1].value}.`;\r\n                }else{\r\n                    if(code[0][0] == \"MKAY\"){\r\n                        placeholder = code[0].shift();\r\n                        tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }else if(code[0][0] == \"MKAY\"){\r\n            placeholder = code[0].shift();\r\n            tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\r\n            break;\r\n        }else if(code[0][0] == \"AN\"){\r\n            placeholder = code[0].shift();\r\n            tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\r\n        }else{\r\n            break;\r\n        }\r\n    }\r\n    // if command line break encountered\r\n    if(code[0].join(\" \").trim().split(\" \")[0] == \",\"){\r\n        code[0] = code[0].join(\" \").trim().split(\" \");\r\n        code[0].shift()\r\n        tableOfLexemes.push({value:\",\",description:\"Command Line Break\"});\r\n    }\r\n    return [code,tableOfLexemes, lineNumber];\r\n}\r\n\r\n// statement abstraction //optimized\r\nconst statement_abs = (code,tableOfLexemes,lineNumber, type) => {\r\n    let placeholder;\r\n    let error,changed = true;\r\n    [code,tableOfLexemes, lineNumber, changed] = literal_abs(code,tableOfLexemes,lineNumber);\r\n    if(!changed){\r\n        error = expression_abs(code,tableOfLexemes,lineNumber, true);\r\n        // check if error\r\n        if(!Array.isArray(error)) return error;\r\n        [code,tableOfLexemes, lineNumber, changed] = error;\r\n    }\r\n    if(changed){\r\n        // if command line break encountered\r\n        if(code[0].join(\" \").trim().split(\" \")[0] == \",\"){\r\n            code[0] = code[0].join(\" \").trim().split(\" \");\r\n            code[0].shift()\r\n            tableOfLexemes.push({value:\",\",description:\"Command Line Break\"});\r\n        }\r\n    }\r\n    if(!changed){\r\n        changed = true;\r\n        if(code[0][0] == \"BTW\"){\r\n            error = inline_comment_abs(code,tableOfLexemes,lineNumber);\r\n        }else if(code[0][0] == \"OBTW\"){\r\n            error = multiline_comment_abs(code,tableOfLexemes,lineNumber);\r\n        }else if(code[0][0] == \"VISIBLE\"){\r\n            error = output_abs(code,tableOfLexemes,lineNumber);\r\n        }else if(code[0][0] == \"GIMMEH\"){\r\n            error = input_abs(code,tableOfLexemes,lineNumber);\r\n        }else if(code[0][1] && code[0][2] && keywords[[code[0][0],code[0][1],code[0][2]].join(\" \")] && (keywords[[code[0][0],code[0][1],code[0][2]].join(\" \")][0] == \"Declare Var\")){\r\n            code[0].unshift([code[0].shift(),code[0].shift(),code[0].shift()].join(\" \"));\r\n            error = declaration_var_abs(code,tableOfLexemes,lineNumber);\r\n        }else if(code[0].includes(\"R\")){\r\n            error = assignment_var_abs(code,tableOfLexemes,lineNumber);\r\n        }else if(code[0][1] && keywords[[code[0][0],code[0][1].slice(0,code[0][1].length-1)].join(\" \")] && (keywords[[code[0][0],code[0][1].slice(0,code[0][1].length-1)].join(\" \")][0] == \"If-Else\")){\r\n            code[0].unshift([code[0].shift(),code[0].shift()].join(\" \"));\r\n            error = if_else_abs(code,tableOfLexemes,lineNumber,type);\r\n        }else if(code[0][1] && keywords[[code[0][0],code[0][1]].join(\" \")] && (keywords[[code[0][0],code[0][1]].join(\" \")][0] == \"Loop\")){\r\n            code[0].unshift([code[0].shift(),code[0].shift()].join(\" \"));\r\n            error = loop_abs(code,tableOfLexemes,lineNumber,type);\r\n        }else if(code[0][2] && keywords[[code[0][0],code[0][1],code[0][2]].join(\" \")] && (keywords[[code[0][0],code[0][1],code[0][2]].join(\" \")][0] == \"Function\")){\r\n            code[0].unshift([code[0].shift(),code[0].shift(),code[0].shift()].join(\" \"));\r\n            error = function_abs(code,tableOfLexemes,lineNumber,type);\r\n        }else if(code[0][0] == \"WTF?\"){\r\n            error = switch_case_abs(code,tableOfLexemes,lineNumber,type);\r\n        }else if(code[0][0] == \"MAEK\"){\r\n            error = typecast_expr_abs(code,tableOfLexemes,lineNumber);\r\n        }else if(code[0].join(' ').includes(\"IS NOW\")){\r\n            error = typecast_var_abs(code,tableOfLexemes,lineNumber);\r\n        }else if([\"TLDR\",\"OIC\"].includes(code[0][0])){\r\n            return `Syntax Error in line ${lineNumber}: Expected Starting Flow-Control Structure: ${code[0].join(\" \").trim()}.`;\r\n        }else{\r\n            changed = false;\r\n        }\r\n        if(changed){\r\n            // check if error\r\n            if(!Array.isArray(error)) return error;\r\n            [code,tableOfLexemes, lineNumber] = error;\r\n            if(code.length == 0){\r\n                return [code,tableOfLexemes, lineNumber];\r\n            }\r\n        }\r\n    }\r\n    if(!changed && (type == \"Function\" || type == \"Block Operations\")){\r\n        changed = true;\r\n        if(type == \"Function\" && code[0][0] == \"FOUND\" && [\"\\n\",\",\"].includes(tableOfLexemes[tableOfLexemes.length-1].value)){\r\n            // loop code delimiter\r\n            placeholder = code[0].shift();\r\n            tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\r\n            if(code[0].length == 0){\r\n                return `Syntax Error in line ${lineNumber}: Missing Operands after ${tableOfLexemes[tableOfLexemes.length-1].value}.`;\r\n            }\r\n            if(code[0][0] == \"\"){\r\n                // if there is exceeding whitespace in between the operation\r\n                return `Syntax Error in line ${lineNumber}: Exceeding whitespace.`;\r\n            }\r\n            if(code[0][0] == \"YR\"){\r\n                placeholder = code[0].shift();\r\n                tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\r\n                if(code[0].length == 0){\r\n                    return `Syntax Error in line ${lineNumber}: Missing Operands after ${tableOfLexemes[tableOfLexemes.length-1].value}.`;\r\n                }\r\n                if(code[0][0] == \"\"){\r\n                    // if there is exceeding whitespace in between the operation\r\n                    return `Syntax Error in line ${lineNumber}: Exceeding whitespace.`;\r\n                }\r\n                // return value\r\n                error = operands_abs(code,tableOfLexemes,lineNumber);\r\n                // check if error\r\n                if(!Array.isArray(error)) return error;\r\n                [code,tableOfLexemes, lineNumber] = error;\r\n            }\r\n        }else if(code[0][0] == \"GTFO\" && [\"\\n\",\",\"].includes(tableOfLexemes[tableOfLexemes.length-1].value)){\r\n            // break code delimiter\r\n            placeholder = code[0].shift();\r\n            tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\r\n        }else{\r\n            changed = false;\r\n        }\r\n        // if command line break encountered\r\n        if(code[0].join(\" \").trim().split(\" \")[0] == \",\" && changed){\r\n            code[0] = code[0].join(\" \").trim().split(\" \");\r\n            code[0].shift()\r\n            tableOfLexemes.push({value:\",\",description:\"Command Line Break\"});\r\n        }\r\n    }\r\n    if(!changed){\r\n        // identifier\r\n        error = identifier_abs(code,tableOfLexemes,lineNumber);\r\n        // check if error\r\n        if(!Array.isArray(error)) return error;\r\n        [code,tableOfLexemes, lineNumber] = error;\r\n        // if command line break encountered\r\n        if(code[0].join(\" \").trim().split(\" \")[0] == \",\"){\r\n            code[0] = code[0].join(\" \").trim().split(\" \");\r\n            code[0].shift()\r\n            tableOfLexemes.push({value:\",\",description:\"Command Line Break\"});\r\n        }            \r\n    }\r\n    if(code[0].length != 0){\r\n        if(code[0].join(\" \").trim().split(\" \")[0] == \"BTW\"){\r\n            // inline comment\r\n            [code,tableOfLexemes, lineNumber] = inline_comment_abs(code,tableOfLexemes,lineNumber);\r\n        }else if(code[0].length != 0 && tableOfLexemes[tableOfLexemes.length-1].value != \",\"){\r\n            // if there is operation after the identifier\r\n            return `Syntax Error in line ${lineNumber}: Expected end of Expression: ${code[0].join(\" \").trim()}.`;\r\n        }\r\n    }\r\n    return [code,tableOfLexemes, lineNumber]; \r\n}\r\n\r\n// type casting of expression //optimized\r\nconst typecast_expr_abs = (code, tableOfLexemes, lineNumber) =>{\r\n    let placeholder = code[0].shift(),error;\r\n    tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\r\n    if(code[0].length == 0){\r\n        return `Syntax Error in line ${lineNumber}: Missing Operands after ${tableOfLexemes[tableOfLexemes.length-1].value}.`;\r\n    }\r\n    if(code[0][0] == \"\"){\r\n        // if there is exceeding whitespace in between the operation\r\n        return `Syntax Error in line ${lineNumber}: Exceeding whitespace.`;\r\n    }\r\n    //operands\r\n    error = operands_abs(code,tableOfLexemes,lineNumber, true);\r\n    // check if error\r\n    if(!Array.isArray(error)) return error;\r\n    [code,tableOfLexemes, lineNumber] = error;\r\n    // typecasting to data type\r\n    if(code[0][0] == \"A\" && tableOfLexemes[tableOfLexemes.length-1].value != \",\"){\r\n        //type init\r\n        error = type_init_abs(code,tableOfLexemes,lineNumber);\r\n        // check if error\r\n        if(!Array.isArray(error)) return error;\r\n        [code,tableOfLexemes, lineNumber] = error;\r\n    }else{\r\n        return `Syntax Error in line ${lineNumber}: Missing Operands ${tableOfLexemes[tableOfLexemes.length-1].value}.`;\r\n    }\r\n    // if command line break encountered\r\n    if(code[0].join(\" \").trim().split(\" \")[0] == \",\"){\r\n        code[0] = code[0].join(\" \").trim().split(\" \");\r\n        code[0].shift()\r\n        tableOfLexemes.push({value:\",\",description:\"Command Line Break\"});\r\n    }\r\n    return [code,tableOfLexemes, lineNumber];\r\n}\r\n\r\n// type casting of var\r\nconst typecast_var_abs = (code,tableOfLexemes,lineNumber) => {\r\n    let placeholder;\r\n    // identifier\r\n    let error = identifier_abs(code,tableOfLexemes,lineNumber);\r\n    // check if error\r\n    if(!Array.isArray(error)) return error;\r\n    [code,tableOfLexemes, lineNumber] = error;\r\n    if(code[0][0] == \"\"){\r\n        // if there is exceeding whitespace in between the operation\r\n        return `Syntax Error in line ${lineNumber}: Exceeding whitespace.`;\r\n    }else if(code[0][1] && [code[0][0],code[0][1]].join(\" \") == \"IS NOW\"){\r\n        placeholder = [code[0].shift(),code[0].shift()].join(' ');\r\n        tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});  \r\n    }else{\r\n        // if inproper use of IS NOW\r\n        return `Syntax Error in line ${lineNumber}: Invalid Operation: ${code[0][0]}.`;\r\n    }\r\n    // typecasting to data type\r\n    if(code[0][0] == \"A\" ){\r\n        //type init\r\n        error = type_init_abs(code,tableOfLexemes,lineNumber);\r\n        // check if error\r\n        if(!Array.isArray(error)) return error;\r\n        [code,tableOfLexemes, lineNumber] = error;\r\n    }else{\r\n        return `Syntax Error in line ${lineNumber}: Missing Operands after ${tableOfLexemes[tableOfLexemes.length - 1].value}.`;\r\n    }\r\n    // if command line break encountered\r\n    if(code[0].join(\" \").trim().split(\" \")[0] == \",\"){\r\n        code[0] = code[0].join(\" \").trim().split(\" \");\r\n        code[0].shift()\r\n        tableOfLexemes.push({value:\",\",description:\"Command Line Break\"});\r\n    }\r\n    return [code,tableOfLexemes, lineNumber];\r\n}\r\n\r\n// type initialization abstraction //optimized\r\nconst type_init_abs = (code, tableOfLexemes,lineNumber) => {\r\n    let placeholder = code[0].shift();\r\n    tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\r\n    if(code[0].length == 0){\r\n        return `Syntax Error in line ${lineNumber}: Missing Operands after ${tableOfLexemes[tableOfLexemes.length-1].value}.`;\r\n    }\r\n    if(code[0][0] == \"\"){\r\n        // if there is exceeding whitespace in between the operation\r\n        return `Syntax Error in line ${lineNumber}: Exceeding whitespace.`;\r\n    }\r\n    if(types[code[0][0]]){\r\n        // data types\r\n        placeholder = code[0].shift();\r\n        tableOfLexemes.push({value:placeholder,description:types[placeholder][1]});\r\n    }else{\r\n        return `Syntax Error in line ${lineNumber}: Expected Data Type`;\r\n    }\r\n    return [code,tableOfLexemes, lineNumber];\r\n}\r\n\r\n// yarn tokenizer and joiner abs\r\nconst tokenizer_abs = (code,lineNumber) => {\r\n    let index1,index2,tempHolder = [];\r\n    while(true){\r\n        index1 = code[0].findIndex((word)=>literal[\"YARN1\"][0].test(word));\r\n        if(index1 == -1) break;\r\n        index2 = code[0].findIndex((word,index)=>(literal[\"YARN2\"][0].test(word) && index != index1));\r\n        if(index2>-1){\r\n            code[0][index1] = code[0].slice(index1,index2+1).join(\" \");\r\n            code[0] = code[0].slice(0,index1+1).concat(code[0].slice(index2+1,code[0].length));\r\n        }else{\r\n            // if lacking closing \"\r\n            return `Syntax Error in line ${lineNumber}: Unexpected Sequence: ${code[0].slice(index1,code[0].length).join(\" \").trim()}.`;\r\n        }\r\n    }\r\n    code[0].map((item)=>{\r\n        if(item[0] == '\\\"' && item[item.length-1] == '\\\"'){\r\n            tempHolder.push(item);\r\n        }else{\r\n            let temp_array = item.replace(/[\\,]/g, \" ,\").replace(/[\\!]/g, \" !\").trim().replace(/[\\!]/g, \"! \").replace(/[\\,]/g, \", \").trim().split(\" \");\r\n            if(item[0] == '\\\"'){\r\n                const index1 = temp_array.findIndex((word)=>literal[\"YARN1\"][0].test(word));\r\n                if(index1 != -1){\r\n                    const index2 = temp_array.findIndex((word,index)=>(literal[\"YARN2\"][0].test(word) && index != index1));\r\n                    if(index1 != -1){\r\n                        temp_array[index1] = temp_array.slice(index1,index2+1).join(\" \");\r\n                        temp_array = temp_array.slice(0,index1+1).concat(temp_array.slice(index2+1,temp_array.length));\r\n                    }\r\n                }\r\n            }\r\n            tempHolder.push(...temp_array);\r\n        }\r\n      })\r\n    code[0] = tempHolder;\r\n    return [code,lineNumber];\r\n}\r\n\r\n// start program \r\nconst program_abs = (code,tableOfLexemes,lineNumber) =>{\r\n    let start = false, end = false,placeholder,error;\r\n    code = code.split(\"\\n\");\r\n    // if(code.length == 1 && code[0] == ''){\r\n    //     return [code,tableOfLexemes, lineNumber]; \r\n    // }\r\n    while(code.length !=0){\r\n        if(!Array.isArray(code[0])){\r\n            // new line of code encountered\r\n            code[0] = code[0].trim().split(\" \");\r\n            // when there is no content in the line\r\n            if(code[0][0] == ''){\r\n                code[0].shift();\r\n                continue;\r\n            }\r\n            //tokenizer\r\n            error = tokenizer_abs(code,lineNumber);\r\n            if(!Array.isArray(error)) return error;\r\n            [code, lineNumber] = error;\r\n            continue;\r\n        }else if(code[0].length == 0){\r\n            // if new line encountered\r\n            code.shift();\r\n            lineNumber++;\r\n            tableOfLexemes.push({value:'\\n',description:'Line Break'});\r\n            continue;\r\n        }\r\n        if(code[0].join(\" \").trim().split(\" \")[0] == \"BTW\"){\r\n            // inline comment\r\n            [code,tableOfLexemes, lineNumber] = inline_comment_abs(code,tableOfLexemes,lineNumber);\r\n            continue;\r\n        }else if((!start || (end && tableOfLexemes[tableOfLexemes.length-1].value == \"\\n\")) && code[0][0] == 'OBTW'){\r\n            // multiline comment\r\n            error = multiline_comment_abs(code,tableOfLexemes,lineNumber);\r\n            if(!Array.isArray(error)) return error;\r\n            [code,tableOfLexemes, lineNumber] = error;\r\n            continue;\r\n        }\r\n        if(!start && code[0][0] == \"HAI\"){\r\n            placeholder = code[0].shift();\r\n            tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\r\n            start = true;\r\n        }else if(start && code[0][0] == \"KTHXBYE\"){\r\n            placeholder = code[0].shift();\r\n            tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\r\n            end = true;\r\n        }else if(start && !end){\r\n            // main body of the program\r\n            error = statement_abs(code,tableOfLexemes,lineNumber,'None');\r\n            if(!Array.isArray(error)) return error;\r\n            [code,tableOfLexemes, lineNumber] = error;\r\n        }else if(start && code[0].length != 0){\r\n            return `Syntax Error in line ${lineNumber}: Expected end of Expression: ${code[0].join(\" \").trim()}.`;\r\n        }else{\r\n            return `Syntax Error in line ${lineNumber}: Expected start of the program.`;\r\n        }\r\n    }\r\n    if(!end && start){\r\n        return `Syntax Error in line ${lineNumber}: Expected end of the program.`;\r\n    }\r\n    return [code,tableOfLexemes, lineNumber]; \r\n}\r\n\r\n\r\nexport default program_abs","C:\\Users\\cjpri\\Desktop\\124 project my branch\\LOLCODE_Project\\src\\gui components\\firstFrame.js",["305"],"C:\\Users\\cjpri\\Desktop\\124 project my branch\\LOLCODE_Project\\src\\gui components\\semantics.js",["306","307","308","309","310","311","312","313"],"C:\\Users\\cjpri\\Desktop\\124 project my branch\\LOLCODE_Project\\src\\gui components\\fourthFrame.js",["314"],"C:\\Users\\cjpri\\Desktop\\124 project my branch\\LOLCODE_Project\\src\\gui components\\secondFrame.js",["315"],"C:\\Users\\cjpri\\Desktop\\124 project my branch\\LOLCODE_Project\\src\\gui components\\fifthFrame.js",["316"],"C:\\Users\\cjpri\\Desktop\\124 project my branch\\LOLCODE_Project\\src\\gui components\\lexemes.js",["317","318","319","320","321","322","323","324","325","326","327","328","329","330","331","332","333"],"exports.keywords = \r\n    {\r\n        \"HAI\":['Start','Code Delimiter Keyword'],\r\n        \"KTHXBYE\":['End','Code Delimiter Keyword'],\r\n        \"BTW\":['Comment','Line Comment Keyword'],\r\n        \"OBTW\":['Multi-Line Comment Start','Comment Delimiter Keyword'],\r\n        \"TLDR\":['Multi-Line Comment End','Comment Delimiter Keyword'],\r\n        \"I HAS A\":['Declare Var','Variable Declaration Keyword'],\r\n        \"ITZ\":['Initialize Var','Variable Initialization Keyword'],\r\n        \"R\":['Assigment Var','Variable Assignment Keyword'],\r\n        \"SUM OF\":['Arithmetic','Addition Operation Keyword'],\r\n        \"DIFF OF\":['Arithmetic','Subtraction Operation Keyword'],\r\n        \"PRODUKT OF\":['Arithmetic','Multiplication Operation Keyword'],\r\n        \"QUOSHUNT OF\":['Arithmetic','Division Operation Keyword'],\r\n        \"MOD OF\":['Arithmetic','Modulo Operation Keyword'],\r\n        \"BIGGR OF\":['Arithmetic','Max Operation Keyword'],\r\n        \"SMALLR OF\":['Arithmetic','Min Operation Keyword'],\r\n        \"BOTH OF\":['Boolean','AND Operation Keyword'],\r\n        \"EITHER OF\":['Boolean','OR Operation Keyword'],\r\n        \"WON OF\":['Boolean','XOR Operation Keyword'],\r\n        \"NOT\":['Boolean','NOT Operation Keyword'],\r\n        \"ANY OF\":['Boolean Many','OR Delimiter Operation Keyword'],\r\n        \"ALL OF\":['Boolean Many','AND Delimiter Operation Keyword'],\r\n        \"BOTH SAEM\":['Comparison','Equal Operation Keyword'],\r\n        \"DIFFRINT\":['Comparison','Not Equal Operation Keyword'],\r\n        \"SMOOSH\":['Concat','Concatenation Operation Keyword'],\r\n        \"MAEK\":['Declare Typecast','Type Casting Declaration Keyword'],\r\n        \"IS NOW\":['Initialize Typecast','Type Casting Initialization Keyword'],\r\n        \"A\":['Type Keyword','Type Keyword'],\r\n        \"VISIBLE\":['Output','Output Keyword'],\r\n        \"GIMMEH\":['Input','Input Keyword'],\r\n        \"O RLY\":['If-Else','If-Else Delimiter Keyword'],\r\n        \"YA RLY\":['If','If Keyword'],\r\n        \"MEBBE\":['Else-If','Else-If Keyword'],\r\n        \"NO WAI\":['Else','Else Keyword'],\r\n        \"OIC\":['Flow-Control End','Flow-Control Delimiter Keyword'],\r\n        \"WTF\":['Switch','Switch Case Delimiter Keyword'],\r\n        \"OMG\":['Switch Option','Case Keyword'],\r\n        \"OMGWTF\":['Switch Default','Case-Default Keyword'],\r\n        \"GTFO\":['Break','Break Keyword'],\r\n        \"IM IN\":['Loop','Loop Delimiter Keyword'],\r\n        \"YR\":['Loop Delimiter','Loop Parameter Delimiter Keyword'],\r\n        \"UPPIN\":['Loop Inc','Increment Keyword'],\r\n        \"NERFIN\":['Loop Dec','Decrement Keyword'],\r\n        \"TIL\":['Loop Cond','Loop Keyword'],\r\n        \"WILE\":['Loop Cond','Loop Keyword'],\r\n        \"IM OUTTA\":['Loop End','Loop Delimiter Keyword'],\r\n        \"AN\":['Conjunction','Operand Delimiter Keyword'],\r\n        \"NUMBR\":['Type','NUMBR Type Keyword'],\r\n        \"NUMBAR\":['Type','NUMBAR Type Keyword'],\r\n        \"YARN\":['Type','YARN Type Keyword'],\r\n        \"TROOF\":['Type','TROOF Type Keyword'],\r\n        \"MKAY\":['Boolean Many','Infinite Delimiter Keyword'],\r\n    }\r\n\r\n\r\nexports.literals = {\r\n    \"NUMBR\":[/(^\\-?[0-9]+$)/,'NUMBR Literal'],\r\n    \"NUMBAR\":[/(^\\-?[0-9]+\\.[0-9]+$)/,'NUMBAR Literal'],\r\n    \"YARN1\":[/(^[\\\"\\'][^\\\"\\']*$)/,'YARN Literal'],\r\n    \"YARN2\":[/(^[^\\\"\\']*[\\\"\\']$)/,'YARN Literal'],\r\n    \"YARN\":[/(^[\\\"\\'][^\\\"\\']*[\\\"\\']$)/,'YARN Literal'],\r\n    \"TROOF\":[/^((WIN)|(FAIL))$/,'TROOF Literal'],\r\n}\r\n\r\nexports.identifier = [/^([A-Za-z]+[0-9\\_]*)$/,'Identifier']\r\n\r\nexports.types = {\r\n    \"NUMBR\":['Type','NUMBR Type'],\r\n    \"NUMBAR\":['Type','NUMBAR Type'],\r\n    \"YARN\":['Type','YARN Type'],\r\n    \"TROOF\":['Type','TROOF Type'],\r\n    \"NOOB\" : ['Type','NOOB Type'],\r\n}\r\n\r\n","C:\\Users\\cjpri\\Desktop\\124 project my branch\\LOLCODE_Project\\src\\gui components\\thirdFrame.js",[],{"ruleId":"334","replacedBy":"335"},{"ruleId":"336","replacedBy":"337"},{"ruleId":"338","severity":1,"message":"339","line":2,"column":7,"nodeType":"340","messageId":"341","endLine":2,"endColumn":9},{"ruleId":"342","severity":1,"message":"343","line":14,"column":23,"nodeType":"344","messageId":"345","endLine":14,"endColumn":25},{"ruleId":"342","severity":1,"message":"343","line":29,"column":24,"nodeType":"344","messageId":"345","endLine":29,"endColumn":26},{"ruleId":"342","severity":1,"message":"346","line":35,"column":24,"nodeType":"344","messageId":"345","endLine":35,"endColumn":26},{"ruleId":"342","severity":1,"message":"343","line":44,"column":18,"nodeType":"344","messageId":"345","endLine":44,"endColumn":20},{"ruleId":"342","severity":1,"message":"346","line":50,"column":19,"nodeType":"344","messageId":"345","endLine":50,"endColumn":21},{"ruleId":"342","severity":1,"message":"346","line":50,"column":43,"nodeType":"344","messageId":"345","endLine":50,"endColumn":45},{"ruleId":"342","severity":1,"message":"346","line":54,"column":47,"nodeType":"344","messageId":"345","endLine":54,"endColumn":49},{"ruleId":"342","severity":1,"message":"346","line":84,"column":23,"nodeType":"344","messageId":"345","endLine":84,"endColumn":25},{"ruleId":"347","severity":1,"message":"348","line":84,"column":31,"nodeType":"349","messageId":"350","endLine":84,"endColumn":33},{"ruleId":"342","severity":1,"message":"346","line":84,"column":69,"nodeType":"344","messageId":"345","endLine":84,"endColumn":71},{"ruleId":"347","severity":1,"message":"348","line":84,"column":77,"nodeType":"349","messageId":"350","endLine":84,"endColumn":79},{"ruleId":"342","severity":1,"message":"346","line":84,"column":95,"nodeType":"344","messageId":"345","endLine":84,"endColumn":97},{"ruleId":"342","severity":1,"message":"346","line":86,"column":29,"nodeType":"344","messageId":"345","endLine":86,"endColumn":31},{"ruleId":"342","severity":1,"message":"346","line":86,"column":73,"nodeType":"344","messageId":"345","endLine":86,"endColumn":75},{"ruleId":"342","severity":1,"message":"346","line":116,"column":47,"nodeType":"344","messageId":"345","endLine":116,"endColumn":49},{"ruleId":"338","severity":1,"message":"351","line":126,"column":41,"nodeType":"340","messageId":"341","endLine":126,"endColumn":48},{"ruleId":"342","severity":1,"message":"346","line":129,"column":58,"nodeType":"344","messageId":"345","endLine":129,"endColumn":60},{"ruleId":"342","severity":1,"message":"346","line":129,"column":114,"nodeType":"344","messageId":"345","endLine":129,"endColumn":116},{"ruleId":"342","severity":1,"message":"346","line":129,"column":141,"nodeType":"344","messageId":"345","endLine":129,"endColumn":143},{"ruleId":"342","severity":1,"message":"346","line":131,"column":57,"nodeType":"344","messageId":"345","endLine":131,"endColumn":59},{"ruleId":"342","severity":1,"message":"346","line":131,"column":84,"nodeType":"344","messageId":"345","endLine":131,"endColumn":86},{"ruleId":"342","severity":1,"message":"346","line":133,"column":57,"nodeType":"344","messageId":"345","endLine":133,"endColumn":59},{"ruleId":"342","severity":1,"message":"346","line":139,"column":57,"nodeType":"344","messageId":"345","endLine":139,"endColumn":59},{"ruleId":"342","severity":1,"message":"343","line":139,"column":113,"nodeType":"344","messageId":"345","endLine":139,"endColumn":115},{"ruleId":"342","severity":1,"message":"346","line":145,"column":64,"nodeType":"344","messageId":"345","endLine":145,"endColumn":66},{"ruleId":"342","severity":1,"message":"343","line":145,"column":86,"nodeType":"344","messageId":"345","endLine":145,"endColumn":88},{"ruleId":"342","severity":1,"message":"346","line":148,"column":29,"nodeType":"344","messageId":"345","endLine":148,"endColumn":31},{"ruleId":"342","severity":1,"message":"346","line":157,"column":58,"nodeType":"344","messageId":"345","endLine":157,"endColumn":60},{"ruleId":"338","severity":1,"message":"351","line":166,"column":39,"nodeType":"340","messageId":"341","endLine":166,"endColumn":46},{"ruleId":"342","severity":1,"message":"346","line":168,"column":23,"nodeType":"344","messageId":"345","endLine":168,"endColumn":25},{"ruleId":"342","severity":1,"message":"346","line":171,"column":19,"nodeType":"344","messageId":"345","endLine":171,"endColumn":21},{"ruleId":"342","severity":1,"message":"346","line":181,"column":47,"nodeType":"344","messageId":"345","endLine":181,"endColumn":49},{"ruleId":"342","severity":1,"message":"346","line":193,"column":23,"nodeType":"344","messageId":"345","endLine":193,"endColumn":25},{"ruleId":"342","severity":1,"message":"346","line":196,"column":19,"nodeType":"344","messageId":"345","endLine":196,"endColumn":21},{"ruleId":"342","severity":1,"message":"346","line":200,"column":19,"nodeType":"344","messageId":"345","endLine":200,"endColumn":21},{"ruleId":"342","severity":1,"message":"346","line":207,"column":51,"nodeType":"344","messageId":"345","endLine":207,"endColumn":53},{"ruleId":"342","severity":1,"message":"346","line":226,"column":23,"nodeType":"344","messageId":"345","endLine":226,"endColumn":25},{"ruleId":"342","severity":1,"message":"346","line":229,"column":19,"nodeType":"344","messageId":"345","endLine":229,"endColumn":21},{"ruleId":"342","severity":1,"message":"346","line":240,"column":54,"nodeType":"344","messageId":"345","endLine":240,"endColumn":56},{"ruleId":"342","severity":1,"message":"346","line":244,"column":19,"nodeType":"344","messageId":"345","endLine":244,"endColumn":21},{"ruleId":"342","severity":1,"message":"346","line":249,"column":47,"nodeType":"344","messageId":"345","endLine":249,"endColumn":49},{"ruleId":"342","severity":1,"message":"346","line":255,"column":19,"nodeType":"344","messageId":"345","endLine":255,"endColumn":21},{"ruleId":"342","severity":1,"message":"346","line":273,"column":19,"nodeType":"344","messageId":"345","endLine":273,"endColumn":21},{"ruleId":"342","severity":1,"message":"346","line":276,"column":25,"nodeType":"344","messageId":"345","endLine":276,"endColumn":27},{"ruleId":"342","severity":1,"message":"346","line":283,"column":23,"nodeType":"344","messageId":"345","endLine":283,"endColumn":25},{"ruleId":"342","severity":1,"message":"346","line":286,"column":19,"nodeType":"344","messageId":"345","endLine":286,"endColumn":21},{"ruleId":"342","severity":1,"message":"346","line":290,"column":19,"nodeType":"344","messageId":"345","endLine":290,"endColumn":21},{"ruleId":"342","severity":1,"message":"346","line":312,"column":27,"nodeType":"344","messageId":"345","endLine":312,"endColumn":29},{"ruleId":"342","severity":1,"message":"346","line":315,"column":23,"nodeType":"344","messageId":"345","endLine":315,"endColumn":25},{"ruleId":"342","severity":1,"message":"343","line":319,"column":14,"nodeType":"344","messageId":"345","endLine":319,"endColumn":16},{"ruleId":"342","severity":1,"message":"346","line":325,"column":29,"nodeType":"344","messageId":"345","endLine":325,"endColumn":31},{"ruleId":"342","severity":1,"message":"343","line":325,"column":86,"nodeType":"344","messageId":"345","endLine":325,"endColumn":88},{"ruleId":"342","severity":1,"message":"346","line":339,"column":116,"nodeType":"344","messageId":"345","endLine":339,"endColumn":118},{"ruleId":"342","severity":1,"message":"346","line":344,"column":25,"nodeType":"344","messageId":"345","endLine":344,"endColumn":27},{"ruleId":"342","severity":1,"message":"346","line":348,"column":130,"nodeType":"344","messageId":"345","endLine":348,"endColumn":132},{"ruleId":"342","severity":1,"message":"346","line":353,"column":62,"nodeType":"344","messageId":"345","endLine":353,"endColumn":64},{"ruleId":"342","severity":1,"message":"346","line":357,"column":24,"nodeType":"344","messageId":"345","endLine":357,"endColumn":26},{"ruleId":"342","severity":1,"message":"346","line":357,"column":84,"nodeType":"344","messageId":"345","endLine":357,"endColumn":86},{"ruleId":"342","severity":1,"message":"346","line":375,"column":56,"nodeType":"344","messageId":"345","endLine":375,"endColumn":58},{"ruleId":"342","severity":1,"message":"346","line":376,"column":27,"nodeType":"344","messageId":"345","endLine":376,"endColumn":29},{"ruleId":"342","severity":1,"message":"346","line":379,"column":23,"nodeType":"344","messageId":"345","endLine":379,"endColumn":25},{"ruleId":"342","severity":1,"message":"346","line":390,"column":31,"nodeType":"344","messageId":"345","endLine":390,"endColumn":33},{"ruleId":"342","severity":1,"message":"346","line":393,"column":27,"nodeType":"344","messageId":"345","endLine":393,"endColumn":29},{"ruleId":"342","severity":1,"message":"343","line":397,"column":18,"nodeType":"344","messageId":"345","endLine":397,"endColumn":20},{"ruleId":"342","severity":1,"message":"346","line":403,"column":33,"nodeType":"344","messageId":"345","endLine":403,"endColumn":35},{"ruleId":"342","severity":1,"message":"343","line":403,"column":90,"nodeType":"344","messageId":"345","endLine":403,"endColumn":92},{"ruleId":"342","severity":1,"message":"346","line":420,"column":27,"nodeType":"344","messageId":"345","endLine":420,"endColumn":29},{"ruleId":"342","severity":1,"message":"346","line":423,"column":23,"nodeType":"344","messageId":"345","endLine":423,"endColumn":25},{"ruleId":"342","severity":1,"message":"346","line":434,"column":29,"nodeType":"344","messageId":"345","endLine":434,"endColumn":31},{"ruleId":"342","severity":1,"message":"343","line":434,"column":86,"nodeType":"344","messageId":"345","endLine":434,"endColumn":88},{"ruleId":"342","severity":1,"message":"346","line":437,"column":39,"nodeType":"344","messageId":"345","endLine":437,"endColumn":41},{"ruleId":"342","severity":1,"message":"346","line":441,"column":55,"nodeType":"344","messageId":"345","endLine":441,"endColumn":57},{"ruleId":"342","severity":1,"message":"346","line":461,"column":27,"nodeType":"344","messageId":"345","endLine":461,"endColumn":29},{"ruleId":"342","severity":1,"message":"346","line":464,"column":23,"nodeType":"344","messageId":"345","endLine":464,"endColumn":25},{"ruleId":"342","severity":1,"message":"343","line":468,"column":14,"nodeType":"344","messageId":"345","endLine":468,"endColumn":16},{"ruleId":"342","severity":1,"message":"346","line":474,"column":29,"nodeType":"344","messageId":"345","endLine":474,"endColumn":31},{"ruleId":"342","severity":1,"message":"343","line":474,"column":86,"nodeType":"344","messageId":"345","endLine":474,"endColumn":88},{"ruleId":"342","severity":1,"message":"346","line":488,"column":117,"nodeType":"344","messageId":"345","endLine":488,"endColumn":119},{"ruleId":"342","severity":1,"message":"346","line":495,"column":70,"nodeType":"344","messageId":"345","endLine":495,"endColumn":72},{"ruleId":"342","severity":1,"message":"346","line":501,"column":123,"nodeType":"344","messageId":"345","endLine":501,"endColumn":125},{"ruleId":"342","severity":1,"message":"346","line":523,"column":27,"nodeType":"344","messageId":"345","endLine":523,"endColumn":29},{"ruleId":"342","severity":1,"message":"346","line":527,"column":62,"nodeType":"344","messageId":"345","endLine":527,"endColumn":64},{"ruleId":"342","severity":1,"message":"343","line":529,"column":76,"nodeType":"344","messageId":"345","endLine":529,"endColumn":78},{"ruleId":"342","severity":1,"message":"346","line":529,"column":126,"nodeType":"344","messageId":"345","endLine":529,"endColumn":128},{"ruleId":"342","severity":1,"message":"346","line":532,"column":23,"nodeType":"344","messageId":"345","endLine":532,"endColumn":25},{"ruleId":"342","severity":1,"message":"346","line":543,"column":29,"nodeType":"344","messageId":"345","endLine":543,"endColumn":31},{"ruleId":"342","severity":1,"message":"343","line":543,"column":86,"nodeType":"344","messageId":"345","endLine":543,"endColumn":88},{"ruleId":"342","severity":1,"message":"346","line":547,"column":27,"nodeType":"344","messageId":"345","endLine":547,"endColumn":29},{"ruleId":"342","severity":1,"message":"346","line":551,"column":59,"nodeType":"344","messageId":"345","endLine":551,"endColumn":61},{"ruleId":"342","severity":1,"message":"346","line":575,"column":47,"nodeType":"344","messageId":"345","endLine":575,"endColumn":49},{"ruleId":"342","severity":1,"message":"346","line":581,"column":24,"nodeType":"344","messageId":"345","endLine":581,"endColumn":26},{"ruleId":"342","severity":1,"message":"346","line":584,"column":27,"nodeType":"344","messageId":"345","endLine":584,"endColumn":29},{"ruleId":"342","severity":1,"message":"343","line":589,"column":28,"nodeType":"344","messageId":"345","endLine":589,"endColumn":30},{"ruleId":"342","severity":1,"message":"346","line":591,"column":31,"nodeType":"344","messageId":"345","endLine":591,"endColumn":33},{"ruleId":"342","severity":1,"message":"346","line":600,"column":67,"nodeType":"344","messageId":"345","endLine":600,"endColumn":69},{"ruleId":"342","severity":1,"message":"346","line":605,"column":55,"nodeType":"344","messageId":"345","endLine":605,"endColumn":57},{"ruleId":"342","severity":1,"message":"346","line":610,"column":29,"nodeType":"344","messageId":"345","endLine":610,"endColumn":31},{"ruleId":"342","severity":1,"message":"346","line":613,"column":31,"nodeType":"344","messageId":"345","endLine":613,"endColumn":33},{"ruleId":"342","severity":1,"message":"346","line":616,"column":27,"nodeType":"344","messageId":"345","endLine":616,"endColumn":29},{"ruleId":"342","severity":1,"message":"346","line":625,"column":66,"nodeType":"344","messageId":"345","endLine":625,"endColumn":68},{"ruleId":"342","severity":1,"message":"346","line":630,"column":55,"nodeType":"344","messageId":"345","endLine":630,"endColumn":57},{"ruleId":"342","severity":1,"message":"346","line":635,"column":29,"nodeType":"344","messageId":"345","endLine":635,"endColumn":31},{"ruleId":"342","severity":1,"message":"346","line":640,"column":55,"nodeType":"344","messageId":"345","endLine":640,"endColumn":57},{"ruleId":"342","severity":1,"message":"346","line":650,"column":51,"nodeType":"344","messageId":"345","endLine":650,"endColumn":53},{"ruleId":"342","severity":1,"message":"346","line":653,"column":66,"nodeType":"344","messageId":"345","endLine":653,"endColumn":68},{"ruleId":"342","severity":1,"message":"346","line":653,"column":88,"nodeType":"344","messageId":"345","endLine":653,"endColumn":90},{"ruleId":"342","severity":1,"message":"343","line":658,"column":33,"nodeType":"344","messageId":"345","endLine":658,"endColumn":35},{"ruleId":"342","severity":1,"message":"343","line":661,"column":33,"nodeType":"344","messageId":"345","endLine":661,"endColumn":35},{"ruleId":"342","severity":1,"message":"343","line":661,"column":87,"nodeType":"344","messageId":"345","endLine":661,"endColumn":89},{"ruleId":"342","severity":1,"message":"346","line":676,"column":47,"nodeType":"344","messageId":"345","endLine":676,"endColumn":49},{"ruleId":"342","severity":1,"message":"346","line":682,"column":24,"nodeType":"344","messageId":"345","endLine":682,"endColumn":26},{"ruleId":"342","severity":1,"message":"346","line":685,"column":27,"nodeType":"344","messageId":"345","endLine":685,"endColumn":29},{"ruleId":"342","severity":1,"message":"343","line":690,"column":28,"nodeType":"344","messageId":"345","endLine":690,"endColumn":30},{"ruleId":"342","severity":1,"message":"346","line":692,"column":31,"nodeType":"344","messageId":"345","endLine":692,"endColumn":33},{"ruleId":"342","severity":1,"message":"346","line":701,"column":29,"nodeType":"344","messageId":"345","endLine":701,"endColumn":31},{"ruleId":"342","severity":1,"message":"346","line":704,"column":31,"nodeType":"344","messageId":"345","endLine":704,"endColumn":33},{"ruleId":"342","severity":1,"message":"346","line":707,"column":27,"nodeType":"344","messageId":"345","endLine":707,"endColumn":29},{"ruleId":"342","severity":1,"message":"346","line":724,"column":29,"nodeType":"344","messageId":"345","endLine":724,"endColumn":31},{"ruleId":"342","severity":1,"message":"346","line":729,"column":55,"nodeType":"344","messageId":"345","endLine":729,"endColumn":57},{"ruleId":"342","severity":1,"message":"346","line":734,"column":29,"nodeType":"344","messageId":"345","endLine":734,"endColumn":31},{"ruleId":"342","severity":1,"message":"346","line":739,"column":55,"nodeType":"344","messageId":"345","endLine":739,"endColumn":57},{"ruleId":"347","severity":1,"message":"352","line":744,"column":31,"nodeType":"349","messageId":"350","endLine":744,"endColumn":33},{"ruleId":"347","severity":1,"message":"352","line":744,"column":49,"nodeType":"349","messageId":"350","endLine":744,"endColumn":51},{"ruleId":"342","severity":1,"message":"346","line":745,"column":70,"nodeType":"344","messageId":"345","endLine":745,"endColumn":72},{"ruleId":"342","severity":1,"message":"346","line":749,"column":51,"nodeType":"344","messageId":"345","endLine":749,"endColumn":53},{"ruleId":"342","severity":1,"message":"346","line":752,"column":99,"nodeType":"344","messageId":"345","endLine":752,"endColumn":101},{"ruleId":"342","severity":1,"message":"343","line":756,"column":33,"nodeType":"344","messageId":"345","endLine":756,"endColumn":35},{"ruleId":"342","severity":1,"message":"343","line":758,"column":33,"nodeType":"344","messageId":"345","endLine":758,"endColumn":35},{"ruleId":"342","severity":1,"message":"343","line":758,"column":87,"nodeType":"344","messageId":"345","endLine":758,"endColumn":89},{"ruleId":"342","severity":1,"message":"346","line":770,"column":23,"nodeType":"344","messageId":"345","endLine":770,"endColumn":25},{"ruleId":"342","severity":1,"message":"346","line":773,"column":19,"nodeType":"344","messageId":"345","endLine":773,"endColumn":21},{"ruleId":"342","severity":1,"message":"346","line":778,"column":19,"nodeType":"344","messageId":"345","endLine":778,"endColumn":21},{"ruleId":"342","severity":1,"message":"346","line":788,"column":27,"nodeType":"344","messageId":"345","endLine":788,"endColumn":29},{"ruleId":"342","severity":1,"message":"346","line":791,"column":23,"nodeType":"344","messageId":"345","endLine":791,"endColumn":25},{"ruleId":"342","severity":1,"message":"346","line":796,"column":23,"nodeType":"344","messageId":"345","endLine":796,"endColumn":25},{"ruleId":"342","severity":1,"message":"346","line":796,"column":47,"nodeType":"344","messageId":"345","endLine":796,"endColumn":49},{"ruleId":"342","severity":1,"message":"346","line":799,"column":31,"nodeType":"344","messageId":"345","endLine":799,"endColumn":33},{"ruleId":"342","severity":1,"message":"346","line":802,"column":27,"nodeType":"344","messageId":"345","endLine":802,"endColumn":29},{"ruleId":"342","severity":1,"message":"346","line":807,"column":27,"nodeType":"344","messageId":"345","endLine":807,"endColumn":29},{"ruleId":"342","severity":1,"message":"346","line":817,"column":31,"nodeType":"344","messageId":"345","endLine":817,"endColumn":33},{"ruleId":"342","severity":1,"message":"346","line":817,"column":53,"nodeType":"344","messageId":"345","endLine":817,"endColumn":55},{"ruleId":"342","severity":1,"message":"346","line":820,"column":39,"nodeType":"344","messageId":"345","endLine":820,"endColumn":41},{"ruleId":"342","severity":1,"message":"346","line":823,"column":35,"nodeType":"344","messageId":"345","endLine":823,"endColumn":37},{"ruleId":"342","severity":1,"message":"346","line":835,"column":40,"nodeType":"344","messageId":"345","endLine":835,"endColumn":42},{"ruleId":"342","severity":1,"message":"346","line":838,"column":43,"nodeType":"344","messageId":"345","endLine":838,"endColumn":45},{"ruleId":"342","severity":1,"message":"343","line":843,"column":44,"nodeType":"344","messageId":"345","endLine":843,"endColumn":46},{"ruleId":"342","severity":1,"message":"346","line":845,"column":47,"nodeType":"344","messageId":"345","endLine":845,"endColumn":49},{"ruleId":"342","severity":1,"message":"346","line":854,"column":82,"nodeType":"344","messageId":"345","endLine":854,"endColumn":84},{"ruleId":"342","severity":1,"message":"346","line":858,"column":47,"nodeType":"344","messageId":"345","endLine":858,"endColumn":49},{"ruleId":"342","severity":1,"message":"346","line":861,"column":43,"nodeType":"344","messageId":"345","endLine":861,"endColumn":45},{"ruleId":"342","severity":1,"message":"346","line":866,"column":43,"nodeType":"344","messageId":"345","endLine":866,"endColumn":45},{"ruleId":"342","severity":1,"message":"346","line":869,"column":51,"nodeType":"344","messageId":"345","endLine":869,"endColumn":53},{"ruleId":"342","severity":1,"message":"346","line":872,"column":47,"nodeType":"344","messageId":"345","endLine":872,"endColumn":49},{"ruleId":"342","severity":1,"message":"343","line":881,"column":46,"nodeType":"344","messageId":"345","endLine":881,"endColumn":48},{"ruleId":"342","severity":1,"message":"346","line":888,"column":71,"nodeType":"344","messageId":"345","endLine":888,"endColumn":73},{"ruleId":"342","severity":1,"message":"346","line":896,"column":86,"nodeType":"344","messageId":"345","endLine":896,"endColumn":88},{"ruleId":"342","severity":1,"message":"346","line":900,"column":67,"nodeType":"344","messageId":"345","endLine":900,"endColumn":69},{"ruleId":"342","severity":1,"message":"343","line":903,"column":49,"nodeType":"344","messageId":"345","endLine":903,"endColumn":51},{"ruleId":"342","severity":1,"message":"343","line":903,"column":103,"nodeType":"344","messageId":"345","endLine":903,"endColumn":105},{"ruleId":"342","severity":1,"message":"346","line":927,"column":23,"nodeType":"344","messageId":"345","endLine":927,"endColumn":25},{"ruleId":"342","severity":1,"message":"346","line":930,"column":19,"nodeType":"344","messageId":"345","endLine":930,"endColumn":21},{"ruleId":"342","severity":1,"message":"346","line":941,"column":23,"nodeType":"344","messageId":"345","endLine":941,"endColumn":25},{"ruleId":"342","severity":1,"message":"346","line":945,"column":27,"nodeType":"344","messageId":"345","endLine":945,"endColumn":29},{"ruleId":"342","severity":1,"message":"346","line":948,"column":35,"nodeType":"344","messageId":"345","endLine":948,"endColumn":37},{"ruleId":"342","severity":1,"message":"346","line":951,"column":31,"nodeType":"344","messageId":"345","endLine":951,"endColumn":33},{"ruleId":"342","severity":1,"message":"346","line":962,"column":66,"nodeType":"344","messageId":"345","endLine":962,"endColumn":68},{"ruleId":"342","severity":1,"message":"346","line":968,"column":29,"nodeType":"344","messageId":"345","endLine":968,"endColumn":31},{"ruleId":"342","severity":1,"message":"346","line":976,"column":47,"nodeType":"344","messageId":"345","endLine":976,"endColumn":49},{"ruleId":"342","severity":1,"message":"346","line":983,"column":24,"nodeType":"344","messageId":"345","endLine":983,"endColumn":26},{"ruleId":"342","severity":1,"message":"346","line":986,"column":27,"nodeType":"344","messageId":"345","endLine":986,"endColumn":29},{"ruleId":"342","severity":1,"message":"343","line":991,"column":28,"nodeType":"344","messageId":"345","endLine":991,"endColumn":30},{"ruleId":"342","severity":1,"message":"346","line":993,"column":31,"nodeType":"344","messageId":"345","endLine":993,"endColumn":33},{"ruleId":"342","severity":1,"message":"346","line":1002,"column":88,"nodeType":"344","messageId":"345","endLine":1002,"endColumn":90},{"ruleId":"342","severity":1,"message":"346","line":1007,"column":55,"nodeType":"344","messageId":"345","endLine":1007,"endColumn":57},{"ruleId":"342","severity":1,"message":"346","line":1019,"column":51,"nodeType":"344","messageId":"345","endLine":1019,"endColumn":53},{"ruleId":"342","severity":1,"message":"343","line":1022,"column":33,"nodeType":"344","messageId":"345","endLine":1022,"endColumn":35},{"ruleId":"342","severity":1,"message":"343","line":1022,"column":87,"nodeType":"344","messageId":"345","endLine":1022,"endColumn":89},{"ruleId":"342","severity":1,"message":"346","line":1033,"column":23,"nodeType":"344","messageId":"345","endLine":1033,"endColumn":25},{"ruleId":"342","severity":1,"message":"346","line":1036,"column":19,"nodeType":"344","messageId":"345","endLine":1036,"endColumn":21},{"ruleId":"342","severity":1,"message":"346","line":1047,"column":23,"nodeType":"344","messageId":"345","endLine":1047,"endColumn":25},{"ruleId":"342","severity":1,"message":"346","line":1051,"column":27,"nodeType":"344","messageId":"345","endLine":1051,"endColumn":29},{"ruleId":"342","severity":1,"message":"346","line":1054,"column":35,"nodeType":"344","messageId":"345","endLine":1054,"endColumn":37},{"ruleId":"342","severity":1,"message":"346","line":1057,"column":31,"nodeType":"344","messageId":"345","endLine":1057,"endColumn":33},{"ruleId":"342","severity":1,"message":"346","line":1067,"column":66,"nodeType":"344","messageId":"345","endLine":1067,"endColumn":68},{"ruleId":"342","severity":1,"message":"346","line":1070,"column":35,"nodeType":"344","messageId":"345","endLine":1070,"endColumn":37},{"ruleId":"342","severity":1,"message":"346","line":1077,"column":29,"nodeType":"344","messageId":"345","endLine":1077,"endColumn":31},{"ruleId":"342","severity":1,"message":"346","line":1081,"column":29,"nodeType":"344","messageId":"345","endLine":1081,"endColumn":31},{"ruleId":"342","severity":1,"message":"346","line":1089,"column":47,"nodeType":"344","messageId":"345","endLine":1089,"endColumn":49},{"ruleId":"342","severity":1,"message":"346","line":1110,"column":51,"nodeType":"344","messageId":"345","endLine":1110,"endColumn":53},{"ruleId":"342","severity":1,"message":"346","line":1118,"column":23,"nodeType":"344","messageId":"345","endLine":1118,"endColumn":25},{"ruleId":"342","severity":1,"message":"346","line":1120,"column":29,"nodeType":"344","messageId":"345","endLine":1120,"endColumn":31},{"ruleId":"342","severity":1,"message":"346","line":1122,"column":29,"nodeType":"344","messageId":"345","endLine":1122,"endColumn":31},{"ruleId":"342","severity":1,"message":"346","line":1124,"column":29,"nodeType":"344","messageId":"345","endLine":1124,"endColumn":31},{"ruleId":"342","severity":1,"message":"346","line":1126,"column":163,"nodeType":"344","messageId":"345","endLine":1126,"endColumn":165},{"ruleId":"342","severity":1,"message":"346","line":1131,"column":185,"nodeType":"344","messageId":"345","endLine":1131,"endColumn":187},{"ruleId":"342","severity":1,"message":"346","line":1134,"column":127,"nodeType":"344","messageId":"345","endLine":1134,"endColumn":129},{"ruleId":"342","severity":1,"message":"346","line":1137,"column":149,"nodeType":"344","messageId":"345","endLine":1137,"endColumn":151},{"ruleId":"342","severity":1,"message":"346","line":1140,"column":29,"nodeType":"344","messageId":"345","endLine":1140,"endColumn":31},{"ruleId":"342","severity":1,"message":"346","line":1142,"column":29,"nodeType":"344","messageId":"345","endLine":1142,"endColumn":31},{"ruleId":"342","severity":1,"message":"346","line":1155,"column":28,"nodeType":"344","messageId":"345","endLine":1155,"endColumn":30},{"ruleId":"342","severity":1,"message":"346","line":1160,"column":26,"nodeType":"344","messageId":"345","endLine":1160,"endColumn":28},{"ruleId":"342","severity":1,"message":"346","line":1160,"column":48,"nodeType":"344","messageId":"345","endLine":1160,"endColumn":50},{"ruleId":"342","severity":1,"message":"346","line":1162,"column":17,"nodeType":"344","messageId":"345","endLine":1162,"endColumn":19},{"ruleId":"342","severity":1,"message":"346","line":1162,"column":45,"nodeType":"344","messageId":"345","endLine":1162,"endColumn":47},{"ruleId":"342","severity":1,"message":"346","line":1166,"column":31,"nodeType":"344","messageId":"345","endLine":1166,"endColumn":33},{"ruleId":"342","severity":1,"message":"346","line":1169,"column":27,"nodeType":"344","messageId":"345","endLine":1169,"endColumn":29},{"ruleId":"342","severity":1,"message":"346","line":1173,"column":27,"nodeType":"344","messageId":"345","endLine":1173,"endColumn":29},{"ruleId":"342","severity":1,"message":"346","line":1176,"column":35,"nodeType":"344","messageId":"345","endLine":1176,"endColumn":37},{"ruleId":"342","severity":1,"message":"346","line":1179,"column":31,"nodeType":"344","messageId":"345","endLine":1179,"endColumn":33},{"ruleId":"342","severity":1,"message":"346","line":1189,"column":29,"nodeType":"344","messageId":"345","endLine":1189,"endColumn":31},{"ruleId":"342","severity":1,"message":"346","line":1197,"column":51,"nodeType":"344","messageId":"345","endLine":1197,"endColumn":53},{"ruleId":"342","severity":1,"message":"346","line":1210,"column":51,"nodeType":"344","messageId":"345","endLine":1210,"endColumn":53},{"ruleId":"342","severity":1,"message":"343","line":1216,"column":23,"nodeType":"344","messageId":"345","endLine":1216,"endColumn":25},{"ruleId":"342","severity":1,"message":"346","line":1217,"column":51,"nodeType":"344","messageId":"345","endLine":1217,"endColumn":53},{"ruleId":"342","severity":1,"message":"343","line":1220,"column":33,"nodeType":"344","messageId":"345","endLine":1220,"endColumn":35},{"ruleId":"342","severity":1,"message":"343","line":1220,"column":87,"nodeType":"344","messageId":"345","endLine":1220,"endColumn":89},{"ruleId":"342","severity":1,"message":"346","line":1232,"column":23,"nodeType":"344","messageId":"345","endLine":1232,"endColumn":25},{"ruleId":"342","severity":1,"message":"346","line":1235,"column":19,"nodeType":"344","messageId":"345","endLine":1235,"endColumn":21},{"ruleId":"342","severity":1,"message":"346","line":1245,"column":19,"nodeType":"344","messageId":"345","endLine":1245,"endColumn":21},{"ruleId":"342","severity":1,"message":"343","line":1245,"column":75,"nodeType":"344","messageId":"345","endLine":1245,"endColumn":77},{"ruleId":"342","severity":1,"message":"346","line":1255,"column":47,"nodeType":"344","messageId":"345","endLine":1255,"endColumn":49},{"ruleId":"342","severity":1,"message":"346","line":1271,"column":19,"nodeType":"344","messageId":"345","endLine":1271,"endColumn":21},{"ruleId":"342","severity":1,"message":"346","line":1274,"column":62,"nodeType":"344","messageId":"345","endLine":1274,"endColumn":64},{"ruleId":"342","severity":1,"message":"346","line":1282,"column":19,"nodeType":"344","messageId":"345","endLine":1282,"endColumn":21},{"ruleId":"342","severity":1,"message":"346","line":1292,"column":47,"nodeType":"344","messageId":"345","endLine":1292,"endColumn":49},{"ruleId":"342","severity":1,"message":"346","line":1304,"column":23,"nodeType":"344","messageId":"345","endLine":1304,"endColumn":25},{"ruleId":"342","severity":1,"message":"346","line":1307,"column":19,"nodeType":"344","messageId":"345","endLine":1307,"endColumn":21},{"ruleId":"342","severity":1,"message":"346","line":1326,"column":19,"nodeType":"344","messageId":"345","endLine":1326,"endColumn":21},{"ruleId":"353","severity":1,"message":"354","line":1327,"column":36,"nodeType":"355","messageId":"356","endLine":1327,"endColumn":101},{"ruleId":"342","severity":1,"message":"343","line":1327,"column":91,"nodeType":"344","messageId":"345","endLine":1327,"endColumn":93},{"ruleId":"357","severity":1,"message":"358","line":1336,"column":23,"nodeType":"355","messageId":"359","endLine":1336,"endColumn":25},{"ruleId":"342","severity":1,"message":"346","line":1337,"column":20,"nodeType":"344","messageId":"345","endLine":1337,"endColumn":22},{"ruleId":"360","severity":1,"message":"361","line":1337,"column":24,"nodeType":"362","messageId":"363","endLine":1337,"endColumn":25,"suggestions":"364"},{"ruleId":"342","severity":1,"message":"346","line":1337,"column":51,"nodeType":"344","messageId":"345","endLine":1337,"endColumn":53},{"ruleId":"360","severity":1,"message":"361","line":1337,"column":55,"nodeType":"362","messageId":"363","endLine":1337,"endColumn":56,"suggestions":"365"},{"ruleId":"360","severity":1,"message":"366","line":1340,"column":45,"nodeType":"362","messageId":"363","endLine":1340,"endColumn":46,"suggestions":"367"},{"ruleId":"360","severity":1,"message":"368","line":1340,"column":68,"nodeType":"362","messageId":"363","endLine":1340,"endColumn":69,"suggestions":"369"},{"ruleId":"360","severity":1,"message":"368","line":1340,"column":98,"nodeType":"362","messageId":"363","endLine":1340,"endColumn":99,"suggestions":"370"},{"ruleId":"360","severity":1,"message":"366","line":1340,"column":121,"nodeType":"362","messageId":"363","endLine":1340,"endColumn":122,"suggestions":"371"},{"ruleId":"342","severity":1,"message":"346","line":1341,"column":24,"nodeType":"344","messageId":"345","endLine":1341,"endColumn":26},{"ruleId":"360","severity":1,"message":"361","line":1341,"column":28,"nodeType":"362","messageId":"363","endLine":1341,"endColumn":29,"suggestions":"372"},{"ruleId":"342","severity":1,"message":"343","line":1343,"column":27,"nodeType":"344","messageId":"345","endLine":1343,"endColumn":29},{"ruleId":"342","severity":1,"message":"343","line":1344,"column":112,"nodeType":"344","messageId":"345","endLine":1344,"endColumn":114},{"ruleId":"342","severity":1,"message":"343","line":1345,"column":31,"nodeType":"344","messageId":"345","endLine":1345,"endColumn":33},{"ruleId":"342","severity":1,"message":"343","line":1365,"column":23,"nodeType":"344","messageId":"345","endLine":1365,"endColumn":25},{"ruleId":"342","severity":1,"message":"346","line":1370,"column":27,"nodeType":"344","messageId":"345","endLine":1370,"endColumn":29},{"ruleId":"342","severity":1,"message":"346","line":1379,"column":33,"nodeType":"344","messageId":"345","endLine":1379,"endColumn":35},{"ruleId":"342","severity":1,"message":"346","line":1386,"column":51,"nodeType":"344","messageId":"345","endLine":1386,"endColumn":53},{"ruleId":"342","severity":1,"message":"346","line":1390,"column":83,"nodeType":"344","messageId":"345","endLine":1390,"endColumn":85},{"ruleId":"342","severity":1,"message":"346","line":1390,"column":107,"nodeType":"344","messageId":"345","endLine":1390,"endColumn":109},{"ruleId":"342","severity":1,"message":"346","line":1397,"column":33,"nodeType":"344","messageId":"345","endLine":1397,"endColumn":35},{"ruleId":"342","severity":1,"message":"346","line":1401,"column":38,"nodeType":"344","messageId":"345","endLine":1401,"endColumn":40},{"ruleId":"342","severity":1,"message":"343","line":1410,"column":42,"nodeType":"344","messageId":"345","endLine":1410,"endColumn":44},{"ruleId":"373","severity":1,"message":"374","line":56,"column":3,"nodeType":"375","endLine":56,"endColumn":27,"suggestions":"376"},{"ruleId":"338","severity":1,"message":"339","line":4,"column":7,"nodeType":"340","messageId":"341","endLine":4,"endColumn":9},{"ruleId":"338","severity":1,"message":"377","line":5,"column":9,"nodeType":"340","messageId":"341","endLine":5,"endColumn":18},{"ruleId":"338","severity":1,"message":"378","line":6,"column":9,"nodeType":"340","messageId":"341","endLine":6,"endColumn":18},{"ruleId":"338","severity":1,"message":"379","line":7,"column":7,"nodeType":"340","messageId":"341","endLine":7,"endColumn":13},{"ruleId":"338","severity":1,"message":"380","line":345,"column":7,"nodeType":"340","messageId":"341","endLine":345,"endColumn":12},{"ruleId":"342","severity":1,"message":"346","line":355,"column":26,"nodeType":"344","messageId":"345","endLine":355,"endColumn":28},{"ruleId":"342","severity":1,"message":"346","line":356,"column":30,"nodeType":"344","messageId":"345","endLine":356,"endColumn":32},{"ruleId":"342","severity":1,"message":"346","line":357,"column":30,"nodeType":"344","messageId":"345","endLine":357,"endColumn":32},{"ruleId":"338","severity":1,"message":"381","line":1,"column":17,"nodeType":"340","messageId":"341","endLine":1,"endColumn":25},{"ruleId":"373","severity":1,"message":"382","line":45,"column":7,"nodeType":"375","endLine":45,"endColumn":22,"suggestions":"383"},{"ruleId":"373","severity":1,"message":"382","line":40,"column":7,"nodeType":"375","endLine":40,"endColumn":24,"suggestions":"384"},{"ruleId":"360","severity":1,"message":"385","line":58,"column":17,"nodeType":"362","messageId":"363","endLine":58,"endColumn":18,"suggestions":"386"},{"ruleId":"360","severity":1,"message":"385","line":59,"column":18,"nodeType":"362","messageId":"363","endLine":59,"endColumn":19,"suggestions":"387"},{"ruleId":"360","severity":1,"message":"361","line":60,"column":18,"nodeType":"362","messageId":"363","endLine":60,"endColumn":19,"suggestions":"388"},{"ruleId":"360","severity":1,"message":"389","line":60,"column":20,"nodeType":"362","messageId":"363","endLine":60,"endColumn":21,"suggestions":"390"},{"ruleId":"360","severity":1,"message":"361","line":60,"column":25,"nodeType":"362","messageId":"363","endLine":60,"endColumn":26,"suggestions":"391"},{"ruleId":"360","severity":1,"message":"389","line":60,"column":27,"nodeType":"362","messageId":"363","endLine":60,"endColumn":28,"suggestions":"392"},{"ruleId":"360","severity":1,"message":"361","line":61,"column":19,"nodeType":"362","messageId":"363","endLine":61,"endColumn":20,"suggestions":"393"},{"ruleId":"360","severity":1,"message":"389","line":61,"column":21,"nodeType":"362","messageId":"363","endLine":61,"endColumn":22,"suggestions":"394"},{"ruleId":"360","severity":1,"message":"361","line":61,"column":26,"nodeType":"362","messageId":"363","endLine":61,"endColumn":27,"suggestions":"395"},{"ruleId":"360","severity":1,"message":"389","line":61,"column":28,"nodeType":"362","messageId":"363","endLine":61,"endColumn":29,"suggestions":"396"},{"ruleId":"360","severity":1,"message":"361","line":62,"column":17,"nodeType":"362","messageId":"363","endLine":62,"endColumn":18,"suggestions":"397"},{"ruleId":"360","severity":1,"message":"389","line":62,"column":19,"nodeType":"362","messageId":"363","endLine":62,"endColumn":20,"suggestions":"398"},{"ruleId":"360","severity":1,"message":"361","line":62,"column":24,"nodeType":"362","messageId":"363","endLine":62,"endColumn":25,"suggestions":"399"},{"ruleId":"360","severity":1,"message":"389","line":62,"column":26,"nodeType":"362","messageId":"363","endLine":62,"endColumn":27,"suggestions":"400"},{"ruleId":"360","severity":1,"message":"361","line":62,"column":31,"nodeType":"362","messageId":"363","endLine":62,"endColumn":32,"suggestions":"401"},{"ruleId":"360","severity":1,"message":"389","line":62,"column":33,"nodeType":"362","messageId":"363","endLine":62,"endColumn":34,"suggestions":"402"},{"ruleId":"360","severity":1,"message":"403","line":66,"column":39,"nodeType":"362","messageId":"363","endLine":66,"endColumn":40,"suggestions":"404"},"no-native-reassign",["405"],"no-negated-in-lhs",["406"],"no-unused-vars","'fs' is assigned a value but never used.","Identifier","unusedVar","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","'command' is assigned a value but never used.","Unexpected mix of '||' and '&&'.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'index1'.","ArrowFunctionExpression","unsafeRefs","array-callback-return","Array.prototype.map() expects a return value from arrow function.","expectedInside","no-useless-escape","Unnecessary escape character: \\\".","Literal","unnecessaryEscape",["407","408"],["409","410"],"Unnecessary escape character: \\,.",["411","412"],"Unnecessary escape character: \\!.",["413","414"],["415","416"],["417","418"],["419","420"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'localLolText' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["421"],"'connected' is assigned a value but never used.","'useEffect' is assigned a value but never used.","'syntax' is assigned a value but never used.","'error' is defined but never used.","'useState' is defined but never used.","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["422"],["423"],"Unnecessary escape character: \\-.",["424","425"],["426","427"],["428","429"],"Unnecessary escape character: \\'.",["430","431"],["432","433"],["434","435"],["436","437"],["438","439"],["440","441"],["442","443"],["444","445"],["446","447"],["448","449"],["450","451"],["452","453"],["454","455"],"Unnecessary escape character: \\_.",["456","457"],"no-global-assign","no-unsafe-negation",{"messageId":"458","fix":"459","desc":"460"},{"messageId":"461","fix":"462","desc":"463"},{"messageId":"458","fix":"464","desc":"460"},{"messageId":"461","fix":"465","desc":"463"},{"messageId":"458","fix":"466","desc":"460"},{"messageId":"461","fix":"467","desc":"463"},{"messageId":"458","fix":"468","desc":"460"},{"messageId":"461","fix":"469","desc":"463"},{"messageId":"458","fix":"470","desc":"460"},{"messageId":"461","fix":"471","desc":"463"},{"messageId":"458","fix":"472","desc":"460"},{"messageId":"461","fix":"473","desc":"463"},{"messageId":"458","fix":"474","desc":"460"},{"messageId":"461","fix":"475","desc":"463"},{"desc":"476","fix":"477"},{"desc":"478","fix":"479"},{"desc":"480","fix":"481"},{"messageId":"458","fix":"482","desc":"460"},{"messageId":"461","fix":"483","desc":"463"},{"messageId":"458","fix":"484","desc":"460"},{"messageId":"461","fix":"485","desc":"463"},{"messageId":"458","fix":"486","desc":"460"},{"messageId":"461","fix":"487","desc":"463"},{"messageId":"458","fix":"488","desc":"460"},{"messageId":"461","fix":"489","desc":"463"},{"messageId":"458","fix":"490","desc":"460"},{"messageId":"461","fix":"491","desc":"463"},{"messageId":"458","fix":"492","desc":"460"},{"messageId":"461","fix":"493","desc":"463"},{"messageId":"458","fix":"494","desc":"460"},{"messageId":"461","fix":"495","desc":"463"},{"messageId":"458","fix":"496","desc":"460"},{"messageId":"461","fix":"497","desc":"463"},{"messageId":"458","fix":"498","desc":"460"},{"messageId":"461","fix":"499","desc":"463"},{"messageId":"458","fix":"500","desc":"460"},{"messageId":"461","fix":"501","desc":"463"},{"messageId":"458","fix":"502","desc":"460"},{"messageId":"461","fix":"503","desc":"463"},{"messageId":"458","fix":"504","desc":"460"},{"messageId":"461","fix":"505","desc":"463"},{"messageId":"458","fix":"506","desc":"460"},{"messageId":"461","fix":"507","desc":"463"},{"messageId":"458","fix":"508","desc":"460"},{"messageId":"461","fix":"509","desc":"463"},{"messageId":"458","fix":"510","desc":"460"},{"messageId":"461","fix":"511","desc":"463"},{"messageId":"458","fix":"512","desc":"460"},{"messageId":"461","fix":"513","desc":"463"},{"messageId":"458","fix":"514","desc":"460"},{"messageId":"461","fix":"515","desc":"463"},"removeEscape",{"range":"516","text":"517"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"518","text":"519"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"520","text":"517"},{"range":"521","text":"519"},{"range":"522","text":"517"},{"range":"523","text":"519"},{"range":"524","text":"517"},{"range":"525","text":"519"},{"range":"526","text":"517"},{"range":"527","text":"519"},{"range":"528","text":"517"},{"range":"529","text":"519"},{"range":"530","text":"517"},{"range":"531","text":"519"},"Update the dependencies array to be: [localLolText, props, props.buttonEventClick]",{"range":"532","text":"533"},"Update the dependencies array to be: [props, props.lolText]",{"range":"534","text":"535"},"Update the dependencies array to be: [props, props.parsedLol]",{"range":"536","text":"537"},{"range":"538","text":"517"},{"range":"539","text":"519"},{"range":"540","text":"517"},{"range":"541","text":"519"},{"range":"542","text":"517"},{"range":"543","text":"519"},{"range":"544","text":"517"},{"range":"545","text":"519"},{"range":"546","text":"517"},{"range":"547","text":"519"},{"range":"548","text":"517"},{"range":"549","text":"519"},{"range":"550","text":"517"},{"range":"551","text":"519"},{"range":"552","text":"517"},{"range":"553","text":"519"},{"range":"554","text":"517"},{"range":"555","text":"519"},{"range":"556","text":"517"},{"range":"557","text":"519"},{"range":"558","text":"517"},{"range":"559","text":"519"},{"range":"560","text":"517"},{"range":"561","text":"519"},{"range":"562","text":"517"},{"range":"563","text":"519"},{"range":"564","text":"517"},{"range":"565","text":"519"},{"range":"566","text":"517"},{"range":"567","text":"519"},{"range":"568","text":"517"},{"range":"569","text":"519"},{"range":"570","text":"517"},{"range":"571","text":"519"},[67843,67844],"",[67843,67843],"\\",[67874,67875],[67874,67874],[67977,67978],[67977,67977],[68000,68001],[68000,68000],[68030,68031],[68030,68030],[68053,68054],[68053,68053],[68113,68114],[68113,68113],[1587,1611],"[localLolText, props, props.buttonEventClick]",[1746,1761],"[props, props.lolText]",[1707,1724],"[props, props.parsedLol]",[3032,3033],[3032,3032],[3081,3082],[3081,3081],[3139,3140],[3139,3139],[3141,3142],[3141,3141],[3146,3147],[3146,3146],[3148,3149],[3148,3148],[3192,3193],[3192,3192],[3194,3195],[3194,3194],[3199,3200],[3199,3199],[3201,3202],[3201,3201],[3242,3243],[3242,3242],[3244,3245],[3244,3244],[3249,3250],[3249,3249],[3251,3252],[3251,3251],[3256,3257],[3256,3256],[3258,3259],[3258,3258],[3377,3378],[3377,3377]]
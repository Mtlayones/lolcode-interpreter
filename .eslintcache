[{"C:\\Users\\cjpri\\Desktop\\124 project my branch\\LOLCODE_Project\\src\\index.js":"1","C:\\Users\\cjpri\\Desktop\\124 project my branch\\LOLCODE_Project\\src\\reportWebVitals.js":"2","C:\\Users\\cjpri\\Desktop\\124 project my branch\\LOLCODE_Project\\src\\App.js":"3","C:\\Users\\cjpri\\Desktop\\124 project my branch\\LOLCODE_Project\\src\\gui components\\firstFrame.js":"4","C:\\Users\\cjpri\\Desktop\\124 project my branch\\LOLCODE_Project\\src\\gui components\\parser.js":"5","C:\\Users\\cjpri\\Desktop\\124 project my branch\\LOLCODE_Project\\src\\gui components\\fourthFrame.js":"6","C:\\Users\\cjpri\\Desktop\\124 project my branch\\LOLCODE_Project\\src\\gui components\\secondFrame.js":"7","C:\\Users\\cjpri\\Desktop\\124 project my branch\\LOLCODE_Project\\src\\gui components\\lexemes.js":"8"},{"size":517,"mtime":1609144666598,"results":"9","hashOfConfig":"10"},{"size":375,"mtime":1609094689838,"results":"11","hashOfConfig":"10"},{"size":1691,"mtime":1609181953694,"results":"12","hashOfConfig":"10"},{"size":1602,"mtime":1609177307325,"results":"13","hashOfConfig":"10"},{"size":49256,"mtime":1609094683151,"results":"14","hashOfConfig":"10"},{"size":366,"mtime":1609167655146,"results":"15","hashOfConfig":"10"},{"size":2277,"mtime":1609184572409,"results":"16","hashOfConfig":"10"},{"size":3606,"mtime":1609094683149,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1slhyr6",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":160,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"20"},"C:\\Users\\cjpri\\Desktop\\124 project my branch\\LOLCODE_Project\\src\\index.js",[],["38","39"],"C:\\Users\\cjpri\\Desktop\\124 project my branch\\LOLCODE_Project\\src\\reportWebVitals.js",[],"C:\\Users\\cjpri\\Desktop\\124 project my branch\\LOLCODE_Project\\src\\App.js",[],"C:\\Users\\cjpri\\Desktop\\124 project my branch\\LOLCODE_Project\\src\\gui components\\firstFrame.js",[],"C:\\Users\\cjpri\\Desktop\\124 project my branch\\LOLCODE_Project\\src\\gui components\\parser.js",["40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199"],"const lexemes = require('./lexemes.js')\r\nconst fs = require('fs'); \r\nconst keywords = lexemes.keywords\r\nconst literal = lexemes.literals\r\nconst identifier = lexemes.identifier\r\nconst types = lexemes.types\r\n\r\n// inline comment abstraction //optimized\r\nconst inline_comment_abs = (code, tableOfLexemes,lineNumber)=>{\r\n    let placeholder = code[0].shift();\r\n    tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]})\r\n    // if there is comment after BTW\r\n    if(code[0].length != 0){\r\n        placeholder = code[0].join(\" \")\r\n        tableOfLexemes.push({value:placeholder,description:'Comment'}) \r\n        code[0] = [];\r\n    }\r\n    return [code, tableOfLexemes, lineNumber];\r\n}\r\n\r\n// multiline comment abstraction //optimized\r\nconst multiline_comment_abs = (code, tableOfLexemes, lineNumber) =>{\r\n    let placeholder = code[0].shift();\r\n    tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]})\r\n    // getting all the comment before the line of TLDR\r\n    while(!code[0].includes('TLDR')){\r\n        placeholder = code[0].join(\" \").trim();\r\n        if(placeholder != \"\"){\r\n            tableOfLexemes.push({value:placeholder,description:'Comment'});\r\n        }\r\n        code.shift();\r\n        tableOfLexemes.push({value:'\\n',description:'Line Break'});\r\n        // if there is no TLDR present in the code\r\n        if(code.length == 0) return `Syntax Error in line ${lineNumber}: Expected end of Multi-Line Comment.`;\r\n        code[0]=code[0].trim().split(\" \");\r\n        lineNumber++;\r\n    }\r\n    const indexTLDR = code[0].indexOf(\"TLDR\");\r\n    // if there is comment before TLDR\r\n    if(indexTLDR != 0){\r\n        placeholder = code[0].slice(0,indexTLDR).join(\" \").trim();\r\n        tableOfLexemes.push({value:placeholder,description:'Comment'});\r\n    }\r\n    tableOfLexemes.push({value:'TLDR',description:keywords['TLDR'][1]});\r\n    code[0] = code[0].slice(indexTLDR+1,code[0].length).join(\" \").trim().split();\r\n    return [code, tableOfLexemes, lineNumber];\r\n}\r\n\r\n// literal abstraction //optimized\r\nconst literal_abs = (code,tableOfLexemes,lineNumber) => {\r\n    let placeholder = code[0].shift(),change = true;\r\n    if(literal[\"NUMBAR\"][0].test(placeholder)){\r\n        tableOfLexemes.push({value:placeholder, description: literal[\"NUMBAR\"][1]});\r\n    }else if(literal[\"NUMBR\"][0].test(placeholder)){\r\n        tableOfLexemes.push({value:placeholder, description: literal[\"NUMBR\"][1]});\r\n    }else if(literal[\"YARN\"][0].test(placeholder)){\r\n        tableOfLexemes.push({value:placeholder, description: literal[\"YARN\"][1]});\r\n    }else if(literal[\"TROOF\"][0].test(placeholder)){\r\n        tableOfLexemes.push({value:placeholder, description: literal[\"TROOF\"][1]});\r\n    }else{\r\n        code[0].unshift(placeholder);\r\n        change = false;\r\n    }\r\n    return [code,tableOfLexemes, lineNumber,change];\r\n}\r\n\r\n// identifier abstraction //optimized\r\nconst identifier_abs = (code,tableOfLexemes,lineNumber) => {\r\n    let placeholder;\r\n    placeholder = code[0].shift();\r\n    if(keywords[placeholder] || [\"WIN\",\"FAIL\"].includes(placeholder) || !identifier[0].test(placeholder)){\r\n        return `Syntax Error in line ${lineNumber}: Expected Identifier: ${placeholder}.`;\r\n    }else{\r\n        tableOfLexemes.push({value:placeholder, description: identifier[1]});\r\n    }\r\n    return [code,tableOfLexemes, lineNumber];\r\n}\r\n\r\n// operands abstraction\r\nconst operands_abs = (code,tableOfLexemes,lineNumber,type) => {\r\n    let error,changed;\r\n    // literal\r\n    [code,tableOfLexemes, lineNumber, changed] = literal_abs(code,tableOfLexemes,lineNumber);\r\n    // expression\r\n    if(!changed){\r\n        error = expression_abs(code,tableOfLexemes,lineNumber,type);\r\n        // check if error\r\n        if(!Array.isArray(error)) return error;\r\n        [code,tableOfLexemes, lineNumber, changed] = error;\r\n    }\r\n    // identifier\r\n    if(!changed){\r\n        error = identifier_abs(code,tableOfLexemes,lineNumber);\r\n        // check if error\r\n        if(!Array.isArray(error)) return error;\r\n        [code,tableOfLexemes, lineNumber] = error;\r\n    }\r\n    return [code,tableOfLexemes, lineNumber];\r\n}\r\n\r\n// output abstraction //optimized\r\nconst output_abs = (code,tableOfLexemes,lineNumber) => {\r\n    let placeholder = code[0].shift() , nonewline = \"\", error;\r\n    tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\r\n    while(true){\r\n        if(tableOfLexemes[tableOfLexemes.length-1].value == \"VISIBLE\" && (code[0].join(\" \").trim().split(\" \")[0] == \"BTW\" || code[0].length == 0)){\r\n            return `Syntax Error in line ${lineNumber}: Missing Operands after ${tableOfLexemes[tableOfLexemes.length-1].value}.`;\r\n        }else if(code[0].join(\" \").trim().split(\" \")[0] == \"BTW\" || code[0].length == 0){\r\n            break;\r\n        }else if(code[0].join(\" \").trim().split(\" \")[0] == \"!\"){\r\n            // no new line encountered\r\n            code[0] = code[0].join(\" \").trim().split(\" \");\r\n            code[0].shift()\r\n            tableOfLexemes.push({value:\"!\",description:\"No newline output\"});\r\n            continue;\r\n        }else if(tableOfLexemes[tableOfLexemes.length-1].value == \"!\" && code.length != 0){\r\n            // if there is operation after ! beside inline comment\r\n            return `Syntax Error in line ${lineNumber}: Expected end of Expression: ${code[0].join(\" \").trim()}.`;\r\n        }else if(code[0][0] == \"\"){\r\n            // if there is exceeding whitespace in between the operation\r\n            return `Syntax Error in line ${lineNumber}: Exceeding whitespace.`;\r\n        }\r\n        // no new line encountered beside an operand\r\n        if(code[0][0][code[0][0].length-1] == \"!\"){\r\n            nonewline = \"!\";\r\n            code[0][0] = code[0][0].slice(0,code[0][0].length-1);     \r\n        }\r\n        //operands\r\n        error = operands_abs(code,tableOfLexemes,lineNumber, true);\r\n        // check if error\r\n        if(!Array.isArray(error)) return error;\r\n        [code,tableOfLexemes, lineNumber] = error;\r\n        // push no new line\r\n        if(nonewline == \"!\"){\r\n            tableOfLexemes.push({value:\"!\",description:\"No newline output\"});\r\n        }\r\n    }\r\n    return [code,tableOfLexemes, lineNumber];\r\n}\r\n\r\n// input abstraction //optimized\r\nconst input_abs = (code,tableOfLexemes,lineNumber) => {\r\n    let placeholder = code[0].shift();\r\n    tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\r\n    if(code[0].length == 0){\r\n        return `Syntax Error in line ${lineNumber}: Missing Operands after ${tableOfLexemes[tableOfLexemes.length-1].value}.`;\r\n    }\r\n    if(code[0][0] == \"\"){\r\n        // if there is exceeding whitespace in between the operation\r\n        return `Syntax Error in line ${lineNumber}: Exceeding whitespace.`;\r\n    }\r\n    // identifier\r\n    const error = identifier_abs(code,tableOfLexemes,lineNumber);\r\n    // check if error\r\n    if(!Array.isArray(error)) return error;\r\n    [code,tableOfLexemes, lineNumber] = error;\r\n    return [code,tableOfLexemes, lineNumber];\r\n}\r\n\r\n// variable initialization //optimized\r\nconst initialization_var_abs = (code,tableOfLexemes,lineNumber) => {\r\n    let placeholder = code[0].shift(),error;\r\n    tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\r\n    if(code[0].length == 0){\r\n        return `Syntax Error in line ${lineNumber}: Missing Operands after ${tableOfLexemes[tableOfLexemes.length-1].value}.`;\r\n    }\r\n    if(code[0][0] == \"\"){\r\n        // if there is exceeding whitespace in between the operation\r\n        return `Syntax Error in line ${lineNumber}: Exceeding whitespace.`;\r\n    }\r\n    if(code[0][0] == \"A\" ){\r\n        //type init\r\n        error = type_init_abs(code,tableOfLexemes,lineNumber);\r\n        // check if error\r\n        if(!Array.isArray(error)) return error;\r\n        [code,tableOfLexemes, lineNumber] = error;\r\n    }else{\r\n        //operands\r\n        error = operands_abs(code,tableOfLexemes,lineNumber, true);\r\n        // check if error\r\n        if(!Array.isArray(error)) return error;\r\n        [code,tableOfLexemes, lineNumber] = error;\r\n    }\r\n    return [code,tableOfLexemes, lineNumber];\r\n}\r\n\r\n// variable declaration //optimized\r\nconst declaration_var_abs = (code,tableOfLexemes,lineNumber) => {\r\n    let placeholder = code[0].shift();\r\n    tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\r\n    if(code[0].length == 0){\r\n        return `Syntax Error in line ${lineNumber}: Missing Operands after ${tableOfLexemes[tableOfLexemes.length-1].value}.`;\r\n    }\r\n    if(code[0][0] == \"\"){\r\n        // if there is exceeding whitespace in between the operation\r\n        return `Syntax Error in line ${lineNumber}: Exceeding whitespace.`;\r\n    }\r\n    // identifier\r\n    let error = identifier_abs(code,tableOfLexemes,lineNumber);\r\n    // check if error   \r\n    if(!Array.isArray(error)) return error;\r\n    [code,tableOfLexemes, lineNumber] = error;\r\n    tableOfLexemes[tableOfLexemes.length-1].description = \"Variable Identifier\";\r\n    // if special IT identifier\r\n    if(tableOfLexemes[tableOfLexemes.length-1].value == \"IT\"){\r\n        placeholder = tableOfLexemes.pop();\r\n        return `Syntax Error in line ${lineNumber}: ${placeholder.value} is a Special Identifier.`;\r\n    }\r\n    if(code[0][0] == \"\"){\r\n        // if there is exceeding whitespace in between the operation\r\n        return `Syntax Error in line ${lineNumber}: Exceeding whitespace.`;\r\n    }\r\n    if(code[0][0] == \"ITZ\"){\r\n        // initialization\r\n        error = initialization_var_abs(code,tableOfLexemes,lineNumber);\r\n        // check if error\r\n        if(!Array.isArray(error)) return error;\r\n        [code,tableOfLexemes, lineNumber] = error;\r\n    }\r\n    return [code,tableOfLexemes, lineNumber];\r\n}\r\n\r\n// variable assignment //optimized\r\nconst assignment_var_abs = (code,tableOfLexemes,lineNumber)=>{\r\n    let placeholder;\r\n    // identifier\r\n    let error = identifier_abs(code,tableOfLexemes,lineNumber);\r\n    // check if error\r\n    if(!Array.isArray(error)) return error;\r\n    [code,tableOfLexemes, lineNumber] = error;\r\n    if(code[0][0] == \"\"){\r\n        // if there is exceeding whitespace in between the operation\r\n        return `Syntax Error in line ${lineNumber}: Exceeding whitespace.`;\r\n    }else if(code[0][0] == \"R\"){\r\n        placeholder = code[0].shift();\r\n        tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});  \r\n    }else{\r\n        // if inproper use of R\r\n        return `Syntax Error in line ${lineNumber}: Invalid Operation: ${code[0][0]}.`;\r\n    }\r\n    if(code[0].length == 0){\r\n        return `Syntax Error in line ${lineNumber}: Missing Operands after ${tableOfLexemes[tableOfLexemes.length-1].value}.`;\r\n    }\r\n    if(code[0][0] == \"\"){\r\n        // if there is exceeding whitespace in between the operation\r\n        return `Syntax Error in line ${lineNumber}: Exceeding whitespace.`;\r\n    }\r\n    if(code[0][0] == \"MAEK\"){\r\n        //operands\r\n        error = typecast_expr_abs(code,tableOfLexemes,lineNumber, true);\r\n        // check if error\r\n        if(!Array.isArray(error)) return error;\r\n        [code,tableOfLexemes, lineNumber] = error;\r\n    }else{\r\n        //operands\r\n        error = operands_abs(code,tableOfLexemes,lineNumber, true);\r\n        // check if error\r\n        if(!Array.isArray(error)) return error;\r\n        [code,tableOfLexemes, lineNumber] = error;\r\n    }\r\n    return [code,tableOfLexemes, lineNumber];\r\n}\r\n\r\n// arithmetic recursion //optimized\r\nconst arithmetic_recurse_abs = (code,tableOfLexemes,lineNumber) => {\r\n    let placeholder = code[0].shift();\r\n    tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\r\n    let i,error;\r\n    for (i = 0; i < 3; i++){\r\n        if(code[0].length == 0){\r\n            return `Syntax Error in line ${lineNumber}: Missing Operands after ${tableOfLexemes[tableOfLexemes.length-1].value}.`;\r\n        }\r\n        if(code[0][0] == \"\"){\r\n            // if there is exceeding whitespace in between the operation\r\n            return `Syntax Error in line ${lineNumber}: Exceeding whitespace.`;\r\n        }\r\n        if(i != 1){\r\n            //operands\r\n            error = operands_abs(code,tableOfLexemes,lineNumber, true);\r\n            // check if error\r\n            if(!Array.isArray(error)) return error;\r\n            [code,tableOfLexemes, lineNumber] = error;\r\n        }else if(code[0][0] == \"AN\"){\r\n            placeholder = code[0].shift();\r\n            tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\r\n        }else{\r\n            // if inproper use of AN\r\n            return `Syntax Error in line ${lineNumber}: Invalid Operation: ${code[0][0]}.`;\r\n        }\r\n    }\r\n    return [code,tableOfLexemes, lineNumber];\r\n}\r\n\r\n// boolean operations op abstraction  //optimized\r\nconst boolean_operands_abs = (code, tableOfLexemes, lineNumber, type) => {\r\n    let error, changed = false;\r\n    if(code[0][1] && keywords[[code[0][0],code[0][1]].join(\" \")] && keywords[[code[0][0],code[0][1]].join(\" \")][0] == \"Boolean\"){\r\n        // boolean operations\r\n        code[0].unshift([code[0].shift(),code[0].shift()].join(\" \"));\r\n        error = boolean_recurse_abs(code,tableOfLexemes,lineNumber);\r\n        changed = true;\r\n    }else if(code[0][0] == \"NOT\"){\r\n        // not operations\r\n        error = boolean_recurse_abs(code,tableOfLexemes,lineNumber);\r\n        changed = true;\r\n    }else if(type && code[0][1] && keywords[[code[0][0],code[0][1]].join(\" \")] && keywords[[code[0][0],code[0][1]].join(\" \")][0] == \"Boolean Many\"){\r\n        // boolean many operations\r\n        code[0].unshift([code[0].shift(),code[0].shift()].join(\" \"));\r\n        error = boolean_many_recurse_abs(code,tableOfLexemes,lineNumber);\r\n        changed = true;\r\n    }else if(keywords[code[0][0]] && keywords[code[0][0]][0] == 'Comparison'){\r\n        // comparison different\r\n        error = comparison_abs(code,tableOfLexemes,lineNumber);\r\n        changed = true;\r\n    }else if(code[0][1]==\"SAEM\" && (keywords[[code[0][0],code[0][1]].join(\" \")][0] == \"Comparison\")){\r\n        // comparison same\r\n        code[0].unshift([code[0].shift(),code[0].shift()].join(\" \"));\r\n        error = comparison_abs(code,tableOfLexemes,lineNumber);\r\n        changed = true;\r\n    }\r\n    if(changed){\r\n        // check if error\r\n        if(!Array.isArray(error)) return error;\r\n        [code,tableOfLexemes, lineNumber] = error;\r\n    }\r\n    return [code,tableOfLexemes, lineNumber,changed];\r\n}\r\n\r\n// boolean recursion abstraction //optimized\r\nconst boolean_recurse_abs = (code,tableOfLexemes,lineNumber) => {\r\n    let placeholder = code[0].shift(),i,error;\r\n    tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\r\n    if(tableOfLexemes[tableOfLexemes.length - 1].value == \"NOT\"){\r\n        if(code[0].length == 0){\r\n            return `Syntax Error in line ${lineNumber}: Missing Operands after ${tableOfLexemes[tableOfLexemes.length-1].value}.`;\r\n        }\r\n        if(code[0][0] == \"\"){\r\n            // if there is exceeding whitespace in between the operation\r\n            return `Syntax Error in line ${lineNumber}: Exceeding whitespace.`;\r\n        }\r\n        //operands\r\n        error = operands_abs(code,tableOfLexemes,lineNumber, true);\r\n        // check if error\r\n        if(!Array.isArray(error)) return error;\r\n        [code,tableOfLexemes, lineNumber] = error;\r\n    }else{\r\n        for (i = 0; i < 3; i++){\r\n            if(code[0].length == 0){\r\n                return `Syntax Error in line ${lineNumber}: Missing Operands after ${tableOfLexemes[tableOfLexemes.length-1].value}.`;\r\n            }\r\n            if(code[0][0] == \"\"){\r\n                // if there is exceeding whitespace in between the operation\r\n                return `Syntax Error in line ${lineNumber}: Exceeding whitespace.`;\r\n            }\r\n            if(i != 1){\r\n                //operands\r\n                error = operands_abs(code,tableOfLexemes,lineNumber, true);\r\n                // check if error\r\n                if(!Array.isArray(error)) return error;\r\n                [code,tableOfLexemes, lineNumber] = error;\r\n            }else if(code[0][0] == \"AN\"){\r\n                placeholder = code[0].shift();\r\n                tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\r\n            }else{\r\n                // if inproper use of AN\r\n                return `Syntax Error in line ${lineNumber}: Invalid Operation: ${code[0][0]}.`;\r\n            }\r\n        }\r\n    }\r\n    return [code,tableOfLexemes, lineNumber];\r\n}\r\n\r\n// boolean many recursion abstraction //optimized\r\nconst boolean_many_recurse_abs = (code,tableOfLexemes,lineNumber) => {\r\n    let placeholder = code[0].shift(),error,cnt=0;\r\n    tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\r\n    while(tableOfLexemes[tableOfLexemes.length-1].value != \"MKAY\"){\r\n        if(code[0].length == 0 && [\"ANY OF\",\"AN\",\"ALL OF\"].includes(tableOfLexemes[tableOfLexemes.length-1].value)){\r\n            return `Syntax Error in line ${lineNumber}: Missing Operands after ${tableOfLexemes[tableOfLexemes.length-1].value}.`;\r\n        }\r\n        if(code[0][0] == \"\"){\r\n            // if there is exceeding whitespace in between the operation\r\n            return `Syntax Error in line ${lineNumber}: Exceeding whitespace.`;\r\n        }\r\n        if([\"ANY OF\",\"AN\",\"ALL OF\"].includes(tableOfLexemes[tableOfLexemes.length-1].value)){\r\n            //operands\r\n            error = operands_abs(code,tableOfLexemes,lineNumber, false);\r\n            // check if error\r\n            if(!Array.isArray(error)) return error;\r\n            [code,tableOfLexemes, lineNumber] = error;\r\n            cnt ++;\r\n        }else if(code[0][0] == \"AN\"){\r\n            placeholder = code[0].shift();\r\n            tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\r\n        }else if(cnt>=2 && code[0][0] == \"MKAY\"){\r\n            placeholder = code[0].shift();\r\n            tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\r\n        }else{\r\n            return `Syntax Error in line ${lineNumber}: Invalid Operation: ${code[0][0]}.`;\r\n        }\r\n    }\r\n    return [code,tableOfLexemes, lineNumber];\r\n}\r\n\r\n// comparison abstraction //optimized\r\nconst comparison_abs = (code,tableOfLexemes,lineNumber) => {\r\n    let placeholder = code[0].shift(),i, error;\r\n    tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\r\n    for (i = 0; i < 3; i++){\r\n        if(code[0].length == 0){\r\n            return `Syntax Error in line ${lineNumber}: Missing Operands after ${tableOfLexemes[tableOfLexemes.length-1].value}.`;\r\n        }\r\n        if(code[0][0] == \"\"){\r\n            // if there is exceeding whitespace in between the operation\r\n            return `Syntax Error in line ${lineNumber}: Exceeding whitespace.`;\r\n        }\r\n        if(i != 1){\r\n            //operands\r\n            error = operands_abs(code,tableOfLexemes,lineNumber, true);\r\n            // check if error\r\n            if(!Array.isArray(error)) return error;\r\n            [code,tableOfLexemes, lineNumber] = error;\r\n        }else if(code[0][0] == \"AN\"){\r\n            placeholder = code[0].shift();\r\n            tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\r\n        }else{\r\n            // if inproper use of AN\r\n            return `Syntax Error in line ${lineNumber}: Invalid Operation: ${code[0][0]}.`;\r\n        }\r\n    }\r\n    return [code,tableOfLexemes, lineNumber];\r\n}\r\n\r\n// expression abstraction //optimized\r\nconst expression_abs = (code, tableOfLexemes, lineNumber, type) => {\r\n    let error,changed = true;\r\n    if(code[0][1] && keywords[[code[0][0],code[0][1]].join(\" \")] && (keywords[[code[0][0],code[0][1]].join(\" \")][0] == \"Arithmetic\")){\r\n        // arithmetic\r\n        code[0].unshift([code[0].shift(),code[0].shift()].join(\" \"));\r\n        error = arithmetic_recurse_abs(code,tableOfLexemes,lineNumber);\r\n        // check if error\r\n        if(!Array.isArray(error)) return error;\r\n        [code,tableOfLexemes, lineNumber] = error;\r\n    }else if(keywords[code[0][0]] && keywords[code[0][0]][0] == 'Concat'){\r\n        // concat\r\n        error = concat_abs(code,tableOfLexemes,lineNumber);\r\n        // check if error\r\n        if(!Array.isArray(error)) return error;\r\n        [code,tableOfLexemes, lineNumber] = error;\r\n    }else{\r\n        // boolean operations\r\n        error = boolean_operands_abs(code,tableOfLexemes,lineNumber,type);\r\n        // check if error\r\n        if(!Array.isArray(error)) return error;\r\n        [code,tableOfLexemes, lineNumber,changed] = error;\r\n    }\r\n    return [code,tableOfLexemes, lineNumber,changed]\r\n}\r\n\r\n// concatenation abstraction //optimized\r\nconst concat_abs = (code,tableOfLexemes,lineNumber) => {\r\n    let placeholder = code[0].shift(),error,cnt = 0;\r\n    tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\r\n    while(tableOfLexemes[tableOfLexemes.length-1].value != \"MKAY\"){\r\n        if(code[0].length == 0 && [\"AN\",\"SMOOSH\"].includes(tableOfLexemes[tableOfLexemes.length-1].value)){\r\n            // lacking operand after AN\r\n            return `Syntax Error in line ${lineNumber}: Missing Operands after ${tableOfLexemes[tableOfLexemes.length-1].value}.`;\r\n        }\r\n        if(cnt < 2 && code[0].join(\" \").trim().split(\" \")[0] == \"BTW\"){\r\n            return `Syntax Error in line ${lineNumber}: Missing Operands after ${tableOfLexemes[tableOfLexemes.length-1].value}.`;\r\n        }else if(cnt >= 2 && tableOfLexemes[tableOfLexemes.length-1].value != \"AN\" && code[0].join(\" \").trim().split(\" \")[0] == \"BTW\" ){\r\n            break;\r\n        }\r\n        if(code[0][0] == \"\"){\r\n            // if there is exceeding whitespace in between the operation\r\n            return `Syntax Error in line ${lineNumber}: Exceeding whitespace.`;\r\n        }\r\n        if([\"AN\",\"SMOOSH\"].includes(tableOfLexemes[tableOfLexemes.length-1].value)){\r\n            //operands\r\n            error = operands_abs(code,tableOfLexemes,lineNumber, true);\r\n            // check if error\r\n            if(!Array.isArray(error)) return error;\r\n            [code,tableOfLexemes, lineNumber] = error;\r\n            cnt++;\r\n        }else if(code[0][0] == \"AN\"){\r\n            placeholder = code[0].shift();\r\n            tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\r\n        }else{\r\n            if(code[0][0] == \"MKAY\" && cnt>=2){\r\n                placeholder = code[0].shift();\r\n                tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\r\n            }else if(cnt>=2){\r\n                break;\r\n            }else{\r\n                // if only one operand present\r\n                return `Syntax Error in line ${lineNumber}: Missing Operands after ${tableOfLexemes[tableOfLexemes.length-1].value}.`;\r\n            }\r\n        }\r\n    }\r\n    return [code,tableOfLexemes, lineNumber];\r\n} \r\n\r\n// if else abstraction //optimized\r\nconst if_else_abs = (code,tableOfLexemes,lineNumber) => {\r\n    let placeholder = code[0].shift(), if_active = false,else_active = false,end=false,error;\r\n    placeholder = placeholder.slice(0,placeholder.length-1);\r\n    tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\r\n    tableOfLexemes.push({value:\"?\",description:'Control Flow Delimiter'});\r\n    while(!end){\r\n        if(code.length == 0){\r\n            return `Syntax Error in line ${lineNumber-1}: Expected End of Flow Control.`;\r\n        }\r\n        if(code[0].length == 0){\r\n            // encounter new line\r\n            code.shift();\r\n            lineNumber++;\r\n            tableOfLexemes.push({value:'\\n',description:'Line Break'});\r\n            if(code.length != 0){\r\n                code[0]=code[0].trim().split(\" \");\r\n                error = yarn_token_abs(code,lineNumber);\r\n                if(!Array.isArray(error)) return error;\r\n                [code, lineNumber] = error;\r\n            }\r\n            continue;\r\n        }else if (code[0][1] && [code[0][0],code[0][1]].join(\" \") == \"YA RLY\" && !if_active){\r\n            placeholder = [code[0].shift(),code[0].shift()].join(\" \");\r\n            tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\r\n            if_active = true;\r\n        }else if(code[0][0] == \"MEBBE\" && if_active && !else_active){\r\n            placeholder = code[0].shift();\r\n            tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\r\n            if(code[0].length == 0){\r\n                return `Syntax Error in line ${lineNumber}: Missing Operation after ${placeholder}.`;\r\n            }\r\n            if(code[0][0] == \"\"){\r\n                // if there is exceeding whitespace in between the operation\r\n                return `Syntax Error in line ${lineNumber}: Exceeding whitespace.`;\r\n            }\r\n            //operands\r\n            error = operands_abs(code,tableOfLexemes,lineNumber, true);\r\n            // check if error\r\n            if(!Array.isArray(error)) return error;\r\n            [code,tableOfLexemes, lineNumber] = error;   \r\n        }else if(code[0][1] && [code[0][0],code[0][1]].join(\" \") == \"NO WAI\" && if_active && !else_active){\r\n            placeholder = [code[0].shift(),code[0].shift()].join(\" \");\r\n            tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\r\n            else_active = true;\r\n        }else if(code[0][0] == \"OIC\" && else_active){\r\n            placeholder = code[0].shift();\r\n            tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\r\n            end = true;\r\n        }else if(if_active){\r\n            error = statement_abs(code,tableOfLexemes,lineNumber);\r\n            if(!Array.isArray(error)) return error;\r\n            [code,tableOfLexemes, lineNumber] = error;\r\n        }\r\n        if(code[0].join(\" \").trim().split(\" \")[0] == \"BTW\"){\r\n            // inline comment\r\n            [code,tableOfLexemes, lineNumber] = inline_comment_abs(code,tableOfLexemes,lineNumber);\r\n        }else if(tableOfLexemes[tableOfLexemes.length - 1].value == \"\\n\" && code[0][0] == 'OBTW'){\r\n            // multiline comment\r\n            error = multiline_comment_abs(code,tableOfLexemes,lineNumber);\r\n            if(!Array.isArray(error)) return error;\r\n            [code,tableOfLexemes, lineNumber] = error;\r\n        }else if(code[0].length != 0 && !if_active){\r\n            // if there is no if\r\n            return `Syntax Error in line ${lineNumber}: Expected start of Flow Control: ${code[0].join(\" \").trim()}.`;\r\n        }else if(code[0].length != 0){\r\n            // if there is operation after the identifier\r\n            return `Syntax Error in line ${lineNumber}: Expected end of Expression: ${code[0].join(\" \").trim()}.`;\r\n        }\r\n    }\r\n    return [code,tableOfLexemes, lineNumber];\r\n}\r\n\r\n// Switch Case Abstraction //optimized\r\nconst switch_case_abs = (code,tableOfLexemes,lineNumber) => {\r\n    let placeholder = code[0].shift(),start_active = false,default_active = false,end =false,error;\r\n    placeholder = placeholder.slice(0,placeholder.length-1);\r\n    tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\r\n    tableOfLexemes.push({value:\"?\",description:'Control Flow Delimiter'});\r\n    while(!end){\r\n        if(code.length == 0){\r\n            return `Syntax Error in line ${lineNumber-1}: Expected End of Flow Control.`;\r\n        }\r\n        if(code[0].length == 0){\r\n            // encounter new line\r\n            code.shift();\r\n            lineNumber++;\r\n            tableOfLexemes.push({value:'\\n',description:'Line Break'});\r\n            if(code.length != 0){\r\n                code[0]=code[0].trim().split(\" \");\r\n                error = yarn_token_abs(code,lineNumber);\r\n                if(!Array.isArray(error)) return error;\r\n                [code, lineNumber] = error;\r\n            }\r\n            continue;\r\n        }else if(code[0][0] == \"OMG\"){\r\n            placeholder = code[0].shift();\r\n            tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\r\n            if(code[0].length == 0){\r\n                return `Syntax Error in line ${lineNumber}: Missing Operation after ${placeholder}.`;\r\n            }\r\n            if(code[0][0] == \"\"){\r\n                // if there is exceeding whitespace in between the operation\r\n                return `Syntax Error in line ${lineNumber}: Exceeding whitespace.`;\r\n            }\r\n            //operands\r\n            error = operands_abs(code,tableOfLexemes,lineNumber, true);\r\n            // check if error\r\n            if(!Array.isArray(error)) return error;\r\n            [code,tableOfLexemes, lineNumber] = error;\r\n            start_active = true;   \r\n        }else if(code[0][0] == \"OMGWTF\" && start_active && !default_active){\r\n            placeholder = code[0].shift();\r\n            tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\r\n            default_active = true;\r\n        }else if(code[0][0] == \"OIC\" && default_active){\r\n            placeholder = code[0].shift();\r\n            tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\r\n            end = true;\r\n        }else if(code[0][0] == \"GTFO\" && start_active){\r\n            placeholder = code[0].shift();\r\n            tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\r\n        }else if(start_active || default_active){\r\n            error = statement_abs(code,tableOfLexemes,lineNumber);\r\n            if(!Array.isArray(error)) return error;\r\n            [code,tableOfLexemes, lineNumber] = error;\r\n        }\r\n        if(code[0].join(\" \").trim().split(\" \")[0] == \"BTW\"){\r\n            // inline comment\r\n            [code,tableOfLexemes, lineNumber] = inline_comment_abs(code,tableOfLexemes,lineNumber);\r\n        }else if(tableOfLexemes[tableOfLexemes.length - 1].value == \"\\n\" && code[0][0] == 'OBTW'){\r\n            error = multiline_comment_abs(code,tableOfLexemes,lineNumber);\r\n            if(!Array.isArray(error)) return error;\r\n            [code,tableOfLexemes, lineNumber] = error;\r\n        }else if(code[0].length != 0 && !start_active){\r\n            return `Syntax Error in line ${lineNumber}: Expected start of Flow Control: ${code[0].join(\" \").trim()}.`;\r\n        }else if(code[0].length != 0){\r\n            // if there is operation after the identifier\r\n            return `Syntax Error in line ${lineNumber}: Expected end of Expression: ${code[0].join(\" \").trim()}.`;\r\n        }\r\n    }\r\n    return [code,tableOfLexemes, lineNumber];\r\n}\r\n\r\n// loop abstraction\r\nconst loop_abs = (code, tableOfLexemes, lineNumber) => {\r\n    let placeholder = code[0].shift(),error,end=false;\r\n    tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\r\n    if(code[0].length == 0){\r\n        return `Syntax Error in line ${lineNumber}: Missing Operands after ${placeholder}.`;\r\n    }\r\n    if(code[0][0] == \"\"){\r\n        // if there is exceeding whitespace in between the operation\r\n        return `Syntax Error in line ${lineNumber}: Exceeding whitespace.`;\r\n    }\r\n    // for the name of the loop with the YR before\r\n    if(code[0][0] == \"YR\"){\r\n        placeholder = code[0].shift();\r\n        tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\r\n        // identifier\r\n        error = identifier_abs(code,tableOfLexemes,lineNumber);\r\n        // check if error\r\n        if(!Array.isArray(error)) return error;\r\n        [code,tableOfLexemes, lineNumber] = error;\r\n        tableOfLexemes[tableOfLexemes.length-1].description = \"Loop Identifier\";\r\n        if(code[0].length == 0){\r\n            return `Syntax Error in line ${lineNumber}: Missing Operands after ${placeholder}.`;\r\n        }\r\n        if(code[0][0] == \"\"){\r\n            // if there is exceeding whitespace in between the operation\r\n            return `Syntax Error in line ${lineNumber}: Exceeding whitespace.`;\r\n        }\r\n        // increment or decrement with the UPPIN and the NERFIN\r\n        if(code[0][0] == \"UPPIN\" | code[0][0] == \"NERFIN\"){\r\n            placeholder = code[0].shift();\r\n            tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\r\n            if(code[0].length == 0){\r\n                return `Syntax Error in line ${lineNumber}: Missing Operands after ${placeholder}.`;\r\n            }\r\n            if(code[0][0] == \"\"){\r\n                // if there is exceeding whitespace in between the operation\r\n                return `Syntax Error in line ${lineNumber}: Exceeding whitespace.`;\r\n            }\r\n            // variable to be incremented with YR before\r\n            if(code[0][0] == \"YR\"){\r\n                placeholder = code[0].shift();\r\n                tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\r\n                // identifier\r\n                error = identifier_abs(code,tableOfLexemes,lineNumber);\r\n                // check if error\r\n                if(!Array.isArray(error)) return error;\r\n                [code,tableOfLexemes, lineNumber] = error;\r\n                // the conditionals in the loop\r\n                if(code[0][0] == \"TIL\" | code[0][0] == \"WILE\"){\r\n                    placeholder = code[0].shift();\r\n                    tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\r\n                    if(code[0].length == 0){\r\n                        return `Syntax Error in line ${lineNumber}: Missing Operands after ${placeholder}.`;\r\n                    }\r\n                    if(code[0][0] == \"\"){\r\n                        // if there is exceeding whitespace in between the operation\r\n                        return `Syntax Error in line ${lineNumber}: Exceeding whitespace.`;\r\n                    }\r\n                    // the condition\r\n                    //operands\r\n                    error = operands_abs(code,tableOfLexemes,lineNumber, true);\r\n                    // check if error\r\n                    if(!Array.isArray(error)) return error;\r\n                    [code,tableOfLexemes, lineNumber] = error;\r\n                    // body of the loop\r\n                    while(!end){\r\n                        if(code.length == 0){\r\n                            return `Syntax Error in line ${lineNumber-1}: Expected End of the Loop.`;\r\n                        }\r\n                        if(code[0].length == 0){\r\n                            // encounter new line\r\n                            code.shift();\r\n                            lineNumber++;\r\n                            tableOfLexemes.push({value:'\\n',description:'Line Break'});\r\n                            if(code.length != 0){\r\n                                code[0]=code[0].trim().split(\" \");\r\n                                error = yarn_token_abs(code,lineNumber);\r\n                                if(!Array.isArray(error)) return error;\r\n                                [code, lineNumber] = error;\r\n                            }\r\n                            continue;\r\n                        }else if(code[0][1] && [code[0][0],code[0][1]].join(\" \") == \"IM OUTTA\"){\r\n                            // loop code delimiter\r\n                            placeholder = [code[0].shift(),code[0].shift()].join(' ');\r\n                            tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\r\n                            if(code[0].length == 0){\r\n                                return `Syntax Error in line ${lineNumber}: Missing Operands after ${placeholder}.`;\r\n                            }\r\n                            if(code[0][0] == \"\"){\r\n                                // if there is exceeding whitespace in between the operation\r\n                                return `Syntax Error in line ${lineNumber}: Exceeding whitespace.`;\r\n                            }\r\n                            // name of the loop after the YR\r\n                            if(code[0][0] == \"YR\"){\r\n                                placeholder = code[0].shift();\r\n                                tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\r\n                                if(code[0].length == 0){\r\n                                    return `Syntax Error in line ${lineNumber}: Missing Operands after ${placeholder}.`;\r\n                                }\r\n                                if(code[0][0] == \"\"){\r\n                                    // if there is exceeding whitespace in between the operation\r\n                                    return `Syntax Error in line ${lineNumber}: Exceeding whitespace.`;\r\n                                }\r\n                                // identifier\r\n                                error = identifier_abs(code,tableOfLexemes,lineNumber);\r\n                                // check if error\r\n                                if(!Array.isArray(error)) return error;\r\n                                [code,tableOfLexemes, lineNumber] = error;\r\n                            }else{\r\n                                return `Syntax Error in line ${lineNumber}: Invalid Operation: ${code[0][0]}.`;\r\n                            }\r\n                            end = true\r\n                        }else{\r\n                            // body of the loop\r\n                            error = statement_abs(code,tableOfLexemes,lineNumber);\r\n                            if(!Array.isArray(error)) return error;\r\n                            [code,tableOfLexemes, lineNumber] = error;\r\n                        }\r\n                        if(code[0].join(\" \").trim().split(\" \")[0] == \"BTW\"){\r\n                            // inline comment\r\n                            [code,tableOfLexemes, lineNumber] = inline_comment_abs(code,tableOfLexemes,lineNumber);\r\n                        }else if(code[0].length != 0){\r\n                            // if there is operation after the identifier\r\n                            return `Syntax Error in line ${lineNumber}: Expected end of Expression: ${code[0].join(\" \").trim()}.`;\r\n                        }\r\n                    }\r\n                }else{\r\n                    return `Syntax Error in line ${lineNumber}: Invalid Operation: ${code[0][0]}.`;\r\n                }\r\n            }else{\r\n                return `Syntax Error in line ${lineNumber}: Invalid Operation: ${code[0][0]}.`;\r\n            }\r\n        }else{\r\n            return `Syntax Error in line ${lineNumber}: Invalid Operation: ${code[0][0]}.`;\r\n        }\r\n    }else{\r\n        return `Syntax Error in line ${lineNumber}: Invalid Operation: ${code[0][0]}.`;\r\n    }\r\n    return [code,tableOfLexemes, lineNumber];\r\n}\r\n\r\n// statement abstraction //optimized\r\nconst statement_abs = (code,tableOfLexemes,lineNumber) => {\r\n    let error,changed = true;\r\n    [code,tableOfLexemes, lineNumber, changed] = literal_abs(code,tableOfLexemes,lineNumber);\r\n    if(!changed){\r\n        error = expression_abs(code,tableOfLexemes,lineNumber, true);\r\n        // check if error\r\n        if(!Array.isArray(error)) return error;\r\n        [code,tableOfLexemes, lineNumber, changed] = error;\r\n    }\r\n    if(!changed){\r\n        changed = true;\r\n        if(code[0][0] == \"BTW\"){\r\n            error = inline_comment_abs(code,tableOfLexemes,lineNumber);\r\n        }else if(code[0][0] == \"OBTW\"){\r\n            error = multiline_comment_abs(code,tableOfLexemes,lineNumber);\r\n        }else if(code[0][0] == \"VISIBLE\"){\r\n            error = output_abs(code,tableOfLexemes,lineNumber);\r\n        }else if(code[0][0] == \"GIMMEH\"){\r\n            error = input_abs(code,tableOfLexemes,lineNumber);\r\n        }else if(code[0][1] && code[0][2] && keywords[[code[0][0],code[0][1],code[0][2]].join(\" \")] && (keywords[[code[0][0],code[0][1],code[0][2]].join(\" \")][0] == \"Declare Var\")){\r\n            code[0].unshift([code[0].shift(),code[0].shift(),code[0].shift()].join(\" \"));\r\n            error = declaration_var_abs(code,tableOfLexemes,lineNumber);\r\n        }else if(code[0].includes(\"R\")){\r\n            error = assignment_var_abs(code,tableOfLexemes,lineNumber);\r\n        }else if(code[0][1] && keywords[[code[0][0],code[0][1].slice(0,code[0][1].length-1)].join(\" \")] && (keywords[[code[0][0],code[0][1].slice(0,code[0][1].length-1)].join(\" \")][0] == \"If-Else\")){\r\n            code[0].unshift([code[0].shift(),code[0].shift()].join(\" \"));\r\n            error = if_else_abs(code,tableOfLexemes,lineNumber);\r\n        }else if(code[0][1] && keywords[[code[0][0],code[0][1]].join(\" \")] && (keywords[[code[0][0],code[0][1]].join(\" \")][0] == \"Loop\")){\r\n            code[0].unshift([code[0].shift(),code[0].shift()].join(\" \"));\r\n            error = loop_abs(code,tableOfLexemes,lineNumber);\r\n        }else if(code[0][0] == \"WTF?\"){\r\n            error = switch_case_abs(code,tableOfLexemes,lineNumber);\r\n        }else if(code[0][0] == \"MAEK\"){\r\n            error = typecast_expr_abs(code,tableOfLexemes,lineNumber);\r\n        }else if(code[0].join(' ').includes(\"IS NOW\")){\r\n            error = typecast_var_abs(code,tableOfLexemes,lineNumber);\r\n        }else if([\"TLDR\",\"OIC\"].includes(code[0][0])){\r\n            return `Syntax Error in line ${lineNumber}: Expected Starting Flow-Control Structure: ${code[0].join(\" \").trim()}.`;\r\n        }else{\r\n            changed = false;\r\n        }\r\n        if(changed){\r\n            // check if error\r\n            if(!Array.isArray(error)) return error;\r\n            [code,tableOfLexemes, lineNumber] = error;\r\n            if(code.length == 0){\r\n                return [code,tableOfLexemes, lineNumber];\r\n            }\r\n        }\r\n    }\r\n    if(!changed){\r\n        // identifier\r\n        error = identifier_abs(code,tableOfLexemes,lineNumber);\r\n        // check if error\r\n        if(!Array.isArray(error)) return error;\r\n        [code,tableOfLexemes, lineNumber] = error;            \r\n    }\r\n    if(code[0].length != 0){\r\n        if(code[0].join(\" \").trim().split(\" \")[0] == \"BTW\"){\r\n            code[0] = code[0].join(\" \").trim().split(\" \");\r\n            // inline comment\r\n            [code,tableOfLexemes, lineNumber] = inline_comment_abs(code,tableOfLexemes,lineNumber);\r\n        }else if(code[0].length != 0){\r\n            // if there is operation after the identifier\r\n            return `Syntax Error in line ${lineNumber}: Expected end of Expression: ${code[0].join(\" \").trim()}.`;\r\n        }\r\n    }\r\n    return [code,tableOfLexemes, lineNumber]; \r\n}\r\n\r\n// type casting of expression //optimized\r\nconst typecast_expr_abs = (code, tableOfLexemes, lineNumber) =>{\r\n    let placeholder = code[0].shift(),error;\r\n    tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\r\n    if(code[0].length == 0){\r\n        return `Syntax Error in line ${lineNumber}: Missing Operands after ${placeholder}.`;\r\n    }\r\n    if(code[0][0] == \"\"){\r\n        // if there is exceeding whitespace in between the operation\r\n        return `Syntax Error in line ${lineNumber}: Exceeding whitespace.`;\r\n    }\r\n    //operands\r\n    error = operands_abs(code,tableOfLexemes,lineNumber, true);\r\n    // check if error\r\n    if(!Array.isArray(error)) return error;\r\n    [code,tableOfLexemes, lineNumber] = error;\r\n    // typecasting to data type\r\n    if(code[0][0] == \"A\" ){\r\n        //type init\r\n        error = type_init_abs(code,tableOfLexemes,lineNumber);\r\n        // check if error\r\n        if(!Array.isArray(error)) return error;\r\n        [code,tableOfLexemes, lineNumber] = error;\r\n    }else{\r\n        return `Syntax Error in line ${lineNumber}: Missing Operands after ${tableOfLexemes[tableOfLexemes.length - 1].value}.`;\r\n    }\r\n    return [code,tableOfLexemes, lineNumber];\r\n}\r\n\r\n// type casting of var\r\nconst typecast_var_abs = (code,tableOfLexemes,lineNumber) => {\r\n    let placeholder;\r\n    // identifier\r\n    let error = identifier_abs(code,tableOfLexemes,lineNumber);\r\n    // check if error\r\n    if(!Array.isArray(error)) return error;\r\n    [code,tableOfLexemes, lineNumber] = error;\r\n    if(code[0][0] == \"\"){\r\n        // if there is exceeding whitespace in between the operation\r\n        return `Syntax Error in line ${lineNumber}: Exceeding whitespace.`;\r\n    }else if(code[0][1] && [code[0][0],code[0][1]].join(\" \") == \"IS NOW\"){\r\n        placeholder = [code[0].shift(),code[0].shift()].join(' ');\r\n        tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});  \r\n    }else{\r\n        // if inproper use of IS NOW\r\n        return `Syntax Error in line ${lineNumber}: Invalid Operation: ${code[0][0]}.`;\r\n    }\r\n    // typecasting to data type\r\n    if(code[0][0] == \"A\" ){\r\n        //type init\r\n        error = type_init_abs(code,tableOfLexemes,lineNumber);\r\n        // check if error\r\n        if(!Array.isArray(error)) return error;\r\n        [code,tableOfLexemes, lineNumber] = error;\r\n    }else{\r\n        return `Syntax Error in line ${lineNumber}: Missing Operands after ${tableOfLexemes[tableOfLexemes.length - 1].value}.`;\r\n    }\r\n    return [code,tableOfLexemes, lineNumber];\r\n}\r\n\r\n// type initialization abstraction //optimized\r\nconst type_init_abs = (code, tableOfLexemes,lineNumber) => {\r\n    let placeholder = code[0].shift();\r\n    tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\r\n    if(code[0].length == 0){\r\n        return `Syntax Error in line ${lineNumber}: Missing Operands after ${placeholder}.`;\r\n    }\r\n    if(code[0][0] == \"\"){\r\n        // if there is exceeding whitespace in between the operation\r\n        return `Syntax Error in line ${lineNumber}: Exceeding whitespace.`;\r\n    }\r\n    if(types[code[0][0]]){\r\n        // data types\r\n        placeholder = code[0].shift();\r\n        tableOfLexemes.push({value:placeholder,description:types[placeholder][1]});\r\n    }else{\r\n        return `Syntax Error in line ${lineNumber}: Expected Data Type`;\r\n    }\r\n    return [code,tableOfLexemes, lineNumber];\r\n}\r\n\r\n// yarn tokenizer and joiner abs\r\nconst yarn_token_abs = (code,lineNumber) => {\r\n    let index1,index2;\r\n    while(true){\r\n        index1 = code[0].findIndex((word)=>literal[\"YARN1\"][0].test(word));\r\n        if(index1 == -1) break;\r\n        index2 = code[0].findIndex((word,index)=>((literal[\"YARN2\"][0].test(word) || /(^[\\\"\\'][^\\\"\\']*[\\\"\\']\\!$)/.test(word)) && index != index1));\r\n        if(index2>-1){\r\n            code[0][index1] = code[0].slice(index1,index2+1).join(\" \");\r\n            code[0] = code[0].slice(0,index1+1).concat(code[0].slice(index2+1,code[0].length));\r\n        }else{\r\n            // if lacking closing \"\r\n            return `Syntax Error in line ${lineNumber}: Unexpected Sequence: ${code[0].slice(index1,code[0].length).join(\" \").trim()}.`;\r\n        }\r\n    }\r\n    return [code,lineNumber];\r\n}\r\n\r\n// start program \r\nconst program_abs = (code,tableOfLexemes,lineNumber) =>{\r\n    let start = false, end = false,placeholder,error;\r\n    code = code.split(\"\\n\");\r\n    while(code.length !=0 ){\r\n        if(!Array.isArray(code[0])){\r\n            // new line of code encountered\r\n            code[0] = code[0].trim().split(\" \");\r\n            // when there is no content in the line\r\n            if(code[0][0] == ''){\r\n                code[0].shift();\r\n                lineNumber++;\r\n                continue;\r\n            }\r\n            // yarn tokenizer\r\n            error = yarn_token_abs(code,lineNumber);\r\n            if(!Array.isArray(error)) return error;\r\n            [code, lineNumber] = error;\r\n            continue;\r\n        }else if(code[0].length == 0){\r\n            // if new line encountered\r\n            code.shift();\r\n            lineNumber++;\r\n            tableOfLexemes.push({value:'\\n',description:'Line Break'});\r\n            continue;\r\n        }\r\n        if(code[0].join(\" \").trim().split(\" \")[0] == \"BTW\"){\r\n            // inline comment\r\n            [code,tableOfLexemes, lineNumber] = inline_comment_abs(code,tableOfLexemes,lineNumber);\r\n            continue;\r\n        }else if((!start || (end && tableOfLexemes[tableOfLexemes.length-1].value == \"\\n\")) && code[0][0] == 'OBTW'){\r\n            // multiline comment\r\n            error = multiline_comment_abs(code,tableOfLexemes,lineNumber);\r\n            if(!Array.isArray(error)) return error;\r\n            [code,tableOfLexemes, lineNumber] = error;\r\n            continue;\r\n        }\r\n        if(!start && code[0][0] == \"HAI\"){\r\n            placeholder = code[0].shift();\r\n            tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\r\n            start = true;\r\n        }else if(start && code[0][0] == \"KTHXBYE\"){\r\n            placeholder = code[0].shift();\r\n            tableOfLexemes.push({value:placeholder,description:keywords[placeholder][1]});\r\n            end = true;\r\n        }else if(start && !end){\r\n            // main body of the program\r\n            error = statement_abs(code,tableOfLexemes,lineNumber);\r\n            if(!Array.isArray(error)) return error;\r\n            [code,tableOfLexemes, lineNumber] = error;\r\n        }else if(start && code[0].length != 0){\r\n            return `Syntax Error in line ${lineNumber}: Expected end of Expression: ${code[0].join(\" \").trim()}.`;\r\n        }else{\r\n            return `Syntax Error in line ${lineNumber}: Expected start of the program.`;\r\n        }\r\n    }\r\n    if(!end){\r\n        return `Syntax Error in line ${lineNumber}: Expected end of the program.`;\r\n    }\r\n    return [code,tableOfLexemes, lineNumber]; \r\n}\r\n\r\nexport default program_abs","C:\\Users\\cjpri\\Desktop\\124 project my branch\\LOLCODE_Project\\src\\gui components\\fourthFrame.js",["200"],"import React, { useState } from 'react';\r\nimport { Button } from 'antd';\r\nimport '../App.css';\r\n\r\nfunction FourthFrame(props) {\r\n\r\n  return(\r\n    <div className=\"fourthFrame\">\r\n        <Button className=\"executeButton\" shape = {'round'} onClick = {(event) => props.setButtonEventClick(event.type)}> Execute </Button>\r\n    </div>\r\n  )\r\n}\r\nexport default FourthFrame\r\n","C:\\Users\\cjpri\\Desktop\\124 project my branch\\LOLCODE_Project\\src\\gui components\\secondFrame.js",["201","202","203","204"],"C:\\Users\\cjpri\\Desktop\\124 project my branch\\LOLCODE_Project\\src\\gui components\\lexemes.js",["205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221"],"exports.keywords = \r\n    {\r\n        \"HAI\":['Start','Code Delimiter Keyword'],\r\n        \"KTHXBYE\":['End','Code Delimiter Keyword'],\r\n        \"BTW\":['Comment','Line Comment Keyword'],\r\n        \"OBTW\":['Multi-Line Comment Start','Comment Delimiter Keyword'],\r\n        \"TLDR\":['Multi-Line Comment End','Comment Delimiter Keyword'],\r\n        \"I HAS A\":['Declare Var','Variable Declaration Keyword'],\r\n        \"ITZ\":['Initialize Var','Variable Initialization Keyword'],\r\n        \"R\":['Assigment Var','Variable Assignment Keyword'],\r\n        \"SUM OF\":['Arithmetic','Addition Operation Keyword'],\r\n        \"DIFF OF\":['Arithmetic','Subtraction Operation Keyword'],\r\n        \"PRODUKT OF\":['Arithmetic','Multiplication Operation Keyword'],\r\n        \"QUOSHUNT OF\":['Arithmetic','Division Operation Keyword'],\r\n        \"MOD OF\":['Arithmetic','Modulo Operation Keyword'],\r\n        \"BIGGR OF\":['Arithmetic','Max Operation Keyword'],\r\n        \"SMALLR OF\":['Arithmetic','Min Operation Keyword'],\r\n        \"BOTH OF\":['Boolean','AND Operation Keyword'],\r\n        \"EITHER OF\":['Boolean','OR Operation Keyword'],\r\n        \"WON OF\":['Boolean','XOR Operation Keyword'],\r\n        \"NOT\":['Boolean','NOT Operation Keyword'],\r\n        \"ANY OF\":['Boolean Many','OR Delimiter Operation Keyword'],\r\n        \"ALL OF\":['Boolean Many','AND Delimiter Operation Keyword'],\r\n        \"BOTH SAEM\":['Comparison','Equal Operation Keyword'],\r\n        \"DIFFRINT\":['Comparison','Not Equal Operation Keyword'],\r\n        \"SMOOSH\":['Concat','Concatenation Operation Keyword'],\r\n        \"MAEK\":['Declare Typecast','Type Casting Declaration Keyword'],\r\n        \"IS NOW\":['Initialize Typecast','Type Casting Initialization Keyword'],\r\n        \"A\":['Type Keyword','Type Keyword'],\r\n        \"VISIBLE\":['Output','Output Keyword'],\r\n        \"GIMMEH\":['Input','Input Keyword'],\r\n        \"O RLY\":['If-Else','If-Else Delimiter Keyword'],\r\n        \"YA RLY\":['If','If Keyword'],\r\n        \"MEBBE\":['Else-If','Else-If Keyword'],\r\n        \"NO WAI\":['Else','Else Keyword'],\r\n        \"OIC\":['Flow-Control End','Flow-Control Delimiter Keyword'],\r\n        \"WTF\":['Switch','Switch Case Delimiter Keyword'],\r\n        \"OMG\":['Switch Option','Case Keyword'],\r\n        \"OMGWTF\":['Switch Default','Case-Default Keyword'],\r\n        \"GTFO\":['Break','Break Keyword'],\r\n        \"IM IN\":['Loop','Loop Delimiter Keyword'],\r\n        \"YR\":['Loop Delimiter','Loop Parameter Delimiter Keyword'],\r\n        \"UPPIN\":['Loop Inc','Increment Keyword'],\r\n        \"NERFIN\":['Loop Dec','Decrement Keyword'],\r\n        \"TIL\":['Loop Cond','Loop Keyword'],\r\n        \"WILE\":['Loop Cond','Loop Keyword'],\r\n        \"IM OUTTA\":['Loop End','Loop Delimiter Keyword'],\r\n        \"AN\":['Conjunction','Operand Delimiter Keyword'],\r\n        \"NUMBR\":['Type','NUMBR Type Keyword'],\r\n        \"NUMBAR\":['Type','NUMBAR Type Keyword'],\r\n        \"YARN\":['Type','YARN Type Keyword'],\r\n        \"TROOF\":['Type','TROOF Type Keyword'],\r\n        \"MKAY\":['Boolean Many','Infinite Delimiter Keyword'],\r\n    }\r\n\r\n\r\nexports.literals = {\r\n    \"NUMBR\":[/(^\\-?[0-9]+$)/,'NUMBR Literal'],\r\n    \"NUMBAR\":[/(^\\-?[0-9]+\\.[0-9]+$)/,'NUMBAR Literal'],\r\n    \"YARN1\":[/(^[\\\"\\'][^\\\"\\']*$)/,'YARN Literal'],\r\n    \"YARN2\":[/(^[^\\\"\\']*[\\\"\\']$)/,'YARN Literal'],\r\n    \"YARN\":[/(^[\\\"\\'][^\\\"\\']*[\\\"\\']$)/,'YARN Literal'],\r\n    \"TROOF\":[/^((WIN)|(FAIL))$/,'TROOF Literal'],\r\n}\r\n\r\nexports.identifier = [/^([A-Za-z]+[0-9\\_]*)$/,'Identifier']\r\n\r\nexports.types = {\r\n    \"NUMBR\":['Type','NUMBR Type'],\r\n    \"NUMBAR\":['Type','NUMBAR Type'],\r\n    \"YARN\":['Type','YARN Type'],\r\n    \"TROOF\":['Type','TROOF Type'],\r\n    \"NOOB\" : ['Type','NOOB Type'],\r\n}\r\n\r\n",{"ruleId":"222","replacedBy":"223"},{"ruleId":"224","replacedBy":"225"},{"ruleId":"226","severity":1,"message":"227","line":2,"column":7,"nodeType":"228","messageId":"229","endLine":2,"endColumn":9},{"ruleId":"230","severity":1,"message":"231","line":13,"column":23,"nodeType":"232","messageId":"233","endLine":13,"endColumn":25},{"ruleId":"230","severity":1,"message":"231","line":28,"column":24,"nodeType":"232","messageId":"233","endLine":28,"endColumn":26},{"ruleId":"230","severity":1,"message":"234","line":34,"column":24,"nodeType":"232","messageId":"233","endLine":34,"endColumn":26},{"ruleId":"230","severity":1,"message":"231","line":40,"column":18,"nodeType":"232","messageId":"233","endLine":40,"endColumn":20},{"ruleId":"230","severity":1,"message":"234","line":106,"column":58,"nodeType":"232","messageId":"233","endLine":106,"endColumn":60},{"ruleId":"230","severity":1,"message":"234","line":106,"column":114,"nodeType":"232","messageId":"233","endLine":106,"endColumn":116},{"ruleId":"230","severity":1,"message":"234","line":106,"column":141,"nodeType":"232","messageId":"233","endLine":106,"endColumn":143},{"ruleId":"230","severity":1,"message":"234","line":108,"column":57,"nodeType":"232","messageId":"233","endLine":108,"endColumn":59},{"ruleId":"230","severity":1,"message":"234","line":108,"column":84,"nodeType":"232","messageId":"233","endLine":108,"endColumn":86},{"ruleId":"230","severity":1,"message":"234","line":110,"column":57,"nodeType":"232","messageId":"233","endLine":110,"endColumn":59},{"ruleId":"230","severity":1,"message":"234","line":116,"column":64,"nodeType":"232","messageId":"233","endLine":116,"endColumn":66},{"ruleId":"230","severity":1,"message":"231","line":116,"column":86,"nodeType":"232","messageId":"233","endLine":116,"endColumn":88},{"ruleId":"230","severity":1,"message":"234","line":119,"column":29,"nodeType":"232","messageId":"233","endLine":119,"endColumn":31},{"ruleId":"230","severity":1,"message":"234","line":124,"column":44,"nodeType":"232","messageId":"233","endLine":124,"endColumn":46},{"ruleId":"230","severity":1,"message":"234","line":134,"column":22,"nodeType":"232","messageId":"233","endLine":134,"endColumn":24},{"ruleId":"230","severity":1,"message":"234","line":145,"column":23,"nodeType":"232","messageId":"233","endLine":145,"endColumn":25},{"ruleId":"230","severity":1,"message":"234","line":148,"column":19,"nodeType":"232","messageId":"233","endLine":148,"endColumn":21},{"ruleId":"230","severity":1,"message":"234","line":164,"column":23,"nodeType":"232","messageId":"233","endLine":164,"endColumn":25},{"ruleId":"230","severity":1,"message":"234","line":167,"column":19,"nodeType":"232","messageId":"233","endLine":167,"endColumn":21},{"ruleId":"230","severity":1,"message":"234","line":171,"column":19,"nodeType":"232","messageId":"233","endLine":171,"endColumn":21},{"ruleId":"230","severity":1,"message":"234","line":191,"column":23,"nodeType":"232","messageId":"233","endLine":191,"endColumn":25},{"ruleId":"230","severity":1,"message":"234","line":194,"column":19,"nodeType":"232","messageId":"233","endLine":194,"endColumn":21},{"ruleId":"230","severity":1,"message":"234","line":205,"column":54,"nodeType":"232","messageId":"233","endLine":205,"endColumn":56},{"ruleId":"230","severity":1,"message":"234","line":209,"column":19,"nodeType":"232","messageId":"233","endLine":209,"endColumn":21},{"ruleId":"230","severity":1,"message":"234","line":213,"column":19,"nodeType":"232","messageId":"233","endLine":213,"endColumn":21},{"ruleId":"230","severity":1,"message":"234","line":231,"column":19,"nodeType":"232","messageId":"233","endLine":231,"endColumn":21},{"ruleId":"230","severity":1,"message":"234","line":234,"column":25,"nodeType":"232","messageId":"233","endLine":234,"endColumn":27},{"ruleId":"230","severity":1,"message":"234","line":241,"column":23,"nodeType":"232","messageId":"233","endLine":241,"endColumn":25},{"ruleId":"230","severity":1,"message":"234","line":244,"column":19,"nodeType":"232","messageId":"233","endLine":244,"endColumn":21},{"ruleId":"230","severity":1,"message":"234","line":248,"column":19,"nodeType":"232","messageId":"233","endLine":248,"endColumn":21},{"ruleId":"230","severity":1,"message":"234","line":270,"column":27,"nodeType":"232","messageId":"233","endLine":270,"endColumn":29},{"ruleId":"230","severity":1,"message":"234","line":273,"column":23,"nodeType":"232","messageId":"233","endLine":273,"endColumn":25},{"ruleId":"230","severity":1,"message":"231","line":277,"column":14,"nodeType":"232","messageId":"233","endLine":277,"endColumn":16},{"ruleId":"230","severity":1,"message":"234","line":283,"column":29,"nodeType":"232","messageId":"233","endLine":283,"endColumn":31},{"ruleId":"230","severity":1,"message":"234","line":297,"column":116,"nodeType":"232","messageId":"233","endLine":297,"endColumn":118},{"ruleId":"230","severity":1,"message":"234","line":302,"column":25,"nodeType":"232","messageId":"233","endLine":302,"endColumn":27},{"ruleId":"230","severity":1,"message":"234","line":306,"column":130,"nodeType":"232","messageId":"233","endLine":306,"endColumn":132},{"ruleId":"230","severity":1,"message":"234","line":311,"column":62,"nodeType":"232","messageId":"233","endLine":311,"endColumn":64},{"ruleId":"230","severity":1,"message":"234","line":315,"column":24,"nodeType":"232","messageId":"233","endLine":315,"endColumn":26},{"ruleId":"230","severity":1,"message":"234","line":315,"column":84,"nodeType":"232","messageId":"233","endLine":315,"endColumn":86},{"ruleId":"230","severity":1,"message":"234","line":333,"column":56,"nodeType":"232","messageId":"233","endLine":333,"endColumn":58},{"ruleId":"230","severity":1,"message":"234","line":334,"column":27,"nodeType":"232","messageId":"233","endLine":334,"endColumn":29},{"ruleId":"230","severity":1,"message":"234","line":337,"column":23,"nodeType":"232","messageId":"233","endLine":337,"endColumn":25},{"ruleId":"230","severity":1,"message":"234","line":348,"column":31,"nodeType":"232","messageId":"233","endLine":348,"endColumn":33},{"ruleId":"230","severity":1,"message":"234","line":351,"column":27,"nodeType":"232","messageId":"233","endLine":351,"endColumn":29},{"ruleId":"230","severity":1,"message":"231","line":355,"column":18,"nodeType":"232","messageId":"233","endLine":355,"endColumn":20},{"ruleId":"230","severity":1,"message":"234","line":361,"column":33,"nodeType":"232","messageId":"233","endLine":361,"endColumn":35},{"ruleId":"230","severity":1,"message":"231","line":377,"column":57,"nodeType":"232","messageId":"233","endLine":377,"endColumn":59},{"ruleId":"230","severity":1,"message":"234","line":378,"column":27,"nodeType":"232","messageId":"233","endLine":378,"endColumn":29},{"ruleId":"230","severity":1,"message":"234","line":381,"column":23,"nodeType":"232","messageId":"233","endLine":381,"endColumn":25},{"ruleId":"230","severity":1,"message":"234","line":392,"column":29,"nodeType":"232","messageId":"233","endLine":392,"endColumn":31},{"ruleId":"230","severity":1,"message":"234","line":395,"column":39,"nodeType":"232","messageId":"233","endLine":395,"endColumn":41},{"ruleId":"230","severity":1,"message":"234","line":410,"column":27,"nodeType":"232","messageId":"233","endLine":410,"endColumn":29},{"ruleId":"230","severity":1,"message":"234","line":413,"column":23,"nodeType":"232","messageId":"233","endLine":413,"endColumn":25},{"ruleId":"230","severity":1,"message":"231","line":417,"column":14,"nodeType":"232","messageId":"233","endLine":417,"endColumn":16},{"ruleId":"230","severity":1,"message":"234","line":423,"column":29,"nodeType":"232","messageId":"233","endLine":423,"endColumn":31},{"ruleId":"230","severity":1,"message":"234","line":437,"column":117,"nodeType":"232","messageId":"233","endLine":437,"endColumn":119},{"ruleId":"230","severity":1,"message":"234","line":444,"column":62,"nodeType":"232","messageId":"233","endLine":444,"endColumn":64},{"ruleId":"230","severity":1,"message":"231","line":464,"column":57,"nodeType":"232","messageId":"233","endLine":464,"endColumn":59},{"ruleId":"230","severity":1,"message":"234","line":465,"column":27,"nodeType":"232","messageId":"233","endLine":465,"endColumn":29},{"ruleId":"230","severity":1,"message":"234","line":469,"column":62,"nodeType":"232","messageId":"233","endLine":469,"endColumn":64},{"ruleId":"230","severity":1,"message":"231","line":471,"column":76,"nodeType":"232","messageId":"233","endLine":471,"endColumn":78},{"ruleId":"230","severity":1,"message":"234","line":471,"column":126,"nodeType":"232","messageId":"233","endLine":471,"endColumn":128},{"ruleId":"230","severity":1,"message":"234","line":474,"column":23,"nodeType":"232","messageId":"233","endLine":474,"endColumn":25},{"ruleId":"230","severity":1,"message":"234","line":485,"column":29,"nodeType":"232","messageId":"233","endLine":485,"endColumn":31},{"ruleId":"230","severity":1,"message":"234","line":489,"column":27,"nodeType":"232","messageId":"233","endLine":489,"endColumn":29},{"ruleId":"230","severity":1,"message":"234","line":510,"column":24,"nodeType":"232","messageId":"233","endLine":510,"endColumn":26},{"ruleId":"230","severity":1,"message":"234","line":513,"column":27,"nodeType":"232","messageId":"233","endLine":513,"endColumn":29},{"ruleId":"230","severity":1,"message":"231","line":518,"column":28,"nodeType":"232","messageId":"233","endLine":518,"endColumn":30},{"ruleId":"230","severity":1,"message":"234","line":525,"column":67,"nodeType":"232","messageId":"233","endLine":525,"endColumn":69},{"ruleId":"230","severity":1,"message":"234","line":529,"column":29,"nodeType":"232","messageId":"233","endLine":529,"endColumn":31},{"ruleId":"230","severity":1,"message":"234","line":532,"column":31,"nodeType":"232","messageId":"233","endLine":532,"endColumn":33},{"ruleId":"230","severity":1,"message":"234","line":535,"column":27,"nodeType":"232","messageId":"233","endLine":535,"endColumn":29},{"ruleId":"230","severity":1,"message":"234","line":544,"column":66,"nodeType":"232","messageId":"233","endLine":544,"endColumn":68},{"ruleId":"230","severity":1,"message":"234","line":548,"column":29,"nodeType":"232","messageId":"233","endLine":548,"endColumn":31},{"ruleId":"230","severity":1,"message":"234","line":557,"column":51,"nodeType":"232","messageId":"233","endLine":557,"endColumn":53},{"ruleId":"230","severity":1,"message":"234","line":560,"column":66,"nodeType":"232","messageId":"233","endLine":560,"endColumn":68},{"ruleId":"230","severity":1,"message":"234","line":560,"column":88,"nodeType":"232","messageId":"233","endLine":560,"endColumn":90},{"ruleId":"230","severity":1,"message":"231","line":565,"column":33,"nodeType":"232","messageId":"233","endLine":565,"endColumn":35},{"ruleId":"230","severity":1,"message":"231","line":568,"column":33,"nodeType":"232","messageId":"233","endLine":568,"endColumn":35},{"ruleId":"230","severity":1,"message":"234","line":583,"column":24,"nodeType":"232","messageId":"233","endLine":583,"endColumn":26},{"ruleId":"230","severity":1,"message":"234","line":586,"column":27,"nodeType":"232","messageId":"233","endLine":586,"endColumn":29},{"ruleId":"230","severity":1,"message":"231","line":591,"column":28,"nodeType":"232","messageId":"233","endLine":591,"endColumn":30},{"ruleId":"230","severity":1,"message":"234","line":598,"column":29,"nodeType":"232","messageId":"233","endLine":598,"endColumn":31},{"ruleId":"230","severity":1,"message":"234","line":601,"column":31,"nodeType":"232","messageId":"233","endLine":601,"endColumn":33},{"ruleId":"230","severity":1,"message":"234","line":604,"column":27,"nodeType":"232","messageId":"233","endLine":604,"endColumn":29},{"ruleId":"230","severity":1,"message":"234","line":614,"column":29,"nodeType":"232","messageId":"233","endLine":614,"endColumn":31},{"ruleId":"230","severity":1,"message":"234","line":618,"column":29,"nodeType":"232","messageId":"233","endLine":618,"endColumn":31},{"ruleId":"230","severity":1,"message":"234","line":622,"column":29,"nodeType":"232","messageId":"233","endLine":622,"endColumn":31},{"ruleId":"230","severity":1,"message":"234","line":630,"column":51,"nodeType":"232","messageId":"233","endLine":630,"endColumn":53},{"ruleId":"230","severity":1,"message":"234","line":633,"column":66,"nodeType":"232","messageId":"233","endLine":633,"endColumn":68},{"ruleId":"230","severity":1,"message":"234","line":633,"column":88,"nodeType":"232","messageId":"233","endLine":633,"endColumn":90},{"ruleId":"230","severity":1,"message":"231","line":637,"column":33,"nodeType":"232","messageId":"233","endLine":637,"endColumn":35},{"ruleId":"230","severity":1,"message":"231","line":639,"column":33,"nodeType":"232","messageId":"233","endLine":639,"endColumn":35},{"ruleId":"230","severity":1,"message":"234","line":651,"column":23,"nodeType":"232","messageId":"233","endLine":651,"endColumn":25},{"ruleId":"230","severity":1,"message":"234","line":654,"column":19,"nodeType":"232","messageId":"233","endLine":654,"endColumn":21},{"ruleId":"230","severity":1,"message":"234","line":659,"column":19,"nodeType":"232","messageId":"233","endLine":659,"endColumn":21},{"ruleId":"230","severity":1,"message":"234","line":668,"column":27,"nodeType":"232","messageId":"233","endLine":668,"endColumn":29},{"ruleId":"230","severity":1,"message":"234","line":671,"column":23,"nodeType":"232","messageId":"233","endLine":671,"endColumn":25},{"ruleId":"230","severity":1,"message":"234","line":676,"column":23,"nodeType":"232","messageId":"233","endLine":676,"endColumn":25},{"ruleId":"230","severity":1,"message":"234","line":676,"column":47,"nodeType":"232","messageId":"233","endLine":676,"endColumn":49},{"ruleId":"230","severity":1,"message":"234","line":679,"column":31,"nodeType":"232","messageId":"233","endLine":679,"endColumn":33},{"ruleId":"230","severity":1,"message":"234","line":682,"column":27,"nodeType":"232","messageId":"233","endLine":682,"endColumn":29},{"ruleId":"230","severity":1,"message":"234","line":687,"column":27,"nodeType":"232","messageId":"233","endLine":687,"endColumn":29},{"ruleId":"230","severity":1,"message":"234","line":696,"column":31,"nodeType":"232","messageId":"233","endLine":696,"endColumn":33},{"ruleId":"230","severity":1,"message":"234","line":696,"column":53,"nodeType":"232","messageId":"233","endLine":696,"endColumn":55},{"ruleId":"230","severity":1,"message":"234","line":699,"column":39,"nodeType":"232","messageId":"233","endLine":699,"endColumn":41},{"ruleId":"230","severity":1,"message":"234","line":702,"column":35,"nodeType":"232","messageId":"233","endLine":702,"endColumn":37},{"ruleId":"230","severity":1,"message":"234","line":714,"column":40,"nodeType":"232","messageId":"233","endLine":714,"endColumn":42},{"ruleId":"230","severity":1,"message":"234","line":717,"column":43,"nodeType":"232","messageId":"233","endLine":717,"endColumn":45},{"ruleId":"230","severity":1,"message":"231","line":722,"column":44,"nodeType":"232","messageId":"233","endLine":722,"endColumn":46},{"ruleId":"230","severity":1,"message":"234","line":729,"column":82,"nodeType":"232","messageId":"233","endLine":729,"endColumn":84},{"ruleId":"230","severity":1,"message":"234","line":733,"column":47,"nodeType":"232","messageId":"233","endLine":733,"endColumn":49},{"ruleId":"230","severity":1,"message":"234","line":736,"column":43,"nodeType":"232","messageId":"233","endLine":736,"endColumn":45},{"ruleId":"230","severity":1,"message":"234","line":741,"column":43,"nodeType":"232","messageId":"233","endLine":741,"endColumn":45},{"ruleId":"230","severity":1,"message":"234","line":744,"column":51,"nodeType":"232","messageId":"233","endLine":744,"endColumn":53},{"ruleId":"230","severity":1,"message":"234","line":747,"column":47,"nodeType":"232","messageId":"233","endLine":747,"endColumn":49},{"ruleId":"230","severity":1,"message":"234","line":766,"column":67,"nodeType":"232","messageId":"233","endLine":766,"endColumn":69},{"ruleId":"230","severity":1,"message":"231","line":769,"column":49,"nodeType":"232","messageId":"233","endLine":769,"endColumn":51},{"ruleId":"230","severity":1,"message":"234","line":801,"column":23,"nodeType":"232","messageId":"233","endLine":801,"endColumn":25},{"ruleId":"230","severity":1,"message":"234","line":803,"column":29,"nodeType":"232","messageId":"233","endLine":803,"endColumn":31},{"ruleId":"230","severity":1,"message":"234","line":805,"column":29,"nodeType":"232","messageId":"233","endLine":805,"endColumn":31},{"ruleId":"230","severity":1,"message":"234","line":807,"column":29,"nodeType":"232","messageId":"233","endLine":807,"endColumn":31},{"ruleId":"230","severity":1,"message":"234","line":809,"column":163,"nodeType":"232","messageId":"233","endLine":809,"endColumn":165},{"ruleId":"230","severity":1,"message":"234","line":814,"column":185,"nodeType":"232","messageId":"233","endLine":814,"endColumn":187},{"ruleId":"230","severity":1,"message":"234","line":817,"column":127,"nodeType":"232","messageId":"233","endLine":817,"endColumn":129},{"ruleId":"230","severity":1,"message":"234","line":820,"column":29,"nodeType":"232","messageId":"233","endLine":820,"endColumn":31},{"ruleId":"230","severity":1,"message":"234","line":822,"column":29,"nodeType":"232","messageId":"233","endLine":822,"endColumn":31},{"ruleId":"230","severity":1,"message":"234","line":835,"column":28,"nodeType":"232","messageId":"233","endLine":835,"endColumn":30},{"ruleId":"230","severity":1,"message":"231","line":847,"column":23,"nodeType":"232","messageId":"233","endLine":847,"endColumn":25},{"ruleId":"230","severity":1,"message":"234","line":848,"column":51,"nodeType":"232","messageId":"233","endLine":848,"endColumn":53},{"ruleId":"230","severity":1,"message":"231","line":852,"column":33,"nodeType":"232","messageId":"233","endLine":852,"endColumn":35},{"ruleId":"230","severity":1,"message":"234","line":864,"column":23,"nodeType":"232","messageId":"233","endLine":864,"endColumn":25},{"ruleId":"230","severity":1,"message":"234","line":867,"column":19,"nodeType":"232","messageId":"233","endLine":867,"endColumn":21},{"ruleId":"230","severity":1,"message":"234","line":877,"column":19,"nodeType":"232","messageId":"233","endLine":877,"endColumn":21},{"ruleId":"230","severity":1,"message":"234","line":897,"column":19,"nodeType":"232","messageId":"233","endLine":897,"endColumn":21},{"ruleId":"230","severity":1,"message":"234","line":900,"column":62,"nodeType":"232","messageId":"233","endLine":900,"endColumn":64},{"ruleId":"230","severity":1,"message":"234","line":908,"column":19,"nodeType":"232","messageId":"233","endLine":908,"endColumn":21},{"ruleId":"230","severity":1,"message":"234","line":924,"column":23,"nodeType":"232","messageId":"233","endLine":924,"endColumn":25},{"ruleId":"230","severity":1,"message":"234","line":927,"column":19,"nodeType":"232","messageId":"233","endLine":927,"endColumn":21},{"ruleId":"230","severity":1,"message":"234","line":946,"column":19,"nodeType":"232","messageId":"233","endLine":946,"endColumn":21},{"ruleId":"235","severity":1,"message":"236","line":947,"column":36,"nodeType":"237","messageId":"238","endLine":947,"endColumn":146},{"ruleId":"239","severity":1,"message":"240","line":947,"column":90,"nodeType":"241","messageId":"242","endLine":947,"endColumn":91,"suggestions":"243"},{"ruleId":"239","severity":1,"message":"244","line":947,"column":92,"nodeType":"241","messageId":"242","endLine":947,"endColumn":93,"suggestions":"245"},{"ruleId":"239","severity":1,"message":"240","line":947,"column":97,"nodeType":"241","messageId":"242","endLine":947,"endColumn":98,"suggestions":"246"},{"ruleId":"239","severity":1,"message":"244","line":947,"column":99,"nodeType":"241","messageId":"242","endLine":947,"endColumn":100,"suggestions":"247"},{"ruleId":"239","severity":1,"message":"240","line":947,"column":104,"nodeType":"241","messageId":"242","endLine":947,"endColumn":105,"suggestions":"248"},{"ruleId":"239","severity":1,"message":"244","line":947,"column":106,"nodeType":"241","messageId":"242","endLine":947,"endColumn":107,"suggestions":"249"},{"ruleId":"239","severity":1,"message":"250","line":947,"column":109,"nodeType":"241","messageId":"242","endLine":947,"endColumn":110,"suggestions":"251"},{"ruleId":"230","severity":1,"message":"231","line":947,"column":136,"nodeType":"232","messageId":"233","endLine":947,"endColumn":138},{"ruleId":"230","severity":1,"message":"231","line":963,"column":23,"nodeType":"232","messageId":"233","endLine":963,"endColumn":25},{"ruleId":"230","severity":1,"message":"234","line":968,"column":27,"nodeType":"232","messageId":"233","endLine":968,"endColumn":29},{"ruleId":"230","severity":1,"message":"234","line":978,"column":33,"nodeType":"232","messageId":"233","endLine":978,"endColumn":35},{"ruleId":"230","severity":1,"message":"234","line":985,"column":51,"nodeType":"232","messageId":"233","endLine":985,"endColumn":53},{"ruleId":"230","severity":1,"message":"234","line":989,"column":83,"nodeType":"232","messageId":"233","endLine":989,"endColumn":85},{"ruleId":"230","severity":1,"message":"234","line":989,"column":107,"nodeType":"232","messageId":"233","endLine":989,"endColumn":109},{"ruleId":"230","severity":1,"message":"234","line":996,"column":33,"nodeType":"232","messageId":"233","endLine":996,"endColumn":35},{"ruleId":"230","severity":1,"message":"234","line":1000,"column":38,"nodeType":"232","messageId":"233","endLine":1000,"endColumn":40},{"ruleId":"230","severity":1,"message":"231","line":1009,"column":42,"nodeType":"232","messageId":"233","endLine":1009,"endColumn":44},{"ruleId":"226","severity":1,"message":"252","line":1,"column":17,"nodeType":"228","messageId":"229","endLine":1,"endColumn":25},{"ruleId":"253","severity":1,"message":"254","line":28,"column":7,"nodeType":"255","endLine":28,"endColumn":9,"suggestions":"256"},{"ruleId":"230","severity":1,"message":"234","line":32,"column":36,"nodeType":"232","messageId":"233","endLine":32,"endColumn":38},{"ruleId":"230","severity":1,"message":"231","line":38,"column":56,"nodeType":"232","messageId":"233","endLine":38,"endColumn":58},{"ruleId":"253","severity":1,"message":"257","line":49,"column":7,"nodeType":"255","endLine":49,"endColumn":31,"suggestions":"258"},{"ruleId":"239","severity":1,"message":"259","line":58,"column":17,"nodeType":"241","messageId":"242","endLine":58,"endColumn":18,"suggestions":"260"},{"ruleId":"239","severity":1,"message":"259","line":59,"column":18,"nodeType":"241","messageId":"242","endLine":59,"endColumn":19,"suggestions":"261"},{"ruleId":"239","severity":1,"message":"240","line":60,"column":18,"nodeType":"241","messageId":"242","endLine":60,"endColumn":19,"suggestions":"262"},{"ruleId":"239","severity":1,"message":"244","line":60,"column":20,"nodeType":"241","messageId":"242","endLine":60,"endColumn":21,"suggestions":"263"},{"ruleId":"239","severity":1,"message":"240","line":60,"column":25,"nodeType":"241","messageId":"242","endLine":60,"endColumn":26,"suggestions":"264"},{"ruleId":"239","severity":1,"message":"244","line":60,"column":27,"nodeType":"241","messageId":"242","endLine":60,"endColumn":28,"suggestions":"265"},{"ruleId":"239","severity":1,"message":"240","line":61,"column":19,"nodeType":"241","messageId":"242","endLine":61,"endColumn":20,"suggestions":"266"},{"ruleId":"239","severity":1,"message":"244","line":61,"column":21,"nodeType":"241","messageId":"242","endLine":61,"endColumn":22,"suggestions":"267"},{"ruleId":"239","severity":1,"message":"240","line":61,"column":26,"nodeType":"241","messageId":"242","endLine":61,"endColumn":27,"suggestions":"268"},{"ruleId":"239","severity":1,"message":"244","line":61,"column":28,"nodeType":"241","messageId":"242","endLine":61,"endColumn":29,"suggestions":"269"},{"ruleId":"239","severity":1,"message":"240","line":62,"column":17,"nodeType":"241","messageId":"242","endLine":62,"endColumn":18,"suggestions":"270"},{"ruleId":"239","severity":1,"message":"244","line":62,"column":19,"nodeType":"241","messageId":"242","endLine":62,"endColumn":20,"suggestions":"271"},{"ruleId":"239","severity":1,"message":"240","line":62,"column":24,"nodeType":"241","messageId":"242","endLine":62,"endColumn":25,"suggestions":"272"},{"ruleId":"239","severity":1,"message":"244","line":62,"column":26,"nodeType":"241","messageId":"242","endLine":62,"endColumn":27,"suggestions":"273"},{"ruleId":"239","severity":1,"message":"240","line":62,"column":31,"nodeType":"241","messageId":"242","endLine":62,"endColumn":32,"suggestions":"274"},{"ruleId":"239","severity":1,"message":"244","line":62,"column":33,"nodeType":"241","messageId":"242","endLine":62,"endColumn":34,"suggestions":"275"},{"ruleId":"239","severity":1,"message":"276","line":66,"column":39,"nodeType":"241","messageId":"242","endLine":66,"endColumn":40,"suggestions":"277"},"no-native-reassign",["278"],"no-negated-in-lhs",["279"],"no-unused-vars","'fs' is assigned a value but never used.","Identifier","unusedVar","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'index1'.","ArrowFunctionExpression","unsafeRefs","no-useless-escape","Unnecessary escape character: \\\".","Literal","unnecessaryEscape",["280","281"],"Unnecessary escape character: \\'.",["282","283"],["284","285"],["286","287"],["288","289"],["290","291"],"Unnecessary escape character: \\!.",["292","293"],"'useState' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.buttonEventClick'. Either include it or remove the dependency array.","ArrayExpression",["294"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["295"],"Unnecessary escape character: \\-.",["296","297"],["298","299"],["300","301"],["302","303"],["304","305"],["306","307"],["308","309"],["310","311"],["312","313"],["314","315"],["316","317"],["318","319"],["320","321"],["322","323"],["324","325"],["326","327"],"Unnecessary escape character: \\_.",["328","329"],"no-global-assign","no-unsafe-negation",{"messageId":"330","fix":"331","desc":"332"},{"messageId":"333","fix":"334","desc":"335"},{"messageId":"330","fix":"336","desc":"332"},{"messageId":"333","fix":"337","desc":"335"},{"messageId":"330","fix":"338","desc":"332"},{"messageId":"333","fix":"339","desc":"335"},{"messageId":"330","fix":"340","desc":"332"},{"messageId":"333","fix":"341","desc":"335"},{"messageId":"330","fix":"342","desc":"332"},{"messageId":"333","fix":"343","desc":"335"},{"messageId":"330","fix":"344","desc":"332"},{"messageId":"333","fix":"345","desc":"335"},{"messageId":"330","fix":"346","desc":"332"},{"messageId":"333","fix":"347","desc":"335"},{"desc":"348","fix":"349"},{"desc":"350","fix":"351"},{"messageId":"330","fix":"352","desc":"332"},{"messageId":"333","fix":"353","desc":"335"},{"messageId":"330","fix":"354","desc":"332"},{"messageId":"333","fix":"355","desc":"335"},{"messageId":"330","fix":"356","desc":"332"},{"messageId":"333","fix":"357","desc":"335"},{"messageId":"330","fix":"358","desc":"332"},{"messageId":"333","fix":"359","desc":"335"},{"messageId":"330","fix":"360","desc":"332"},{"messageId":"333","fix":"361","desc":"335"},{"messageId":"330","fix":"362","desc":"332"},{"messageId":"333","fix":"363","desc":"335"},{"messageId":"330","fix":"364","desc":"332"},{"messageId":"333","fix":"365","desc":"335"},{"messageId":"330","fix":"366","desc":"332"},{"messageId":"333","fix":"367","desc":"335"},{"messageId":"330","fix":"368","desc":"332"},{"messageId":"333","fix":"369","desc":"335"},{"messageId":"330","fix":"370","desc":"332"},{"messageId":"333","fix":"371","desc":"335"},{"messageId":"330","fix":"372","desc":"332"},{"messageId":"333","fix":"373","desc":"335"},{"messageId":"330","fix":"374","desc":"332"},{"messageId":"333","fix":"375","desc":"335"},{"messageId":"330","fix":"376","desc":"332"},{"messageId":"333","fix":"377","desc":"335"},{"messageId":"330","fix":"378","desc":"332"},{"messageId":"333","fix":"379","desc":"335"},{"messageId":"330","fix":"380","desc":"332"},{"messageId":"333","fix":"381","desc":"335"},{"messageId":"330","fix":"382","desc":"332"},{"messageId":"333","fix":"383","desc":"335"},{"messageId":"330","fix":"384","desc":"332"},{"messageId":"333","fix":"385","desc":"335"},"removeEscape",{"range":"386","text":"387"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"388","text":"389"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"390","text":"387"},{"range":"391","text":"389"},{"range":"392","text":"387"},{"range":"393","text":"389"},{"range":"394","text":"387"},{"range":"395","text":"389"},{"range":"396","text":"387"},{"range":"397","text":"389"},{"range":"398","text":"387"},{"range":"399","text":"389"},{"range":"400","text":"387"},{"range":"401","text":"389"},"Update the dependencies array to be: [props.buttonEventClick]",{"range":"402","text":"403"},"Update the dependencies array to be: [props, props.buttonEventClick]",{"range":"404","text":"405"},{"range":"406","text":"387"},{"range":"407","text":"389"},{"range":"408","text":"387"},{"range":"409","text":"389"},{"range":"410","text":"387"},{"range":"411","text":"389"},{"range":"412","text":"387"},{"range":"413","text":"389"},{"range":"414","text":"387"},{"range":"415","text":"389"},{"range":"416","text":"387"},{"range":"417","text":"389"},{"range":"418","text":"387"},{"range":"419","text":"389"},{"range":"420","text":"387"},{"range":"421","text":"389"},{"range":"422","text":"387"},{"range":"423","text":"389"},{"range":"424","text":"387"},{"range":"425","text":"389"},{"range":"426","text":"387"},{"range":"427","text":"389"},{"range":"428","text":"387"},{"range":"429","text":"389"},{"range":"430","text":"387"},{"range":"431","text":"389"},{"range":"432","text":"387"},{"range":"433","text":"389"},{"range":"434","text":"387"},{"range":"435","text":"389"},{"range":"436","text":"387"},{"range":"437","text":"389"},{"range":"438","text":"387"},{"range":"439","text":"389"},[46058,46059],"",[46058,46058],"\\",[46060,46061],[46060,46060],[46065,46066],[46065,46065],[46067,46068],[46067,46067],[46072,46073],[46072,46072],[46074,46075],[46074,46074],[46077,46078],[46077,46077],[1057,1059],"[props.buttonEventClick]",[1877,1901],"[props, props.buttonEventClick]",[3032,3033],[3032,3032],[3081,3082],[3081,3081],[3139,3140],[3139,3139],[3141,3142],[3141,3141],[3146,3147],[3146,3146],[3148,3149],[3148,3148],[3192,3193],[3192,3192],[3194,3195],[3194,3194],[3199,3200],[3199,3199],[3201,3202],[3201,3201],[3242,3243],[3242,3242],[3244,3245],[3244,3244],[3249,3250],[3249,3249],[3251,3252],[3251,3251],[3256,3257],[3256,3256],[3258,3259],[3258,3258],[3377,3378],[3377,3377]]
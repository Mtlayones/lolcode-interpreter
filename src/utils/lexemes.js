export const listoflexemes = [
    [/(^HAI ?)/g, ['Keyword','Code Delimiter']],
    [/(^KTHXBYE ?)/g, ['Keyword','Code Delimiter']],
    [/(^BTW ?)/g, ['Keyword','Line Comment Keyword']],
    [/(^OBTW ?)/g, ['Keyword','Comment Delimiter']],
    [/(^TLDR ?)/g, ['Keyword','Comment Delimiter']],
    [/(^I HAS A ?)/g, ['Keyword','Variable Declaration']],
    [/(^ITZ ?)/g, ['Keyword','Variable Initialization']],
    [/(^R ?)/g, ['Keyword','Variable Assignment']],
    [/(^SUM OF ?)/g, ['Keyword','Addition Operation']],
    [/(^DIFF OF ?)/g, ['Keyword','Subtraction Operation']],
    [/(^PRODUKT OF ?)/g, ['Keyword','Multiplication Operation']],
    [/(^QUOSHUNT OF ?)/g, ['Keyword','Division Operation']],
    [/(^MOD OF ?)/g, ['Keyword','Modulo Operation']],
    [/(^BIGGR OF ?)/g, ['Keyword','Max Operation']],
    [/(^SMALLR OF ?)/g, ['Keyword','Min Operation']],
    [/(^BOTH OF ?)/g, ['Keyword','AND Operation']],
    [/(^EITHER OF ?)/g, ['Keyword','OR Operation']],
    [/(^WON OF ?)/g, ['Keyword','XOR Operation']],
    [/(^NOT ?)/g, ['Keyword','NOT Operation']],
    [/(^ANY OF ?)/g, ['Keyword','AND Delimiter']],
    [/(^ALL OF ?)/g, ['Keyword','OR Delimiter']],
    [/(^BOTH SAEM ?)/g, ['Keyword','Equal Operation']],
    [/(^DIFFRINT ?)/g, ['Keyword','Not Equal Operation']],
    [/(^SMOOSH ?)/g, ['Keyword','Concatenation Operation']],
    [/(^MAEK ?)/g, ['Keyword','Type Casting Declaration']],
    [/(^A ?)/g, ['Keyword','Special Keyword']],
    [/(^IS NOW A ?)/g, ['Keyword','Type Casting Initialization']],
    [/(^VISIBLE ?)/g, ['Keyword','Output Operation']],
    [/(^GIMMEH ?)/g, ['Keyword','Input Operation']],
    [/(^O RLY\? ?)/g, ['Keyword','If-Else Delimiter']],
    [/(^YA RLY\? ?)/g, ['Keyword','If Operation']],
    [/(^MEBBE ?)/g, ['Keyword','Else-If Operation']],
    [/(^NO WAI ?)/g, ['Keyword','Else Operation']],
    [/(^OIC ?)/g, ['Keyword','Flow-Control Delimiter']],
    [/(^WTF ?)/g, ['Keyword','Switch Case Delimiter']],
    [/(^OMG ?)/g, ['Keyword','Case Operation']],
    [/(^OMGWTF ?)/g, ['Keyword','Case-Default Operation']],
    [/(^IM IN YR ?)/g, ['Keyword','Loop Delimiter']],
    [/(^UPPIN ?)/g, ['Keyword','Increment Operation']],
    [/(^NERFIN ?)/g, ['Keyword','Decrement Operation']],
    [/(^YR ?)/g, ['Keyword','Function Identifier']],
    [/(^TIL ?)/g, ['Keyword','Loop Operation']],
    [/(^WILE ?)/g, ['Keyword','Loop Operation']],
    [/(^IM OUTTA YR ?)/g, ['Keyword','Loop Delimiter']],
    [/(^AN ?)/g, ['Keyword','Operand Delimiter']],
    [/(^\" ?)/g, ['Keyword','String Delimiter']],
    [/(^\-?[0-9]+ ?)/g, ['Literal','NUMBR Literal']],
    [/(^\-?[0-9]+\.[0-9]+ ?)/g, ['Literal','NUMBAR Literal']],
    [/(^\"[^\"]*\" ?)/g, ['Literal','YARN Literal']],
    [/^((WIN)|(FAIL)) ?/g, ['Literal','TROOF Literal']],
    [/^([A-Za-z]+[0-9\_]*) ?/g, ['Identifier','Identifier']],
]

const lexemes = {
    "HAI":[/(^HAI)/g, ['Keyword','Code Delimiter']],
    "KTHXBYE":[/(^KTHXBYE)/g, ['Keyword','Code Delimiter']],
    "BTW":[/(^BTW)/g, ['Keyword','Line Comment Keyword']],
    "OBTW":[/(^OBTW)/g, ['Keyword','Comment Delimiter']],
    "TLDR":[/(^TLDR)/g, ['Keyword','Comment Delimiter']],
    "I HAS A":[/(^I HAS A)/g, ['Keyword','Variable Declaration']],
    "ITZ":[/(^ITZ)/g, ['Keyword','Variable Initialization']],
    "R":[/(^R)/g, ['Keyword','Variable Assignment']],
    "SUM OF":[/(^SUM OF)/g, ['Keyword','Addition Operation']],
    "DIFF OF":[/(^DIFF OF)/g, ['Keyword','Subtraction Operation']],
    "PRODUKT OF":[/(^PRODUKT OF)/g, ['Keyword','Multiplication Operation']],
    "QUOSHUNT OF":[/(^QUOSHUNT OF)/g, ['Keyword','Division Operation']],
    "MOD OF":[/(^MOD OF)/g, ['Keyword','Modulo Operation']],
    "BIGGR OF":[/(^BIGGR OF)/g, ['Keyword','Max Operation']],
    "SMALLR OF":[/(^SMALLR OF)/g, ['Keyword','Min Operation']],
    "BOTH OF":[/(^BOTH OF)/g, ['Keyword','AND Operation']],
    "EITHER OF":[/(^EITHER OF)/g, ['Keyword','OR Operation']],
    "WON OF":[/(^WON OF)/g, ['Keyword','XOR Operation']],
    "NOT":[/(^NOT)/g, ['Keyword','NOT Operation']],
    "ANY OF":[/(^ANY OF)/g, ['Keyword','AND Delimiter']],
    "ALL OF":[/(^ALL OF)/g, ['Keyword','OR Delimiter']],
    "BOTH SAEM":[/(^BOTH SAEM)/g, ['Keyword','Equal Operation']],
    "DIFFRINT":[/(^DIFFRINT)/g, ['Keyword','Not Equal Operation']],
    "SMOOSH":[/(^SMOOSH)/g, ['Keyword','Concatenation Operation']],
    "MAEK":[/(^MAEK)/g, ['Keyword','Type Casting Declaration']],
    "A":[/(^A)/g, ['Keyword','Special Keyword']],
    "IS NOW A":[/(^IS NOW A)/g, ['Keyword','Type Casting Initialization']],
    "VISIBLE":[/(^VISIBLE)/g, ['Keyword','Output Operation']],
    "GIMMEH":[/(^GIMMEH)/g, ['Keyword','Input Operation']],
    "O RLY":[/(^O RLY\?)/g, ['Keyword','If-Else Delimiter']],
    "YA RLY":[/(^YA RLY\?)/g, ['Keyword','If Operation']],
    "MEBBE":[/(^MEBBE)/g, ['Keyword','Else-If Operation']],
    "NO WAI":[/(^NO WAI)/g, ['Keyword','Else Operation']],
    "OIC":[/(^OIC)/g, ['Keyword','Flow-Control Delimiter']],
    "WTF":[/(^WTF)/g, ['Keyword','Switch Case Delimiter']],
    "OMG":[/(^OMG)/g, ['Keyword','Case Operation']],
    "OMGWTF":[/(^OMGWTF)/g, ['Keyword','Case-Default Operation']],
    "IM IN YR":[/(^IM IN YR)/g, ['Keyword','Loop Delimiter']],
    "UPPIN ":[/(^UPPIN)/g, ['Keyword','Increment Operation']],
    "NERFIN":[/(^NERFIN)/g, ['Keyword','Decrement Operation']],
    "YR":[/(^YR)/g, ['Keyword','Function Identifier']],
    "TIL":[/(^TIL)/g, ['Keyword','Loop Operation']],
    "WILE":[/(^WILE)/g, ['Keyword','Loop Operation']],
    "IM OUTTA YR":[/(^IM OUTTA YR)/g, ['Keyword','Loop Delimiter']],
    "AN":[/(^AN)/g, ['Keyword','Operand Delimiter']],
    "NUMBR":[/(^\-?[0-9]+)/g, ['Literal','NUMBR Literal']],
    "NUMBAR":[/(^\-?[0-9]+\.[0-9]+)/g, ['Literal','NUMBAR Literal']],
    "YARN":[/(^\"[^\"]*\")/g, ['Literal','YARN Literal']],
    "TROOF":[/^((WIN)|(FAIL))/g, ['Literal','TROOF Literal']],
    "IDENTIFIER":[/^([A-Za-z]+[0-9\_]*)/g, ['Identifier','Identifier']],
    "SPACE":[/^ /g, ['Space','Keywords Separator']],
    "LINEBREAK":[/^\n/g, ['Line Break','New Line']],
}